script "config"local sConfig// initConfig// This is the starting point of configuration// This should be called on the very beggining of your app// Gurgen - Created - 10.02.18function initConfig      // Get congif   put getConfigParams() into tConfig      // Check if config is exists   if tConfig is empty then      return false   else      // Save in local variable      put tConfig into sConfig   end if      // App demensions   setAppDemensions tConfig["demensions"]      // Load the substacks   if tConfig["loadSubstacks"] is not empty then      loadSubstacks tConfig["substacksPath"], tConfig["loadSubstacks"]      useSubstacks tConfig["useSubstacks"]   end if      // Set stack and card behaviors   setBehaviors tConfig["stacks"]      // Set the environment variables   setEnvironmentVariables      // Copy the database   put copyDatabase (sConfig["databaseName"]) into tRes   -- Check the copy result   if not tRes then      answer "There was an error while copying the database file"      return false   end if      return trueend initConfig// setAppDemensions// This sets the app rect depending on the run environment// Gurgen - Created - 10.02.18private command setAppDemensions pDemenstions   put the long id of the defaultstack into tMainstack      if the environment is "mobile" then            set the rect of tMainstack to pDemenstions["mobile"]   else if the environment is "development" then            set the rect of tMainstack to pDemenstions["development"]   else      set the rect of tMainstack to pDemenstions["*"]   end ifend setAppDemensions// getConfigParams// This loads the config json file and converts it to livecode array// Gurgen - Created - 10.02.18private function getConfigParams   put getAppPath() & slash & "config.json" into tJsonFile      if there is no file tJsonFile then      answer "Error: Config.json file is not found -" && tJsonFile      return empty   end if      put URL ("file:" & tJsonFile) into tJSON   return JSONToArray(tJSON)end getConfigParams // loadSubstacks// Loads substack files from given folder// Gurgen - Created - 10.02.18private command loadSubstacks pSubstacksPath, pSubstacksToLoad   -- ONLY if development   if the environment is "Development" then            -- Get the substacks folder path      put getAppPath() & slash & pSubstacksPath & slash into tSubstacksPath                  -- Can't find the 'substacks' folder, so nothing to do there      if there is no folder tSubstacksPath then          answer "Can't find folder:" && tSubstacksPath         exit loadSubstacks      end if            put pSubstacksToLoad into tSubstacks            -- Loop and add to project      repeat for each element tSubstack in tSubstacks         -- Substack full path         put tSubstacksPath & tSubstack into tStackToUse                  -- Substack short name         put the short name of stack tStackToUse into tStackName                  -- If exists older version, just replace         if there is stack tStackName then            delete stack tStackName         end if                  -- Load the substack         set the mainStack of stack tStackToUse to the long id of stack the mainstack of this stack                  -- Set as Script Only         set the scriptOnly of stack tStackToUse to true      end repeat   end ifend loadSubstacks// useSubstacks// Makes substacks available for livecode objects by "using" command// Gurgen - Created - 10.02.18private command useSubstacks pSubstacksToUse   repeat for each element tSubstack in pSubstacksToUse      if there is stack tSubstack then         start using stack tSubstack      else         answer "Error: Can't find stack " && tSubstack      end if   end repeatend useSubstacks// setEnvironmentVariables// This will set the evironment variables such as app path, app data path// This has dependency on PM lib// Gurgen - Created - 10.03.18private command setBehaviors pStacksConfig   // Loop trought the stacks   repeat for each element tStack in pStacksConfig      // Set Stack behavior      set the behavior of stack tStack["name"] to the long id of stack tStack["behavior"]            // Go over the cards and set behaviors for them      repeat for each element tCard in tStack["cards"]         set the behavior of card tCard["name"] to the long id of stack tCard["behavior"]      end repeat   end repeatend setBehaviors// setEnvironmentVariables// This will set the evironment variables such as app path, app data path// This has dependency on PM lib// Gurgen - Created - 10.02.18private command setEnvironmentVariables   local tAppPath, tAppDataPath      // Mobile   if the environment is "mobile" then      put specialFolderPath("engine") & slash into tAppPath      put specialFolderPath("documents") & slash into tAppDataPath   else // Desktop            // The path app path, where your livecode file is located      put getAppPath() & slash into tAppPath            // App data path, here you have full R&W access      put specialFolderPath("documents") & slash into tAppDataPath            // Concat the app name from configs      put sConfig["name"] after tAppDataPath            // Create the folder if doesn't exists      if there is no folder tAppDataPath then         create folder tAppDataPath      end if            // Extra slash      put slash after tAppDataPath   end if      // Save globaly using PM   pmSetProp "appPath", tAppPath   pmSetProp "appDataPath", tAppDataPath   pmSetProp "appConfig", sConfigend setEnvironmentVariables// copyDatabase// Copy the database to given folder// Gurgen - Created - 10.02.18private function copyDatabase pDatabaseFile   put pmGetProp("appPath") & pDatabaseFile into tDbFile      if there is no file tDbFile then      answer "Database file not found:" && tDbFile      return false   end if      // Get app data folder to copy the database into   put pmGetProp("appDataPath") & pDatabaseFile into tCopyPath      if there is file tCopyPath then      if sConfig["databaseRewriteOnStart"] then         put URL ("binfile:" & tDbFile) into URL ("binfile:" & tCopyPath)      end if   else      put URL ("binfile:" & tDbFile) into URL ("binfile:" & tCopyPath)   end if      return trueend copyDatabaseprivate function getAppPath   put the effective filename of stack the mainstack of this stack into tAppPath   set the itemDel to slash   delete last item of tAppPath   set the itemDel to comma      return tAppPathend getAppPath------------------------------------------------------------ DESCRIPTION--         This will work every time when developer want to save the project,--          it will save all changes on loaded substacks into script only files-- CHANGES--          11/17/2016: Gurgen - created ----------------------------------------------------------on saveStackRequest   -- ONLY works in development mode   if the environment is "Development" then            put the substacks of stack the mainstack of this stack into tSubstacks      -- Loop all loaded substacks and save the changes      repeat for each line tStack in tSubstacks         put $g("appPath") & slash & sConfig["substacksPath"] & slash & tStack & ".livecode" into tStackFile                  // Rewrite only if the stack exists         if the num of controls of stack tStack = 0 then            put the script of stack tStack into tScript                        put ("script " & quote & tStack & quote & return)  before tScript                        -- Finaly save to file            put tScript into URL("file:" & tStackFile)         end if      end repeat   end if      -- Make abble Livecode to do his work on saving   pass saveStackRequestend saveStackRequest