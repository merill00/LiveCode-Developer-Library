--> MetaData
-
name: lib_DaemonMiddleware
type: behavior
version: 0.8
copyright: David Bovill
licence:  GPLv3

/*
You dont have to use separate middleware. 
You can put these "before" and "after" handlers anywhere in the behavior_Hirarchy
They work as middleware wherever they are.
They only get called once ( though it should work  to be called twice if you try passing them - not tested).

This script is designed to be a behavior for a Live Daemon server.
By default it should be a behavior of the Daemon Server stack.
So the hiierarchy goes: server stack => lib_DaemonMiddleware => lib_DaemonRouter => lib_DaemonServer => lib_DaemonLog => lib_Log

However this hiierarchy can be altered using "server_SetBehaviorHierarchy" in the server stack,
which will override the handler of the same name in the lib_DaemonServer stack.
*/

local MiddlewareArray


--> Log | Utility
-
/*
The old way to do things was call this within handlers of the application.
Now we use this as a utility handler for before / after handler middleware.
*/

[[ _FetchHandler (log_View,g) ]]

[[ _FetchHandler (daemon_Log,pc) ]]


--> Start and Stop
-
[[ _FetchHandler (fedwiki_StartServer,a) ]]

[[ _FetchHandler (fedwiki_StopServer,a) ]]


--> Overrides
-
--> Before and Afters
-
[[ _FetchHandler (daemon_SendNotFound,b) ]]

[[ _FetchHandler (process_UnGot,b) ]]

-- before process_GET someRoute, socketID, requestArray
   daemon_Log ("Getting:" && someRoute)
   dameon_AddToMiddlewareArray requestArray, "process_GET"
end process_GET

[[ _FetchHandler (daemon_SendRedirect,b) ]]

[[ _FetchHandler (daemon_SetPort,b) ]]

[[ _FetchHandler (daemon_SetPort,a) ]]

[[ _FetchHandler (daemon_Start,a) ]]

[[ _FetchHandler (fedwiki_StopServer,b) ]]


--> Utils
-
[[ _FetchHandler (dameon_AddToMiddlewareArray,c) ]]

[[ _FetchHandler (middleware_DeleteArray,c) ]]

[[ _FetchHandler (middleware_GetArray,f) ]]
