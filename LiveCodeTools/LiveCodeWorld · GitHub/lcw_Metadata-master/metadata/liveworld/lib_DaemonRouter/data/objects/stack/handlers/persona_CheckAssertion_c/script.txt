command persona_CheckAssertion requestArray, socketID
   daemon_SendOK socketID,  "OK mate"
   return "OK mate"
   
   -- assertion=eyJhbGciOiJSUzI1NiJ9.eyJwdWJsaWMta2V5Ijp7ImFsZ29yaXRobSI6IkRTIiwieSI6IjczNWEzYzgyNjk0MDMwZTdjNDk0ZTZkYzBiZmQ4OWUwMTg3NWRmNmRhOWMxMTMwN2I4NDk1MTJhYWNlNGZkNzQ3NjE3ODcxOTYwZGFhN2MxM2Q0YjgwYzIxNzU3MWQyYTY2ZTI4ZGUyYzJjMjM0MWRjOGFmZGZiZWU2NWViMmI5ZjA1YjQ3OGMxNDU0ODYxYWY2MjY4M2Y4OTkzN2U1NjEzNzdmNmNiZTI5ZmZhMDA2ODc1N2JhMjA5MjhhNTY5YzE0MTBkYTJlZDg2YWVlZmEyZTZjNWUzMzU2NjA2MjhkNGVlOGQxNGFjODVhMTgyYTE1ZGUzOTNmNTk4MzI0NjkiLCJwIjoiZmY2MDA0ODNkYjZhYmZjNWI0NWVhYjc4NTk0YjM1MzNkNTUwZDlmMWJmMmE5OTJhN2E4ZGFhNmRjMzRmODA0NWFkNGU2ZTBjNDI5ZDMzNGVlZWFhZWZkN2UyM2Q0ODEwYmUwMGU0Y2MxNDkyY2JhMzI1YmE4MWZmMmQ1YTViMzA1YThkMTdlYjNiZjRhMDZhMzQ5ZDM5MmUwMGQzMjk3NDRhNTE3OTM4MDM0NGU4MmExOGM0NzkzMzQzOGY4OTFlMjJhZWVmODEyZDY5YzhmNzVlMzI2Y2I3MGVhMDAwYzNmNzc2ZGZkYmQ2MDQ2MzhjMmVmNzE3ZmMyNmQwMmUxNyIsInEiOiJlMjFlMDRmOTExZDFlZDc5OTEwMDhlY2FhYjNiZjc3NTk4NDMwOWMzIiwiZyI6ImM1MmE0YTBmZjNiN2U2MWZkZjE4NjdjZTg0MTM4MzY5YTYxNTRmNGFmYTkyOTY2ZTNjODI3ZTI1Y2ZhNmNmNTA4YjkwZTVkZTQxOWUxMzM3ZTA3YTJlOWUyYTNjZDVkZWE3MDRkMTc1ZjhlYmY2YWYzOTdkNjllMTEwYjk2YWZiMTdjN2EwMzI1OTMyOWU0ODI5YjBkMDNiYmM3ODk2YjE1YjRhZGU1M2UxMzA4NThjYzM0ZDk2MjY5YWE4OTA0MWY0MDkxMzZjNzI0MmEzODg5NWM5ZDViY2NhZDRmMzg5YWYxZDdhNGJkMTM5OGJkMDcyZGZmYTg5NjIzMzM5N2EifSwicHJpbmNpcGFsIjp7ImVtYWlsIjoiZGF2aWQuYm92aWxsQGdtYWlsLmNvbSJ9LCJpYXQiOjE0Mzc5MjE0MTYyOTMsImV4cCI6MTQzNzk0MzAyNjI5MywiaXNzIjoiZ21haWwubG9naW4ucGVyc29uYS5vcmcifQ.EvWVM1tV1G52BLJQGlhf0Fi33AaCBecRRI0bKS9dD_vKBOCumqwuAr8yWqeoA_71WBwuNhqNb1X28jsgTu3cQ4HB-f1aaw6IMa0FVsZPBvgCf45yppV9oJieSYA3Vw0C459RYQ2KZ8wZ6MR_CV0-_GnHZ0YgglwO3ndlYyZFnvLaiWa434i3EK1uGoR1BHS0VQ0bIj_JBgmMoDLXLdleoroOurf4EtVFJ1EnSkdkPM4UVcr9i_Ymxo1ziLxlCZN5sbHEy21KKdRYV0p_lB3tQOtFLa0QNFKB_Ekxqri_q5ztXU3iEw_J52AphIO4s9_Ci8HOY4WjAyb4IcNj3TEuqw~eyJhbGciOiJEUzEyOCJ9.eyJleHAiOjE0Mzc5MzIzNDAzODYsImF1ZCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODA4MiJ9.JLwV-q7A_Kn-KJQB_d8_tWeUEvS56LMe8mTBEicZAfRuOIp9jXniEw
   /*
   ¥	Get the assertion we were given from Persona on the client side
   ¥	Load up a payload with that assertion so we can POST it back to Persona from the Server Side.
   
   # Send the assertion to Mozilla's verifier service
   data = {"assertion": request.form["assertion"],
   "audience": "https://example.com:443"}
   resp = post("https://verifier.login.persona.org/verify",
   data=data)
   info = resp.json()
   
   ¥	Cool? We're in, make a local UserProfile if we need to, otherwise use the existing one.
   ¥	Set the FormsAuth cookie, we're good.
   
   This is a signed blob with data inside essentially saying "I promise this is foo@bar.com". 
   Still, you can't fully trust the client. So, you need to send this assertion to your server, and verify that it wasn't tampered with, and that the promise isn't a lie. 
   After successfully verifying, you can do your normal session stuff that you would normally do, 
      and then be sure in all subsequent page loads to set loggedInUser to the user's email.
      */
      
      if AvoidLoopingHack is true then
         daemon_SendOK socketID, "okay"
         put false into AvoidLoopingHack
         return "Stopped looping!"
      else
         put true into AvoidLoopingHack
      end if
      
      put daemon_GetPostData (requestArray) into assertionJSON
      put assertionJSON into replyArray
      
      split replyArray with "&" and "="
      put replyArray ["assertion"] into someAssertion
      put "http://localhost:8082" into someAudience
      
      put persona_ConstructAssertionCheck (someAssertion, someAudience) into formData
      post formData to url "https://verifier.login.persona.org/verify"
      put it into someReply
      put someReply
      
      -- "okay"
      -- "wrong-address"
      -- "failure"
      -- or empty? => logout
      
      daemon_SetSession socketID, someReply
      -- daemon_SendOK socketID, someReply -- "okay"
end persona_CheckAssertion