--> MetaData
-
license: GPLv3
name: model_ScriptMenu
type: model
version: 0.9

/*
The menu model is in transition, and is still using the old "table" baes data structure.
Currently in the process of moving over to the new array based structure which should be more readable, maintainable and faster.

A menu_Controller contains all the information needed to create a menu, and link each menu item to a handler.
Views are linked to menu_Controllers via the menu_Title and the menu_Controller of the view.
This combination of mTitle and mController uniquely identifies the menu model for that menu and it's associated script.

This model can be referenced by a property of the menu_Target called "the menu_Array".
The actual data is stored as a custom property of the menu_Controller, but in future could use other methods.

As a model it contains the usual structure:  data, display data and metadata
You can access the various components of the menu model with the following properties:

menu_DataArray = a single array containing the menu_Tables of all the views it is linked to (usually the card views)
menu_DisplayArray= display data, translations and other formattng of the menu (not used yet)
menu_MetaDataArray = information, help etc associated with a menu. Things like menu_HelpUrl

Each individual menu has an associated mTable. The majority of the handlers that create and display dynamic menus act on the menu_Table:

-  menu_Table = data about a single menu stored as part of menu_DataArray

The storage of the actual data differs slightly from a normal array based model in that:

-  menu_DataArray does not use [mTitle]["Data"] but instead it's own custom property  set "menu_Table"
-  menu_DisplayArray will use [mTitle]["Display"]
-  menu_MetaDataArray uses [mTitle]["MetaData"]
*/


--> Menu | Models | MetaData
-
[[ _FetchHandler (menu_GetTable,f) ]]

[[ _FetchHandler (menu_SetTable,c) ]]

[[ _FetchHandler (menu_GetDataArray,f) ]]

[[ _FetchHandler (menu_SetDataArray,c) ]]

[[ _FetchHandler (menu_GetTitleTableArrayGlobal,f) ]]

[[ _FetchHandler (menu_SetTitleTableArrayGlobal,c) ]]


--> Menu Model | Global
-
[[ _FetchHandler (menu_GetGlobalController,f) ]]

[[ _FetchHandler (menu_SetGlobalController,c) ]]

[[ _FetchHandler (menu_GetGlobalArray,f) ]]

[[ _FetchHandler (menu_SetGlobalArray,c) ]]


--> Menu Model | Props
-
[[ _FetchHandler (menu_Array,g) ]]

[[ _FetchHandler (menu_Array,s) ]]

[[ _FetchHandler (menu_MetaDataArray,g) ]]

[[ _FetchHandler (menu_MetaDataArray,s) ]]

[[ _FetchHandler (menu_DataArray,g) ]]

[[ _FetchHandler (menu_DataArray,s) ]]

[[ _FetchHandler (script_MenuTitles,g) ]]

[[ _FetchHandler (menu_GlobalTitle,g) ]]

[[ _FetchHandler (menu_GlobalTitle,s) ]]

[[ _FetchHandler (menu_TableTitles,g) ]]

[[ _FetchHandler (menu_Table,s) ]]

[[ _FetchHandler (menu_Help,g) ]]

[[ _FetchHandler (menu_Help,s) ]]


--> Menu | Model
-
[[ _FetchHandler (menu_GetTableTitles,f) ]]

[[ _FetchHandler (menu_GetActiveText,f) ]]

[[ _FetchHandler (menu_SetActiveText,c) ]]

[[ _FetchHandler (menu_GetTargetObject,f) ]]

[[ _FetchHandler (menu_GetTargetOveride,f) ]]


--> Menu | Global | Titles
-
[[ _FetchHandler (menu_GlobalTitles,f) ]]

[[ _FetchHandler (menu_GlobalControllers,f) ]]

[[ _FetchHandler (menu_TitleIsGlobal,f) ]]


--> Menu | Model | Table | Titles
-
function menu_GetTableTitles mController
   put menu_GetDataArray (mController) into menuTableArray
   put keys(menuTableArray) into tableTitles
   return tableTitles
end menu_GetTableTitles

[[ _FetchHandler (menu_DeleteTables,c) ]]


--> Help | Model
-
/*
These utility handlers provide access to menu help. 
This is useful not just for development, but also in providing help for the final product.
*/

[[ _FetchHandler (menu_GetItemHelp,f) ]]

[[ _FetchHandler (menu_SetItemHelp,c) ]]


--> Old
/*
Removing the old Global menu Suite code, as we have switched to hArray

getprop script_UpdateGlobalSuiteIndex
   put the long id of the target into scriptObject
   put the script of scriptObject into someScript
   
   put script_ExtractGlobalTitles (someScript) into newSuiteTitles
   script_RemoveObjectFromSuiteArray scriptObject
   
   put the rugged_ID of scriptObject into scriptObject
   put empty into newArray
   repeat for each line suiteTitle in newSuiteTitles
      put scriptObject into newArray [suiteTitle]
   end repeat
   
   script_AddToGlobalSuiteArray newArray
   put the result into arrayKeyList
   return arrayKeyList
end script_UpdateGlobalSuiteIndex

command script_AddToGlobalSuiteArray newArray, modelObject
   -- this should be updated to take advantage of the new script_Array metadata
   if keys(newArray) is empty then return empty
   
   put script_GetGlobalSuiteArray() into dataArray
   array_AddNew newArray, dataArray
   -- union dataArray with newArray
   script_SetGlobalSuiteArray dataArray   
   return the result
end script_AddToGlobalSuiteArray

on script_RemoveObjectFromSuiteArray scriptObject
   if exists(scriptObject) is false then
      put merge("Error: cannot find object: [[scriptObject]]") into someError
      return the script_Error [someError] of me
   end if
   
   put script_GetGlobalSuiteArray() into dataArray
   repeat for each key suiteTitle in dataArray
      put dataArray [suiteTitle] into testObject
      if exists(testObject) is false or the long id of testObject is the long id of scriptObject then
         delete local dataArray [suiteTitle]
      end if
   end repeat
   script_SetGlobalSuiteArray dataArray
   return empty
end script_RemoveObjectFromSuiteArray

command script_UpdateGlobalSuiteIndex scriptObject, someScript, pSuiteTitles
   if pSuiteTitles is empty then put script_ExtractGlobalTitles (someScript) into pSuiteTitles
   script_RemoveObjectFromSuiteArray scriptObject	# but instead just delete all old references in index
   
   -- get the mobile_Name of scriptObject
   put the rugged_ID of scriptObject into scriptObject
   put empty into newArray
   repeat for each line suiteTitle in pSuiteTitles
      put scriptObject into newArray [suiteTitle]
   end repeat
   
   script_AddToGlobalSuiteArray newArray
   put the result into scriptGlobalSuites
   return scriptGlobalSuites
end script_UpdateGlobalSuiteIndex

function script_MenuTitleArrayFromSuiteTitles suiteTitles
    local menuTitleArray
    set the itemdelimiter to "|"
    put "Menu \((.*)\)" into regularExpression
    put empty into menuTitles
    repeat for each line suiteTitle in suiteTitles
        put word 1 to -1 of last item of suiteTitle into lastMenuItem
        if lastMenuItem is "Menu" then
            put suiteTitle & CR after menuTitles
            put "" into menuTitleArray [suiteTitle]
        else if matchtext(lastMenuItem, regularExpression, toolMode) is true then
            put suiteTitle & CR after menuTitles
            put toolMode into menuTitleArray [suiteTitle]
        end if
    end repeat
    delete last char of menuTitles
    put menuTitles into menuTitleArray ["OrderedMenuTitles"]
    return menuTitleArray
end script_MenuTitleArrayFromSuiteTitles

function script_MenuToolModeArray someScript
    local menuToolModeArray
    put script_GetSuiteTitles(someScript) into suiteTitles
    
    set the itemdelimiter to "|"
    put "Menu \((.*)\)" into regularExpression
    put empty into menuTitles
    set the wholematches to true
    repeat for each line suiteTitle in suiteTitles
        put word 1 to -1 of last item of suiteTitle into lastMenuItem
        if lastMenuItem is among the items of "Menu|Menus|Submenu|Submenus" then
            put suiteTitle & CR after menuTitles
            put empty into menuToolModeArray [suiteTitle]
        else if matchtext(lastMenuItem, regularExpression, toolMode) is true then
            put suiteTitle & CR after menuTitles
            put toolMode into menuToolModeArray [suiteTitle]
        end if
    end repeat
    delete last char of menuTitles
    put menuTitles into menuToolModeArray ["OrderedMenuTitles"]
    return menuToolModeArray
end script_MenuToolModeArray
*/
