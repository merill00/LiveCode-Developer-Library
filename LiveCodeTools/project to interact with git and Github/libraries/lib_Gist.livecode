script "lib_Gist"
--> MetaData
-
license: GPLv3
name: lib_Gist
type: script library
version: 0.3

/*
A library for interfacing with GitHub gists.
*/


--> GitHub | Gist
-
command gist_Launch shortGistFile
   switch which
      case "API"
         launch url "https://developer.github.com/v3/gists/"
         break
      case "opn"
         launch url "https://gist.github.com/opn"
         break
      default
         local gistListArray, gistID
         gist_SearchListArray shortGistFile, gistListArray, gistID
         put the result into gistFileInfoArray
         put gistFileInfoArray ["html_url"] into gistHtmlUrl
         if gistHtmlUrl is empty then
            launch url "https://gist.github.com/opn"
            return empty
         else
            launch url gistHtmlUrl
            return gistHtmlUrl
         end if
   end switch
end gist_Launch

command gist_SaveHkey hKeys, @pShortGistFile, pGistHelp, pIsPublic
   put line 1 of hKeys into hKey
   if pGistHelp is empty then
      put _FetchAndAskForHkeyHelp (hKey) into pGistHelp
   end if
   put json_Utf8Encode (pGistHelp) into pGistHelp
   
   put hkey_CollectFromObjects (hKeys) into someScript
   put gist_ShortFileFromHkey (hKeys) into shortGistFile
   
   put gist_FindInListArray (shortGistFile) into gistID
   if gistID is empty then
      gist_Create someScript, pGistHelp, shortGistFile, pIsPublic
   else
      gist_Edit gistID, shortGistFile, someScript, pGistHelp, pIsPublic
   end if
   
   put the result into someJSON
   put json_ToArray (someJSON) into gistReplyArray
   return gistReplyArray
end gist_SaveHkey

command gist_SaveObjectScript scriptObject, pGistHelp, pIsPublic, pGistListArray
   if exists (scriptObject) is false then return ("error, object" && scriptObject && "does not exist!")
      
   if pGistHelp is empty then
      put _FetchAndAskForScriptHelp (scriptObject) into pGistHelp
   end if
   put json_Utf8Encode (pGistHelp) into pGistHelp
   
   put the script of scriptObject into someScript
   put gist_ShortFileFromObject (scriptObject) into shortGistFile
   
   gist_SaveOrUpdate someScript, shortGistFile, pGistHelp, pIsPublic, pGistListArray
   put the result into someArray
   return someArray
end gist_SaveObjectScript

command gist_SaveOrUpdate someScript, shortGistFile, pGistHelp, pIsPublic, pGistListArray
   put gist_FindInListArray (shortGistFile, pGistListArray) into gistID
   if gistID is empty then
      gist_Create someScript, pGistHelp, shortGistFile, pIsPublic
   else
      gist_Edit gistID, shortGistFile, someScript, pGistHelp, pIsPublic
   end if
   put the result into someJSON
   put json_ToArray (someJSON) into someArray
   return someArray
end gist_SaveOrUpdate


--> Rig | Gist | File Translation
-
function gist_ShortFileFromHkey hKeys
   put line 1 of hKeys into hKey
   put handler_ConvertType (item 2 of hKey) && word 1 of item 1 of hKey into prettyHandlerName
   -- put "handler" & comma & handler_ConvertType (item 2 of hKey) && word 1 of item 1 of hKey into shortGistFile
   put gist_ShortFileToKey (prettyHandlerName, "handler") into shortGistFile
   return shortGistFile
end gist_ShortFileFromHkey

function gist_ShortFileFromObject scriptObject
   replace quote with "'" in scriptObject
   put "script," & word 1 to -1 of scriptObject into shortGistFile
   return shortGistFile
end gist_ShortFileFromObject

function gist_FilterWithKey gistList, keyType, pShortServer
   put gistList into shortControllers
   if keyType is not empty then
      put gist_ConstructTypeFilter (keyType, pShortServer) into typeFilter
      filter shortControllers with (typeFilter & "*")
      replace typeFilter with empty in shortControllers
   end if
   sort shortControllers
   return shortControllers
end gist_FilterWithKey

function gist_ShortFileFromKey shortGistFile
   gist_DeconstructKey shortGistFile, shortController, serverURL
   return shortController
end gist_ShortFileFromKey

function gist_ShortFileToKey shortController, gistType, pShortServer
   -- was "rig_ShortFileToGist"
   put gist_ConstructTypeFilter (gistType, pShortServer) into serverBit
   put serverBit & shortController into shortGistFile
   return shortGistFile
end gist_ShortFileToKey

function gist_ConstructTypeFilter gistType, pShortServer
   if pShortServer is empty then put server_GetURL() into pShortServer
   put pShortServer && gistType & ":  " into serverBit
   return serverBit
end gist_ConstructTypeFilter

private command gist_DeconstructKey shortGistFile, @shortController, @shortServer
   -- was "rig_DeconstructGistShortFile"
   
   set the itemdelimiter to ":  "
   put item 1 of shortGistFile into gistTag
   get item 2 to -1 of shortGistFile
   
   set the itemdelimiter to space
   if item -1 of gistTag is not among the words of "controller stack library helper handler script" then
      put empty into shortController
      put empty into shortServer
      return false
   end if
   
   put it into shortController
   put item 1 of gistTag into shortServer
   return true
end gist_DeconstructKey


--> Gist | List
-
function gist_FetchFiles whichType
   put gist_List() into gistList
   sort gistList
   put gist_FilterWithKey (gistList, whichType) into shortGistFiles
   return shortGistFiles
end gist_FetchFiles

function gist_List
   local previousURL, nextURL, firstURL, lastURL,rateLimitRemaining
   
   put gist_FetchListArray() into gistListArray
   gist_ExtractReceivedHeaderArray previousURL, nextURL, firstURL, lastURL,rateLimitRemaining
   put gist_ParseListArray (gistListArray) into gistList
   
   if nextURL is not empty then
      repeat 20 -- while nextURL is not empty -- careful could repeat forever
         put gist_FetchListArray (nextURL) into moreGistListArray
         
         gist_ExtractReceivedHeaderArray previousURL, nextURL, firstURL, lastURL,rateLimitRemaining
         put gist_ParseListArray (moreGistListArray) into moreGistList
         put CR & moreGistList after gistList
         
         if nextUrl is empty then exit repeat
      end repeat
   end if
   return gistList
end gist_List

function gist_IDFromHkey hKey, pGistListArray
   -- handler:  function fedwiki_ItemChecked
   put gist_ShortFileFromHkey (hKey) into shortGistFile
   put gist_FindInListArray (shortGistFile, pGistListArray) into gistID
   return gistID
end gist_IDFromHkey

function gist_FindInListArray shortGistFile, pGistListArray
   gist_SearchListArray shortGistFile, pGistListArray, gistID
   return gistID
end gist_FindInListArray

function gist_UrlFromHkey hKey, pGistListArray
   put gist_ShortFileFromHkey (hKey) into shortGistFile
   gist_SearchListArray shortGistFile, pGistListArray, gistID
   put the result into gistFileInfoArray
   
   gist_DeconstructFileInfoArray gistFileInfoArray, shortGistFile, gistContent, gistDescription, htmlURL, gitPulllURL
   -- put "https://gist.github.com/opn/" & gistID into gistURL
   return htmlURL
end gist_UrlFromHkey

function gist_FetchContent gistID
   put gist_FetchArray (gistID) into gistFileArray
   put gist_ExtractContent (gistFileArray) into gistContent
   return gistContent
end gist_FetchContent

function gist_ExtractContent gistFileArray, pShortGistFile
   gist_DeconstructFileInfoArray gistFileArray, pShortGistFile, gistContent, gistDescription, htmlURL, gitPulllURL
   return gistContent
end gist_ExtractContent

command gist_DeconstructFileInfoArray gistFileInfoArray, @pShortGistFile, @gistContent, @gistDescription, @htmlURL, @gitPulllURL
   if pShortGistFile is empty then
      put gistFileInfoArray ["files"] into fileSectionArray
      put line 1 of keys (fileSectionArray) into pShortGistFile
   end if
   put gistFileInfoArray ["files"] into gistFileArray
   put gistFileArray [pShortGistFile]["content"] into gistContent
   
   put gistFileInfoArray ["description"] into gistDescription
   put gistFileInfoArray ["html_url"] into htmlURL
   put gistFileInfoArray ["git_pull_url"] into gitPulllURL
   
   -- put gistFileInfoArray ["owner"] into gistOwnerArray
   return gistFileArray
end gist_DeconstructFileInfoArray

command gist_SearchListArray shortGistFile, @gistListArray, @gistID
   put empty into gistID
   if gistListArray is not an array then 
      put gist_FetchListArray() into gistListArray
   end if
   repeat for each key indexNum in gistListArray
      put gistListArray [indexNum] into gistFileInfoArray
      put gistFileInfoArray ["files"] into gistFileArray
      put keys (gistFileArray) into gistFiles
      if shortGistFile is among the lines of gistFiles then
         put gistFileInfoArray ["id"] into gistID
         return gistFileInfoArray
      end if
   end repeat
   return gistListArray
end gist_SearchListArray

function gist_ParseListArray gistListArray
   repeat for each key indexNum in gistListArray
      put gistListArray [indexNum]["description"] into gistDescription
      put gistListArray [indexNum]["files"] into gistFileArray
      put keys (gistFileArray) into gistFiles
      put gistFiles & CR after gistList
   end repeat
   delete char -1 of gistList
   return gistList
end gist_ParseListArray

function gist_FetchArray gistID
   put gist_FetchJson (gistID) into someJSON
   put json_ToArray (someJSON) into someArray
   return someArray
end gist_FetchArray

function gist_FetchListArray pNextURL
   -- put  "/users/:username/gists"
   -- put url "GET /users/:username/gists"
   put gist_FetchListJson (pNextURL) into someJSON
   put json_ToArray (someJSON) into gistReplyArray
   return gistReplyArray
end gist_FetchListArray

function gist_FetchListJson pNextURL
   /*
   -- put  "/users/:username/gists"
   -- put url "GET /users/:username/gists"
   -- &per_page=100
   */
   
   if pNextURL is empty then
      put "/gists" into restPath
      put "?per_page=100" after restpath
      -- put "&page=3" after restpath
      put github_RestGet (restPath) into someJSON
   else
      put github_RestGetFromUrl (pNextURL) into someJSON
   end if
   return someJSON
end gist_FetchListJson


--> Gist | Edit
-
command gist_Edit gistID, shortGistFile, pSomeText, pDescription, pIsPublic
   -- PATCH /gists/:id
   -- but you can use a POST
   
   put "/gists/" & gistID into restPath
   put gist_ConstructEditJSON (shortGistFile, pSomeText, pDescription, pIsPublic) into postJSON
   github_RestPatch restPath, postJSON
   put the result into someJSON
   return someJSON
end gist_Edit

function gist_ConstructEditJSON shortGistFile, pSomeText, pDescription, pIsPublic
   put pIsPublic is not false into pIsPublic
   if pSomeText is not empty then put pSomeText into postArray ["content"]
   put json_FromArray (postArray) into innerJSON
   
   if pDescription is not empty then put "{" & kwote("description") & ":" & kwote (pDescription) into postJSON
   put comma & kwote ("public")  & ":" & pIsPublic after postJSON
   put comma & kwote ("files")  & ":{" & kwote (shortGistFile) after postJSON
   put ":" & innerJSON after postJSON
   put "}}" after postJSON
   return postJSON
end gist_ConstructEditJSON

command gist_Delete gistID
   -- this is slow
   -- DELETE /gists/:id
   put "/gists/" & gistID into restPath
   github_RestDelete restPath
   put the result into someJSON
   return someJSON
end gist_Delete

function gist_FetchJson gistID
   -- GET /gists/:id
   put "/gists/" & gistID into restPath
   put github_RestGet (restPath) into someJSON
   return someJSON
end gist_FetchJson

command gist_Create someText, someDescription, shortGistFile, pIsPublic
   -- POST /gists
   -- {"description": "the description for this gist","public": true,"files": {"file1.txt": {"content": "String file contents"}}}
   
   put pIsPublic is not false into pIsPublic
   put someText into postArray ["content"]
   put json_FromArray (postArray) into innerJSON
   put "{" & kwote("description") & ":" & kwote(someDescription) into postJSON
   put comma & kwote("public")  & ":" & pIsPublic after postJSON
   put comma & kwote("files")  & ":{" & kwote(shortGistFile) after postJSON
   put ":" & innerJSON after postJSON
   put "}}" after postJSON
   
   github_RestPost "/gists", postJSON
   put the result into jsonResult
   return jsonResult
end gist_Create


--> Gist | Header
-
command gist_ExtractReceivedHeaderArray @previousURL, @nextURL, @firstURL, @lastURL,@rateLimitRemaining
   put server_ExtractReceivedHeaderArray() into receivedHeaderArray
   
   put receivedHeaderArray ["Status"] into someStatus
   put receivedHeaderArray ["X-RateLimit-Limit"] into rateLimit
   put receivedHeaderArray ["X-RateLimit-Remaining"] into rateLimitRemaining
   
   get receivedHeaderArray ["Link"]
   set the itemdelimiter to ";"
   set the linedelimiter to comma
   
   -- needed if the links are not there
   put empty into previousURL
   put empty into nextURL
   put empty into firstURL
   put empty into lastURL
   
   -- now extract the ones that are
   repeat for each line urlBit in it
      put item 1 of urlBit into someUrl
      put item 2 of urlBit into someRef
      put token 3 of someRef into urlType
      switch urlType
         case "next"
            put _cleanReceivedURL (someUrl) into nextURL
            break
         case "last"
            put _cleanReceivedURL (someUrl) into lastURL
            break
         case "first"
            put _cleanReceivedURL (someUrl) into firstURL
            break
         case "prev"
            put _cleanReceivedURL (someUrl) into previousURL
            break
         default
            breakpoint
      end switch
   end repeat
   return someStatus
end gist_ExtractReceivedHeaderArray

function server_ExtractReceivedHeaderArray
   put libURLLastRHHeaders() into receivedHeaders
   delete line 1 of receivedHeaders -- HTTP/1.1 200 OK
   split receivedHeaders with CR and ":" 
   return receivedHeaders
end server_ExtractReceivedHeaderArray


--> Gist | Private
-
private function _FetchAndAskForScriptHelp scriptObject
   put the script_Help of scriptObject into pDescription
   _tidyGistHelp pDescription
   
   put the mobile_Name of scriptObject into scriptObject
   put merge ("Give a description for the script of [[scriptObject]]...") into someQuestion
   put lcw_Ask (someQuestion, pDescription) into pDescription
   if the shiftkey is "down" or the optionkey is "Down" then
      answer "Do you want to store this new script description?" with "Cancel" or "OK"
      if it is "OK" then
         set the script_Help of scriptObject to pDescription
      end if
   end if
   return pDescription
end _FetchAndAskForScriptHelp

private function _FetchAndAskForHkeyHelp hKey
   put hkey_FetchHelp (hKey) into pDescription -- this is the project specific help.
   -- put library_FetchHandlerHelp (hkey) into pDescription
   _tidyGistHelp pDescription
   put merge ("Give a description for handler '[[item 1 to 2 of hKey]]'...") into someQuestion
   -- replace "'" with quote in someQuestion
   put lcw_Ask (someQuestion, pDescription) into pDescription
   if the shiftkey is "down" or the optionkey is "Down" then
      answer "Do you want to store this new handler description?" with "Cancel" or "OK"
      if it is "OK" then
         hkey_StoreHelp hKey, pDescription
      end if
   end if
   return pDescription
end _FetchAndAskForHkeyHelp

private command _tidyGistHelp @gistHelp
   put line 1 of gistHelp into gistHelp
   put html_StripAllTags (gistHelp) into gistHelp
end _tidyGistHelp

private function _cleanReceivedURL someURL
   put word 1 of someURL into someURL
   if char 1 of someURL = "<" then delete char 1 of someURL
   if char -1 of someURL = ">" then delete char -1 of someURL
   return someURL
end _cleanReceivedURL
