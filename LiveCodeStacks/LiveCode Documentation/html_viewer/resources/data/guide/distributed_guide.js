	{
	"name":"livecode_script",
	"display name":"LiveCode Script",
	"location":"ide",
	"group":"Introduction",
	"data":"# LiveCode Script\n\n## Introduction\n\nBefore getting started with LiveCode, there are a number of things you\nmay want to know. This guide introduces LiveCode, tells you where to\nbegin, how to install, register and how to use the documentation.\n\n## Welcome\n\nLiveCode makes it easy to turn your concepts, ideas or designs into\npowerful applications. You can create desktop, Internet, database and\nnetwork applications. LiveCode includes a complete graphical user\ninterface builder, as well as the tools you need to produce faceless or\nbackground applications.\n\nLiveCode is easy to learn. If you are a complete beginner to the world\nof programming, you will find you can become productive quickly. If you\nare an experienced programmer, you will find the environment extremely\npowerful and one of the most productive you have used.\n\nLiveCode’s programming language is object-based. This makes it easy to\nwrite modules of code that are attached directly to individual objects.\nUnlike other languages, LiveCode lets you both run and edit an\napplication live. Traditionally the run, edit, compile and debug cycle\nin programming takes up a lot of time. In LiveCode all of these\nactivities can take place together.\n\nIf you’re coming from another language, you’ll appreciate that the\nLiveCode language is typeless, with data automatically stored in the\nmost efficient format and converted, so you don’t have to learn how to\ndeal with different types of data. Memory management is fully automatic.\nLiveCode applications are not interpreted in the traditional sense, so\nthey provide excellent performance. A LiveCode graphical application\nwill often feel more responsive to use than a Java application, and take\nless time to write.\n\nA LiveCode application is completely cross-platform. That means you can\nrun any application you create on all major modern operating systems,\nincluding Windows, Linux, Unix and Mac OS. Unlike most other\ncross-platform frameworks, a LiveCode application will always look and\nfeel native on each platform that you deliver it on. You can take\nadvantage of many platform specific features on each platform.\n\nLiveCode removes the need to learn how to access most individual\nprogramming interfaces for each operating system. This saves you the\ntime and effort of learning thousands of platform-specific interface\ncalls.\n\nThe goal of this manual is to provide the most accessible, comprehensive\nand useful guide to LiveCode possible. We aim to provide a level of\ndepth that covers the advanced feature set, while remaining accessible\nto beginners. We hope you find this material useful and enjoy using\nLiveCode.\n\n## Where to Begin\n\nWe recommend you start by taking a look at [our online\nresources](https://livecode.com/resources/). There is a wide variety of\nintroductory material there, including step-by-step examples and guides\nfor performing common tasks.\n\n## System Requirements\n\nMemory and disk requirements below are for the *LiveCode development\nenvironment*, not for applications created by LiveCode. Applications\ncreated with LiveCode will require sufficient free system resources to\nload, display, process and interact with the content of the application.\nBecause this will vary considerably depending on the application\ncreated, it is not possible to publish a list of requirements for\napplications built with LiveCode. You will need to test your application\nto determine the minimum requirements. Many LiveCode applications will\nrun on a moderately powerful computer and require substantially fewer\nresources than those listed for the development environment, others will\nrequire more.\n\n### All Operating Systems\n\nTo use LiveCode you will need:\n\n-   1024x768 or larger monitor\n\n-   True color display (16-bit or 32-bit depth)\n\n-   At least 256Mb of memory\n\n-   At least 150Mb of disk space\n\n### Requirements for Windows Systems\n\nLiveCode supports the following versions of Windows:\n\n-   Windows 2000 SP4\n\n-   Windows XP SP2 and above\n\n-   Windows Server 2003\n\n-   Windows Vista SP1 and above (both 32-bit and 64-bit)\n\n-   Windows 7 (both 32-bit and 64-bit)\n\n-   Windows Server 2008\n\n### Requirements for Linux Systems\n\nThe minimal requirements for LiveCode to run on Linux are:\n\n- 32-bit installation, or a 64-bit linux distribution that has a 32-bit \ncompatibility layer\n- 2.4.x or later kernel\n- glibc 2.3.2 or later X11R5 capable Xserver running locally on a\n24-bit display\\*\n- compositing window manager (optional - required for alpha-blended\nwindow shapes)\n- gtk/gdk/glib (optional - required for native theme support)\n- pango/xft (optional - required for pdf printing, anti-aliased text\nand unicode font support)\n- lcms (optional - required for color profile support in JPEGs and\nPNGs)\n- gksu (optional - required for elevate process support)\n- mplayer (optional - required for video playback)\n- esd (optional - required for audio playback)\n\nAlthough impossible to test every existing Linux distribution, we are\naiming to ensure that LiveCode runs on as wide a variety of systems as\npossible. To achieve this, the engine has been implemented to have\nminimal direct dependencies on system software, and will gracefully\ndegrade in feature set if it cannot find the libraries it needs.\nGenerally any recent linux distribution including Gnome/GTK support will\nhave the required libraries for full feature support – for example,\nUbuntu 7 supports all these features (although alpha blended window\nshape support requires you to be running with 'Advance Desktop Effects'\nturned on).\n\n### Requirements for Mac OS X Systems\n\nLiveCode supports the following versions of Mac OS X:\n\n- 10.6.x (Snow Leopard)\n- 10.7.x (Lion)\n- 10.8.x (Mountain Lion)\n- 10.9.x (Mavericks)\n- 10.10.x (Yosemite)\n- 10.11.x (El Capitan)\n\n## Using the Documentation\n\n### Documentation Conventions\n\nLanguage Terms\n\nThis documentation contains examples of LiveCode language syntax. The\nsyntax for each language term is provided in **boldface text**.\n\nThe syntax description uses the standard conventions to indicate parts\nof the syntax: \n\n- `[]` Square brackets enclose optional portions.\n- `{}` Curly braces enclose sets of alternatives from which to choose.\n- `|` Vertical bars separate different alternatives.\n- `\\` Line continuation character – this line continues to the next \nline.\n- *Italics* indicate placeholders that you don't enter literally.\n\nCode examples are provided in `typewriter text` or \n\n\tcode blocks\n\n#### Menu Reference\n\nWhen you are told to choose an item from a menu, the menu name is\nwritten, followed by an arrow, followed by the menu item. For example\n**File -\\> New** means choose \"New\" from the \"File\" menu.\n\n#### Keyboard Shortcuts\n\nMany menu items have keyboard equivalents. These items can be accessed\nby holding down a modifier key and pressing another key. The modifier\nkeys used throughout this document are generally the modifier keys used\non Windows, Linux and Unix. If you are using Mac OS, you may need to\nsubstitute modifier keys using the table below. For example, if you are\nusing a Mac, where we say press **control-x** in this documentation, you\nmay need to press **command-x**.\n\n| **Windows and Linux keyboard shortcuts** | **Mac equivalent**        |\n|------------------------------------------|---------------------------|\n| Control                                  | Command                   |\n| Alt                                      | Option  \n\nFigure 2– Cross-platform Keyboard Shortcuts\n\n#### Screen Snapshots\n\nScreenshots are used extensively throughout the documentation. Please\nremember that LiveCode is a cross-platform application. While many of\nthe snapshots are taken on the Windows platform, most of the feature set\nwill work on Linux, Unix and Mac OS. Snapshots of these platforms are\nused from time to time and are also used to illustrate platform specific\nfeatures.\n\n##### Note Styles\n\n> **Tip:** This style of note tells you about an alternative way to\n> do something or describes a shortcut.\n\n> **Important:** This style of note describes an aspect of LiveCode\n> that may confuse you if you don't know about it and tells you how to\n> avoid unexpected behavior.\n\n> **Note:** This style of note provides some additional information\n> that may be useful, or emphasizes a key point.\n\n> **Caution:** This style of note warns you about a potential\n> problem that might cause an error or loss of data.\n\n### Navigating the Documentation\n\nThe LiveCode documentation is spread across four areas; the Start\nCenter, the Dictionary (API), the Guides and other resources.\n\nThe Start Center is aimed at introducing you to LiveCode, and should be\nyour first port of call if you have not used LiveCode before. The\ndictionary, or API, is a reference resource which you can refer to while\nimplementing your projects. Guides are online resources at livecode.com. \nOther resources include Sample Stacks, a free, online repository of \nuser-contributed stacks, User forums, and the resources page at \nlivecode.com/resources/.\n\nYou can access the documentation from within LiveCode from the **Help**\nmenu. Additional resources are available at\n[www.livecode.com](http://www.livecode.com).\n\n### Start Center\n\nThe purpose of the Start Center is to introduce you to LiveCode and\nprovide you with enough knowledge to start implementing your own\nprojects. It can be accessed by choosing **Help -\\> Start Center**. \n\nThe first time you open the Start Center you will see an invitation to \ntake the Interactive Tour, a step-by-step tutorial that guides you \nthrough creation of a simple project in LiveCode. If you choose to \nskip the tour you may always enter it later by clicking the Interactive \nWelcome button in the Start Center.\n\n![](images/startCenter_firstrun.png)\n\nThe Start Center itself is split across three sections&mdash;quick links \nto the LiveCode pages on various social media sites; a collection \nof quick link buttons, which take you to various helps and guides; and \na list of your most recently opened stacks.\n\n![](images/startCenter_labels.png)\n\n#### Social Media Links\n\nLiveCode maintains pages on popular social media sites, such as Facebook, \nYouTube, LinkedIn and Stack Overflow. These can help you keep up to date \non LiveCode product announcements, professional networking, and help and \ntraining resources.\n\n#### Recent Stacks\n\nThis shows a list of your most recently opened stacks. Double click on a \nstack to open it and close the Start Center window.\n\n#### Quick Links\n\nThe quick link buttons let you quickly access tutorials, sample projects, \nguides, LiveCode blog posts, and online user forums. Here is an overview \nof these links:\n\n##### Interactive Welcome\n\nEnter the Interactive Tour, a step-by-step tutorial that guides you \nthrough creation of a simple project in LiveCode.\n\n##### New\n\nClick this button to create a new stack. You will see a menu of common \nstack types and sizes to choose from. Once you choose your stack size \nor type the new stack will be created and the Start Center menu will close.\n\n##### Sample Projects\n\nThe Sample Projects button opens an online repository of sample stacks \nsubmitted by LiveCode developers. The repository contains dozens of \nstacks that you can download for free and use as you wish.\n\n##### Tutorials\n\nOpens the LiveCode online tutorial web page. From here you can choose \none of dozens of lessons and how-to tutorials that give you step-by-step \ninstructions on how to create things, from a simple \"hello world\" \napplication to simple games to sophisticated graphical effects.\n\n##### In Depth Guides\n\nOpens the LiveCode Dictionary. Here you can choose to enter the API \ndocumentation, the definitive reference of all of the terms in the \nLiveCode scripting language. Or you can open one of several user \nguides, which describe in detail how to develop and deploy apps in LiveCode. \n\n##### Forums\n\nLiveCode has a very active and friendly user community. We encourage all\nnew users to sign up to our mailing list and user forums as they are a\ngreat way to get technical help, meet new people and keep up-to-date\nwith what is going on in the world of LiveCode. The “User Forums”\nsection provides a link to our forum registration page as well as a list\nof links to the most recent posts which have been made.\n\n##### Blog\n\nThis button takes you to LiveCode's online blog, where LiveCode engineers\nand developers regularly post updates about what's new in LiveCode, \nhow-to tutorials, and announcements of interest to the LiveCode \ndeveloper community.\n\n##### Account\n\nClick this button to log in to your LiveCode online store account. \nThere you can see your purchases, as well as look for useful add-ons \nto make LiveCode and even more powerful development tool.\n\n### Dictionary\n\nThe LiveCode Dictionary contains detailed reference materials for developing applications with LiveCode. It is divided into two main sections&mdash;the LiveCode API reference and the LiveCode Guides. It can be accessed by choosing **Dictionary (API)** from the **Help** menu, or by clicking the Dictionary icon on the LiveCode Toolbar.\n\n![](images/toolbar-dict.png)\n\n#### LiveCode APIs\n\nThe LiveCode Application Programming Interface, or API, reference contains the complete syntax for all LiveCode components, including LiveCode Script, LiveCode Builder, and all installed widgets and libraries. If you are new to LiveCode you will likely spend most of your time in LiveCode Script, the scripting language used in developing LiveCode applications. The examples that follow will be taken from the LiveCode Script API, but the API documentation for all components uses the same format and layout.\n\n![](images/image4.png)\n\nTo search one of the API lists, click on the API tab at top left, then choose the API you want to search from the option list. For example, to search for a LiveCode Script term, choose LiveCode Script.\n\n**Searching.** If you know what term you want to look up, or if you have a good idea of what it might be, just start typing it into the search box, and a list of terms that match your search term will appear in the entries list. \n\n\n![](images/dict-search.png)\n\n**Filtering.** If, on the other hand, you don’t know the name of the term, but have a general idea of what terms you want to look at you can filter the list of terms by clicking on a filter topic. For instance, to see a list of messages that buttons can respond to, click \"message\" under the **type** category and \"button\" under **associations**. You can clear a filter by clicking again on the selected filter.\n\n![](images/dict-filter.png)\n\nNote that the entries list displays only the entry name, token type, and syntax for the entry. You can view the complete entry by clicking on the desired line in the list. This will show the entry in the area underneath the entries list. Each LiveCode scripting term is thoroughly documented with the proper syntax, detailed examples, a detailed description, related terms, and more.\n\n\n![](images/dict-entry.png)\n\n#### LiveCode User Guides\n\nThe User Guides are a complete reference to LiveCode. They detail what the dialogs and windows within the development environment do, and explain the LiveCode language in depth. To open a guide, click on the Guide tab in the Dictionary and choose the desired guide from the list.\n\n![](images/guides.png)\n\n### RevOnline\n\nRevOnline gives you the opportunity to upload and share your projects as\nwell as download those created by other members of the LiveCode online\ncommunity. It can be accessed via the Sample Stacks button located in the\nmenu bar. The main interface can be seen below:\n\n![](images/revonline-main.png)\n\nThe interface is designed to organise the online content into various\ncategories to aid you in finding the kind of content you wish to\ndownload. You will find three main types of content in RevOnline, stacks\n(LiveCode programs), externals and code snippets. Externals are\nlibraries that can extend the functionality of the LiveCode language\nusing a lower level language. A code snippet is a portion of LiveCode\nscript that you can paste into and incorporate into your own projects.\n\nThe results of searching or browsing through the RevOnline content are\ndisplayed in the *search list* area. This is an explanation of the\ncontrols you can use to adjust the parameters of your search:\n\n| &nbsp;| &nbsp;|\n|---------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **Search field**    | Enter text and press return or click “Go” to search. Matches will be made against the titles of uploaded content, the author’s name and content descriptions.                                                                                                                                                                 |\n| **Type list**       | Highlight one of the items in this list filter search to only show results of that type. Selecting “All” will display content of all three types.                                                                                                                                                                             |\n| **Tag list**        | Tag your own and others people’s content with a word or phrase. All tags are listed here alphabetically. Selecting a tag will filter the search results for uploads that have been tagged accordingly. Selecting “All” will remove the filtering.                                                                             |\n| **Search order**    | Change the order in which the search results are displayed. There are four options. “A to Z” lists content alphabetically by title, “Popularity” by the number of times it has been downloaded, “Rating” by the average user rating (out of five stars) and “Date” by the date on which the content was uploaded to RevOnline |\n| **Order direction** | The direction (ascending/descending) of the search order can be changed by clicking on the arrow to the right of the sort control.                                                                                                                                                                                            |\n| **View mode**       | The search list area can be viewed in two modes, a vertical scrolling list or a grid. In “list” mode 10 results will be displayed per page, in “grid” mode the number of results displayed will be dependent upon the size of the RevOnline stack. Whilst in “grid” mode the *viewing pane* area will not be visible.         |\n| **User filter**     | If you apply user filter to a search, the user’s name will appear above the type and tag lists (see below), subsequently only content by that user will be returned in the search results. Clicking on the button or text of the user filter will remove it.                                                                  |\n\n![](images/revonline-user-filter.png)\n\nThe *search list* area displays a preview of the results your search has\nreturned. At the top of this list you will see the *page controls* which\nallow you to navigate forwards and backwards through the pages of your\nsearch should it return more results than can be displayed on one page.\n\n![](images/revonline-page-list.png)\n\nAn example of the search list previews can be seen below:\n\n![](images/revonline-list-preview.png)\n\nAt the top of the preview is the content’s name. You can also see its\naverage user rating out of five stars, the total number of times it has\nbeen downloaded, the authors name and a list of tags applied to this\nupload. The “download” button at the bottom will download and launch\nthis particular stack, it also tells you the size of the download. The\n*preview image* can either be a custom screenshot as above or one of\nthree standard images. These are black for stacks, red for code snippets\nand green for externals. The *type icon* in the lower left corner of the\npreview image also indicates the type, these are shown below for a\nstack, code snippet and external respectively:\n\n![](images/image17.png) ![](images/image18.png) ![](images/image19.png)\n\nClicking on the *preview image* or content title will update the right\nhand *viewing pane* with more detailed information about this upload.\nClicking on the authors name will display the author’s user profile in\nthe *viewing pane* and introduce a *user filter* to the search results.\nWhen the *search list* is in “grid” mode the *viewing pane* will be\nhidden, doing either of the above operations will cause the *search\nlist* to switch back to “list” mode and display the associated content\nin the *viewing pane*.\n\nThe *viewing pane* displays detailed information on users and uploads.\n\n![](images/revonline-view-pane.png)\n\nIf you are a viewing stack details as shown above, in addition to the\ninformation provided by the preview you will also see a headline,\ndescription and a revision number which is incremented whenever the\nauthor uploads a new version of their stack, code snippet or external.\nClicking on the author’s name or *user profile image* will display their\nprofile view. Clicking on the *content type* or any of the tags in the\n*list of applied tags* will apply these filters to the search controls.\nWhen viewing an external your will see an additional “Platform:” field\nthat indicates which platforms the external library is compatible with,\nmake sure your operating system is supported before downloading and\ninstalling an external. If you are currently logged in to your Rev\nOnline account you will be able to give the upload a rating by hovering\nover the *rating control* and clicking when the rating you wish to\nsubmit is displayed, this can only be done once per upload. You can also\ntag the upload by clicking on the *add tag control* which brings up\nfollowing dialog:\n\n![](images/image21.png)\n\nAs you type into the text entry field, tag suggestions will appear in a\ndrop down menu that can be selected using the arrow keys. Once you have\nfinished typing press the ok button to submit your tag, you must be\nlogged in to complete this operation.\n\nThe *status bar* at the bottom of the RevOnline interface displays the\nnumber of results your search has returned as well as a progress bar\nindicating the progression of searches and downloads. You will also see\ntext feedback in response to the operations you perform such as\n“Retrieving stack details ...” and “Content tagged” etc.\n\nIn the top right corner of RevOnline you will find the *login controls*\nwhich will display your current login status as shown below:\n\n![](images/revonline-login-status-not-logged-in.png)\n![](images/revonline-login-status-logged-in.png)\n\nIn order to upload, rate and tag content in RevOnline you must have an\naccount, this account is also required for making comments in the wiki\ndocs detailed elsewhere. To register for an account just click on the\n“Sign Up” control and enter your email in the dialog that appears. Your\nemail address will be used as your username for logging in, a password\nwill be emailed to you upon signing up. After receiving this email you\nmust hit the activation link in the email before your account can be\naccessed. Once activated, you can login to your account using the “Log\nIn” control pictured above which will bring up the following dialog:\n\n![](images/revonline-login-dialog.png)\n\nThe “Remember me” check box will cause RevOnline to maintain your\nusername in the “Email :” field between login attempts. The “Sign in\nautomatically” check box will mean that you are automatically signed in\nupon opening RevOnline, however if you explicitly sign out you will have\nto re-enter your password regardless of this preference. If you forget\nyour password at any time you can use the “Forgot your password?” link\nin the login dialog to have a new one emailed to you.\n\nUpon logging in and viewing your profile for the first time you will be\npresented with your profile view in edit mode where you have the\nopportunity to enter information about into the highlighted fields and\nchange your profile picture using the *change profile picture* control\nas shown below:\n\n![](images/revonline-account-details.png)\n\nClicking on the *change profile picture* control will bring up the\nfollowing dialog:\n\n![](images/image25.png)\n\nUse the *Position Controls* to move the centre of the image up, down,\nleft or right. You can zoom in or out using the *Zoom controls*.\nPressing the *Re-centre image* button will reset the image to its\noriginal position and zoom level. Once you are happy with orientation of\nyour picture click ok, or cancel to discard your changes. This dialog is\nalso used to change stack preview pictures.\n\nWhen you have finished editing your profile you can hit the “save\nchanges” button to submit your information, a minimum of a first and\nlast name must be entered before you can save. You can also choose to\ndisplay your email or not and change your password to one of your\nchoosing using the “Change password” control. You can reach this profile\nat any time by clicking on the “My Account” control in the *login\ncontrols* which will both display your profile and display all your\nuploads in the *search list*. To exit this view simply remove the user\nfilter or hit the “My Account” control again.\n\nTo upload content to RevOnline simply click on the “upload content” in\nthe *login controls,* you will then be presented with the content\nbrowser view.\n\n![](images/revonline-content-browser-code.png)\n\nClicking on the tabs at the top of this view will change the content\ntype. Above you can see the code snippet view, it simply requires you to\npaste a section of code into the *code entry field* and press ok, if you\nhave your code snippet stored in your clipboard you can simply press the\n“paste” button. For stacks you can either select a stack from the list\nof recently opened stacks or browse to the files location using the\n“browse” button. For externals you need to check which platforms your\nexternal will support and then browse to the appropriate file you wish\nto upload (shown below). The default file types for extensions on each\nplatform are; “.dll” for Windows , “.bundle” for Mac OS X and “.so” for\nLinux.\n\n![](images/revonline-content-browser-external.png)\n\nWhen uploading a code snippet or external RevOnline will place the code\nor file into an installer stack. The installer stacks give you the\noption to “install” or “try” an external file or “copy to clipboard” a\ncode snippet. When using the try option with an external the file will\nbe removed from your installation when you next exit LiveCode.\n\nOnce you have pressed ok you will be presented with the edit mode view\nfor the file you are uploading. Here you can enter a name description\nand change the preview picture for your upload (note – you cannot edit\nthe title of an external upload it must be the name of one of the files\nyou have included). If you attempt to upload a file that has already\nbeen uploaded to RevOnline, you will be taken to the existing version of\nthat file to edit, this avoids duplicate uploads.\n\nWhenever you are viewing content that you have uploaded or your own\nprofile whilst logged in the edit controls will appear above the\n*viewing pane*, shown below:\n\n![](images/revonline-edit-stack.png)\n\nBy clicking on the “edit profile” or “edit stack” (for stacks etc.)\nbutton you are entering edit mode which allows you to make changes to\nthe information shown. When editing your profile you can simply save or\ndiscard the changes you have made. When editing an upload you have the\nadditional options of deleting and updating the uploaded file. The\ndelete control will permanently remove your upload from RevOnline. The\nupdate control allows you to replace the stack file, code snippet or\nexternal library with a newer version. Clicking on this control will\npresent you with the content browser view discussed earlier. After you\nhave chosen a replacement file you need to save your changes in order\nfor the new file to be submitted.\n\n![](images/revonline-edit-content-controls.png)\n\nThe list of tags applied to your own uploads can be altered by using the\n“Add/Delete tags” control \n\n![](images/revonline-add-delete-tags.png)\n\nwhich will bring up the following dialog:\n\n![](images/image30.png)\n\nThis works in a similar way to the previously explained tag dialog\nexcept that you can view the entire list of tags and edit which ones you\nwish to be displayed. When hitting return after entering the name for\nyour tag a new *tag item* will appear in the list (also achieved by\npressing the *add tag* button). Tags can be removed by clicking on the\nappropriate *remove tag button*. If your tag list is too large for one\npage you can browse through the pages of tags using the *page controls*\nat the bottom of the dialog. Once you have finished editing the list you\ncan submit your changes by clicking the ok button.\n\nAdditional options for the RevOnline interface can be set in the\nRevOnline tab of the preferences stack. As pictured below:\n\n![](images/revonline-preferences.png)\n\nHere you can set the remember password and user name preferences and\nchange your password to one of your choosing. The search results in\nRevOnline are cached to speed up performance. You can tweak the size and\ntime for which this cache remains valid using the two slider controls. A\nlarger cache will give you faster performance but will take longer to\npickup changes made to the online content made by other users. If the\ntext only searches option is checked RevOnline will only retrieve the\ntext data for the search list previews which can also improve\nperformance.\n\n## Additional Resources\n\nIf you have a question that isn't answered in this documentation, you\ncan find additional information to help you on our web site. You can\nalso connect with the LiveCode developer community, which includes many\nexperienced developers who offer their expertise for the common good to\nanswer questions and help their fellow developers. You'll find example\ncode, information on planned enhancements, and the latest updates.\nVisit:\n\nhttp://www.livecode.com\n\n### Developer Community\n\nThere are a number of ways to engage with the LiveCode community:\n\n* The [forums](http://forums.livecode.com/) (section 1.6.3 above), are\navailable for getting help from other developers, for discussing feature\nrequests and future directions, and for receiving announcements from\nLiveCode.\n\n* Ask a question on\n[stackoverflow](http://stackoverflow.com/questions/tagged/livecode).\n\n* Talk about LiveCode on [the LiveCode\nsubreddit](https://www.reddit.com/r/livecode).\n\n* Join the [LiveCode user\ngroup](https://www.facebook.com/groups/livecodeusers) on Facebook.\n\n* Use the [LiveCode mailing\nlist](http://lists.runrev.com/mailman/listinfo/use-livecode) is also\navailable.\n\n> **Tip:** Tip: You can use the Google search engine to search the list\n> archives, using [this\nlink](http://www.google.com/advanced_search?q=site:lists.runrev.com)\n\n### Technical Support\n\nLiveCode offers *up and running* technical support to all users to\nassist you in getting the development environment working on your\nsystem.\n\nMany editions include additional technical support for more *advanced*\nproblems and questions. Where support is not included, a separate\ntechnical support contract for advanced support can be purchased.\n\nContact us [here](https://livecode.com/about/contact/) or at\n<support@livecode.com>.\n\n## Getting Started\n\nCreating a simple *graphical application* in LiveCode can take just\nminutes. First you create a user interface, including any windows,\npalettes, dialogs you require. Then you populate the user interface with\ncontrols, like push buttons, check boxes, text fields or menus. Finally,\nyou use LiveCode’s English-like programming language to tell your\napplication how to behave.\n\n### Prerequisites\n\nBefore you get started, you should be familiar with how to use your\ncomputer. You should also be familiar with common applications such as a\nweb browser, word processor and email client. If you are using Linux or\nUnix, you should be familiar with basic use of the command line. If you\nare not familiar with using a computer, we recommend you spend some time\ngetting acquainted before trying to learn LiveCode.\n\n### Event Driven Programming\n\nA LiveCode application is driven by user actions. LiveCode constantly\nwatches the computer for common actions, such as clicking on a button,\ntyping into a field, sending data across a network, or quitting an\napplication.\n\nWhenever an event occurs, LiveCode sends a message. When writing your\nprogram, you decide what messages you want your program to respond to.\nLiveCode automatically sends each message to the most relevant object.\nFor example, if a user clicks on a button, LiveCode sends a message to\nthe button. You place code within the button that tells it how to\nrespond to being clicked on.\n\nThere are a wide range of possible events. When a user clicks on a\nbutton, a series of events are sent to the button. For example, when the\nmouse first moves within the border of the button a **mouseEnter**\nmessage is sent. Then a series of mouseMove messages are sent as the \nmouse moves over the button. When the mouse button is depressed a \n**mouseDown** message is sent. When the mouse is released a **mouseUp**\nmessage is sent. You don’t have to respond to all of these events. You \nsimply place code within an object to handle the events you want your \napplication to respond to.\n\nEvents that are not handled by individual objects can be handled in a\nnumber of ways at different levels of your application, in libraries, or\nthey can be ignored. The rules that govern what happen to events that\nare not processed by an object are described in the section *The Message\nHierarchy*.\n\nWe’ll return to Event Driven Programming in more detail in the section\n*Coding in LiveCode*.\n\n### Object-Based Programming\n\nAny *graphical application* you build using LiveCode will be based on\nobjects. With LiveCode you typically create the objects of your\napplication before writing any code. You can start by drawing the\nbuttons, text fields, and other controls that make up your application.\nLiveCode operates like other layout, drawing or application development\nenvironment. You can select controls by clicking them, move them by\ndragging them around, resize them, and change their ‘layer’ to move them\ncloser or further from the ‘top’ of the interface.\n\nOnce you have the objects in place, you can proceed to attach code to\neach object to respond to the events you want. LiveCode includes a\ncomplete graphical development environment that makes it easy to create\nand edit any kind of user interface. It includes objects for all the\nbasic operating system elements, including buttons, checkboxes, text\nfields, menus, graphics, and many more. In addition you can create and\ncustomize your own objects that look and behave however you want.\n\nIf you are writing a non-graphical application, you can choose to create\nobjects to assist in organizing your code into sections and load these\nobjects off screen, or you can simply write your code in a text file and\nrun the text file directly. This method is commonly used to communicate\nwith Apache and other web browsers when using LiveCode to build\nserver-side or network applications.\n\nObject-Based programming is covered in more detail in the section\n*Building a User Interface*. Non-graphical applications are covered in\nmore detail in the section *Building a Web Application*.\n\n### The ‘Edit’ and ‘Run’ Mode\n\n> **Important:** In order to enter **run** mode, choose the browse tool\n> in the *top left* of the tools palette.\n\nIn order to **edit**, choose the pointer tool from the *top right* of\nthe tools palette.\n\nUnlike most other development systems, a LiveCode application can be\ncreated, edited, debugged and run live.\n\nWhen in run mode, objects receive all the normal messages that drive a\nLiveCode application. For example, clicking on a button in run mode will\ncause a **mouseUp** message to be sent to it, causing the button's \nscript to run if you've designed it to respond to the **mouseUp** \nmessage.\n\nWhen in edit mode, objects do not receive messages when you click on\nthem, and you can move, resize or edit the properties for objects.\n\n> **Tip:** To temporarily stop all messages being sent to your\n> application while editing it, choose *Suppress Messages* from the\n> *Development* menu or *Toolbar*.\n\nThere few other differences between the two tool modes. You can view and\nedit properties and code in either mode. Your application does not stop\nrunning while you make changes to it. Only mouse interaction with\nobjects is suspended in edit mode to allow you to edit them more easily.\n\nBecause LiveCode is constantly live, you can easily make simple changes\nand watch each change take effect as you make it. This allows you to\ndesign and experiment using an iterative process, resulting in a more\nproductive and satisfying development experience.\n\n## Structuring your Application\n\n### Cards, Stacks & Files\n\nThe first step in creating a LiveCode application is creating a window,\nwhich in LiveCode is called a stack. Each window you see in LiveCode is\na stack. Palettes, dialog boxes, and standard windows are all stacks.\n\nEach stack contains one or more sets of information called cards. Each\ncard can have a different appearance or all the cards in a stack can\nlook the same. By going from card to card in a stack, you change what's\nbeing displayed in that stack's window. You can think of a LiveCode\nstack as a stack of playing cards (hence the name), where you can flip\nthrough the cards, but only one card at a time is visible. A stack can\nhave a single card or many cards. See Figure 3 – Stack file Structure,\nbelow.\n\nAll user interface objects (controls) are created by dragging them on to\na card area.\n\nYou can also group controls together if you want them to operate as a\nset. For example, if you have a set of navigation buttons that go from\ncard to card in your stack, you can make them into a single group.\nGroups can appear on more than one card, so your navigation buttons or\nbackground image can appear on each card of your stack. For more\ndetails, see the section on *Group and Backgrounds*.\n\nA collection of stacks can be saved together in a single file. This file\nis known as a stack file. The first stack in the file is called the main\nstack and will be loaded automatically when your application is run.\n\n### The Structure of a Stack File\n\nEach LiveCode file contains one or more stacks: either a single main\nstack, or a main stack and one or more substacks. Since each stack is a\nwindow (including editable windows, modeless and modal dialog boxes, and\npalettes), a single stack file can contain multiple windows.\n\nYou can use this capability to bundle several related stacks into a\nsingle file for easy distribution, to organize your stacks into\ncategories, or to allow several stacks to inherit properties from the\nsame main stack.\n\n![](images/image32.png)\n\nFigure 3 – Stack File Structure\n\n### Opening a Stack File\n\nWhen you open a stack file, either by using the \"Open Stack\" menu item\nin the File menu or by using one of the navigation commands (see **open,\ngo**, **modal**, **modeless**, **palette**, or **topLevel** in the\n*LiveCode Dictionary*), the stack file's main stack opens automatically\nto its first card.\n\n> **Important:** A stack file is saved as a whole. If you save a stack,\n> all the other stacks in the same stack file are saved at the same time.\n\nSubstacks in the stack file do not open automatically when the stack\nfile opens. You must open a substack in a handler or the Message Box, or\nby using the Application Browser.\n\n### Main Stacks and Substacks\n\nThe first stack created in a stack file is called the *mainstack*. Any\nother stacks created in the same stack file are called *substacks* of\nthe mainstack.\n\nThe mainstack is part of the object hierarchy of all other stacks in the\nsame stack file. In other words (for the purposes of inherited\nproperties and shared behaviors), the mainstack *contains* its\nsubstacks. Events that are not handled by a substack are passed on to\nthe mainstack's script, color and font properties are inherited from the\nmainstack by its substacks. For more details on the object hierarchy and\ninheritance in LiveCode in general, see the section on *The Message\nPath*.\n\nDialog boxes and palettes are commonly stored as substacks of the main\napplication window, which is typically a mainstack. This allows you to\nstore code and common functions used by all the substacks in the\nmainstack's script. Because mainstacks are part of the object hierarchy\nof their substacks, the substacks can call this functionality from\nscripts within the substack.\n\n### Stacks, Stack Files, and Memory\n\nA stack file can be loaded into memory without actually being open. A\nstack whose window is closed (not just hidden) is not listed in the\n**openStacks** function. However, it takes up memory, and its objects\nare accessible to other stacks. (For example, if a closed stack loaded\ninto memory contains a certain image, you can use the image as a button\nicon in another stack.)\n\nIf one stack in a stack file is loaded into memory, so are any other\nstacks in the same stack file. You cannot load one stack in a stack file\nwithout loading all the rest at the same time even if you open only one\nof the stacks.\n\nA stack can be loaded into memory without being open under the following\nconditions:\n\nA piece of code in another stack read or set a property within the\nclosed stack. This automatically loads the referenced stack into memory.\n\nThe stack is in the same stack file as another stack that is open.\n\nThe stack was opened and then closed, and its **destroyStack** property\nis set to false. If the **destroyStack** property is false, the stack is\nclosed but not unloaded when its window is closed.\n\n> **Tip:** To manipulate a stack window in an external, use the\n> **windowID** property. For more information, see the \n*LiveCode Dictionary*.\n\n### Media & Resources\n\nWhen planning a project, it is important to consider what types of media\nyou will need to access and how to structure access to that media.\n\nLiveCode supports a wide range of media formats. Media can be accessed\nusing the built-in media support, through QuickTime on older Mac OS X \nsystems or via an external library. The advantage of using the built-in \nsupport is that you can consistently display or play back the media on \nall platforms without having to check that any 3<sup>rd</sup> party \ncomponent has been installed. Other 3<sup>rd</sup> party libraries may \nallow a greater range of media access.\n\nSince each loaded stack file takes up as much memory as the size of all\nits stacks, it is often advisable to place large, seldom-used objects\n(such as color pictures, sound, and video) in external files, which can\nbe bundled with your application and loaded into memory only when you\nneed them.\n\nThe built-in media support allows you to embed media directly within\nyour stack file, or to reference it externally, storing it in a data\nfolder, online or on a CD.\n\n| **Embedding Media within your project**  | **Referencing Media externally** |\n|---------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------|\n| Allows distribution of a single-file application for easy, reliable distribution                                          | Requires you to distribute the media files separately                                               |\n| Requires importing media whenever it is updated                                                                           | Allows you to edit media files directly, they update automatically                                  |\n| Requires enough memory to load all the media                                                                              | Makes it easy to load and unload media if you need to reduce memory requirements                    |\n| Allows you to use the built-in editing capabilities directly                                                              | Requires you to import and export the media to use the built-in editing capabilities                |\n| Is less practical for creating large themed or localized applications where one set of media is replaced with another set | Makes it easy to create themed or localized applications by simply linking to a different directory |\n\n> **Tip:** When importing images, use the Image Library, or create a\n> ‘library’ card that contains all the originals, then reference those\n> objects throughout your project. For more details on referencing\n> images, see the section on the *button* object.\n\nFor details of the image formats supported natively, see the section on\nthe *Image* object. For details of the audio formats supported natively,\nsee the section on the *audioClip* object. For details on how to control\na movie, see the section on the *Player* object.\n\n### How to Use External Files\n\nThere are three main ways to use external files:\n\nKeep media such as images, sounds, and video in external files, in the\nappropriate format, and use referenced controls to display the contents\nof the files. When you use a referenced control, the image, sound, or\nvideo file is loaded into memory only when a card that contains the\nreferenced control is being displayed. The memory needed for the image,\nsound, or video is therefore only used when actually needed. By using\n*relative file paths*, you can move the application and its data files\nto any other system. For more details on using file paths, see the\nsection on *File Name Specifications and File Paths*.\n\n> **Note:** To create a referenced control, use the \"New Referenced\n> Control\" submenu in the File menu, or create an empty image or player\n> object, then set the object's **fileName** property to a file path for\n> the file you want to reference. For more details, see the section on\n> *Building a User Interface*.\n\nKeep portions of your application in a separate stack file, and refer to\nthe stacks in that stack file as necessary. The **stackFiles** property\nsimplifies referring to external stack files. When you set a stack's\n**stackFiles** property to include one or more file paths, the stacks at\nthose locations become available to your stack by simply referring to\nthe stacks by name.\n\nKeep portions of your application on a server, and download them using\nthe built in URL commands. For more details on the URL commands, see the\nsection on *Working with Files, URLs & Sockets*.\n\n### When to use a Database\n\nYou don't need to use an external database to store information for your\napplication. You can store information in stacks, in text files, and in\na variety of other files, read it into your application as needed, and\nmodify it. However, as a rule of thumb, we recommend that when you have\nover two thousand records of information, or you want to allow multiple\nusers to access information at the same time, you consider using a\ndatabase.\n\nIn these circumstances an external database offers many advantages. A\ndatabase located on your local machine will be fast and efficient at\naccessing and searching records. A database located on a server can be\naccessed by more than one user. Depending on the particular\nimplementation, a database may be suitable for constant access by\nhundreds of users, each receiving and updating data continually. SQL\ndatabases have built-in record-locking capabilities, preventing one\nuser's changes from wiping out another's— a necessity for reliable\nmulti-user databases. Other built-in features work behind the scenes to\nensure the data in the database is not corrupted by interference between\ndifferent users.\n\nSQL databases are also built for speed. When searching tens or hundreds\nof megabytes or more, the performance of an optimized database will\ngenerally be much better than that of a stack doing the same search.\nMoreover, stacks must be loaded into memory to be searched, and\ntherefore the whole collection of data must fit into local memory.\n\nFinally, if you use an external database, you can put the heavy-duty\nprocessing on a server designed for the purpose, while using LiveCode's\nflexibility to give the user options for selecting data, then presenting\nit in a usable form.\n\nWith LiveCode’s built in *Database Library*, your application can\ncommunicate with external SQL databases. You can get data from\nsingle-user and multi-user databases, update data in them, get\ninformation about the database structure, and display data from the\ndatabase in your stack. \n\nFor more details on working with databases, see the \n*Working with Databases* guide.\n\n### LiveCode Memory Limits\n\nThe following table details the memory limits for different types of\nLiveCode components. Please note that these limits refer to the maximums\nthat may be in use at any one time. You can store additional information\non disk or in a database and load it when it is required.\n\n#### A note about entries designated as \"Unlimited\":\n\nSince each open stack file resides completely in memory, LiveCode stacks\n(and all structures within a stack) are effectively limited by available\nmemory and by LiveCode's total address space of 4G (4,294,967,296 bytes)\non 32-bit systems\n\n| &nbsp;| &nbsp;|\n|---------------------------------------------|---------------------------------------------|\n| Total addressable space                     | 4 GB (on 32-bit systems)                    |\n| Maximum length of a line in a field         | 65,536 characters storage <br> No more than 32,786 pixels wide for display  |\n| Maximum size of an object                   | Unlimited                                   |\n| Maximum number of objects in a group        | Unlimited                                   |\n| Maximum number of objects on a card         | Unlimited                                   |\n| Maximum number of cards in a stack          | Unlimited                                   |\n| Maximum number of objects in a stack        | Unlimited                                   |\n| Maximum length of object names              | 65,536 characters                           |\n| Maximum length of custom property names     | 255 characters                              |\n| Maximum length of command or function names | 65,536 characters                           |\n| Maximum size of custom properties           | Unlimited                                   |\n| Maximum number of custom properties         | Unlimited                                   |\n| Maximum size of a script                    | Unlimited                                   |\n| Maximum size of other properties            | 64K                                         |\n| Maximum nesting level in control structures | Unlimited                                   |\n| Maximum level of recursion                  | Unlimited                                   |\n\n## Building a User Interface\n\nThe user interface for your application is often one of its most\nimportant features. Building a clear, logical and aesthetically pleasing\nuser interface will make all the difference to the success of your\napplication. This chapter discusses how to build a user interface using\nLiveCode. It tells you how to create and lay out controls, which objects\nto use and even how to build your own custom objects. We then touch\nbriefly on some tips for good user interface design.\n\n### Creating and Organizing Objects\n\n#### Creating Controls with the Tools Palette\n\nThe main tools palette allows you to change between Edit and Run mode, \ncreate objects, and edit bitmap images with the paint tools.\n\n![](images/script-build-ui-tools-palette.png)\n\nFigure 13 - The Main Tools Palette\n\n| &nbsp;| &nbsp;|\n|-----------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **Run mode**          | Click to enter run mode. When in run mode, objects receive all the normal messages that drive a LiveCode application. For example, clicking on a button in run mode will cause a **mouseUp** message to be sent to it and the script will run.                                                                                                                                                                                                                             |\n| **Edit mode**         | Click to enter edit mode. When in edit mode, objects do not receive messages when you click on them, and you can move, resize or edit the properties for objects. For more details about the run and Edit mode, see the section *The ‘Edit’ and ‘Run’ Mode*.                                                                                                                                                                                                               |                                                                                       \n| **Widget objects**<br>**Button objects**<br>**Field objects**<br>**Scrollbar objects**<br>**Image & Player**<br>    | Drag any object within these areas onto an editable stack to create a new object. Double-click an object to create a object of that type in the center of the front most editable stack. For more details on all of these objects, see the section about each object type later in this chapter.\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t     |\n| **Vector Graphics**   | Press the grey triangle at the bottom right of the Image & Player area to hide and show this section. Click to choose the type of new graphic you want to create. Use the fill bucket to choose the fill color, the fill pencil to choose the line color, the line thickness menu to choose the line thickness, and the optional shape menu to choose preferences specific to the type of graphic selected. Click and drag in an editable stack to create the new graphic. |\n| **Bitmap graphics** | The paint tools allow you to edit bitmap graphics that have been imported into LiveCode or create your own. To use them, create an image object and paint within that area, or modify an existing image. You cannot use the paint tools to edit an image that has its filename property set, as that image data is stored outside LiveCode. For more details on working with images, see the section on *Images* later in this chapter and the chapter on *Working with Media*. |\n\n> **Tip:** You can also create objects using the **New Control**\n> sub-menu in the Object menu, or by typing **create [object type]** in\n> the Message box. For more information on creating objects using the\n> Message Box, see the section on *Building Interfaces Using Scripts*,\n> later in this chapter.\n\nTo open a system-standard color chooser, double-click on color chooser\npopup menus at the bottom of the Vector Graphics or Bitmap Graphics\nsections of the tools palette.\n\n#### Alignment & Layering\n\n![](images/script-build-ui-size-position.png)\n\nFigure 14 – Size & Position Inspector\n\n| &nbsp;| &nbsp;|\n|-------------------------------||\n| **Lock size and position**    | Locks the object so that its size and position cannot be adjusted interactively with the mouse when in edit mode. This also prevents images, groups and players from automatically resizing to display their entire content whenever the card that they are on is reopened. For more details see the entry for *lockLocation* in the LiveCode Dictionary.                                                                                                                                                                                                                                                                |\n| **Width & Height**            | Allows you to set the width and height of the object(s) currently being operated on by the Property Inspector. Objects are resized from their center. For more details, see the *width* and *height* properties in the LiveCode Dictionary.                                                                                                                                                                                                                                                                                                                                                                              |\n| **Fit Content**               | Automatically sizes the object large enough to display its content. In the case of buttons, the content is the text and any icon. For images, this is the native width and height of the original image before any scaling. For more details, see the entry for *formattedWidth* and *formattedHeight* in the LiveCode Dictionary.                                                                                                                                                                                                                                                                                       |\n| **Location**                  | Sets the objects position (the center of the object) relative to the top left of the card|\n| **Left, Top, Right & Bottom** | Sets the position of one of the object’s edges|\n| **Layer**                     | Sets the layer of the object. The buttons with arrows allow you to send an object to the back, move an object back one layer, bring an object forward one layer and bring an object to the front. Layer determines which objects are displayed in front or behind others, as well as the object’s number and tabbing order. Note that you cannot relayer objects that are grouped unless you are in edit background mode, or have the *relayerGroupedControls* set to true. For more details, see the section on *Group & Backgrounds*. For more details on tabbing order see the section on *The Keyboard Focus* below. |\n\nUse the Align Objects Inspector to resize objects relative to other\nobjects, to reposition objects and/or to relayer objects.\n\n![](images/script-build-ui-align-objects.png)\n\nFigure 15 – Align Objects Inspector\n\nTo open the Align Objects Inspector, select multiple objects, then open\nthe Inspector and choose Align Objects from the menu at the top of the\nInspector. The Align Objects pane will automatically be displayed if you\nselect multiple objects of different types.\n\n> **Important:** The Align Objects Inspector resizes objects relative to\n> each other. Always select the object you want to use as a reference\n> first, then select other objects that you want to make the same as\n> that object next. If you want to distribute objects, select them in\n> the order that you would like them to be distributed.\n\n| &nbsp;| &nbsp;|\n|----------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **Equalize**   | Make objects the same width, height, or have exactly the same rectangle.                                                                                                                                                                                                                                                                                                                  |\n| **Align**      | Aligns the objects by their left, right, top or bottom edges, or by their horizontal center or vertical center, using the first object selected as a reference.                                                                                                                                                                                                                           |\n| **Distribute** | Distributes the objects with an equal difference between them, using the order they were selected. ‘First to last’ selected will distribute objects evenly between the edges of the first and last objects selected. ‘Edge to edge’ will distribute the objects so that their edges touch each other exactly. ‘Across card’ will distribute the objects evenly over the entire card area. |\n| **Nudge**      | Nudge the selected object the number of pixels specified in the center of the arrows. To change the number of pixels, click on the number.                                                                                                                                                                                                                                                |\n| **Relayer**    | ‘First to last selected’ will relayer the objects in the selection in the order they were selected. 'Last to first\" will relayer the objects in reverse order. Use these buttons to set the tab order of a set of objects. For more information on the tabbing order, see the section on *The Keyboard Focus* below.                                                                      |\n\n#### The Keyboard Focus\n\nThe focus is an indication to the user of which control will receive a\nkeystroke. Exactly which objects are capable of receiving the keyboard\nfocus depend on the current operating system, and the properties applied\nto the control. Edit fields can receive the focus, as can all other\nobjects on Windows and Linux, and many objects on Mac OS.\n\nThe order in which the user moves through controls that can receive the\nkeyboard focus is determined by the object’s layer. When a card is\nopened, LiveCode automatically focuses the first object on the card that\nis capable of receiving the keyboard focus.\n\nYou can turn on the ability of an object to get the keyboard focus by\nchecking the *Focus with Keyboard* option in the object’s Inspector, or\nby setting its *traversalOn* property by script.\n\nOn some platforms objects give an indication that they have the focus by\ndisplaying a border. You can specify whether a border should be\ndisplayed by setting an object’s Show Focus Border option in the\nInspector, or setting its *showFocusBorder* property by script.\n\n### Object & Control Types\n\n#### Stacks – for displaying windows, palettes and dialog boxes\n\nIn LiveCode, each window is a stack. This includes editable windows,\nmodeless and modal dialog boxes, and palettes, as well as sub-windows\navailable on some operating systems, such as sheets and drawers.\n\n> **Tip:** If you want to make controls within a stack scale and\n> position automatically when you resize the stack, see the section on\n> the *Geometry Manager*.\n\nThis topic discusses the way windows are implemented in LiveCode\napplications; how to change window appearance; and how to control the\nbehavior of the various window types. This topic does not cover the\norganization of stacks within a stack file, which is covered in detail\nin the section *Structuring Your Application*.\n\n> **Caution:** Do not start your stack name with \"rev\". Stacks with\n> names starting with \"rev\" are reserved by the LiveCode development\n> environment.\n\nYou create a new stack – which can then be displayed in any number of\nmodes (as described below) – by choosing **File -\\> New Mainstack**. You\ncan edit stack properties by choosing **Object -\\> Stack Inspector**.\n\n#### Window Types and the Mode of a Stack\n\nThe nature of a stack's window depends on the stack's **style** property\nand on what command was used to open the stack. You can either specify\nthe window type when opening the stack, or allow the stack's **style**\nproperty to determine the type of window it is displayed in.\n\n> **Note:** We recommend you specify the mode you want a stack to be\n> opened in as part of the command you use to open the stack, rather\n> than using the style property. This makes it easy to switch a stack\n> between editable mode in the development environment, and for example,\n> a dialog in the runtime environment.\n\n#### The Standard Window Types\n\nLiveCode windows are usually one of four types: editable or **topLevel**\nwindows, **modal** or **modeless** dialog boxes, or **palette** windows.\n\n> **Important:** You will normally create a new stack and edit it while\n> it is in editable mode. If you want to create a dialog, create the\n> stack like any other stack. Then when opening it, specify in the\n> script that it should be displayed as a dialog, or a palette, etc. The\n> appropriate commands for doing this are detailed with each type of\n> window below.\n\nYou can test out these commands as you work on your window layout and\nscripts, using the *Message Box* (see section of the same name), or\nusing the *window context menu* (see *Modal Dialog Boxes*, below). For\nmore details on wr`it`ing scripts in general, see the section on *Coding\nin LiveCode*.\n\nMost windows are editable or **topLevel** windows, and this is the\ndefault mode for LiveCode stacks. If you open a stack using the **go**\ncommand (without specifying a mode), or using the Open Stack menu item,\nthen the stack is displayed as an editable window unless its **style**\nproperty specifies another window type.\n\n#### Editable Windows – for documents\n\nAn editable window has the appearance and behavior of a standard\ndocument window. It can be interleaved with other windows, and you can\nuse any of LiveCode's tools to create, select, move, or delete objects\nin the stack.\n\n| &nbsp;| &nbsp;| &nbsp;|\n|----------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| ![](images/script-build-ui-editable-stack-mac.png) |  ![](images/script-build-ui-editable-stack-win.png) | ![](images/script-build-ui-editable-stack-linux.png) |\n| Mac | Windows | Linux |\n\nFigure 16 – Editable Document Windows on Multiple Platforms\n\nTo display a stack in an editable window, you use the **topLevel** or\n**go** commands:\n\n\ttopLevel stack \"My Stack\"\n\tgo stack \"My Stack\" – \"topLevel\" is the default mode\n\tgo stack \"My Stack\" as topLevel\n\nStacks whose **style** property is set to \"topLevel\" always open as\neditable windows, regardless of what command you use to open them.\n\n> **Note:** If the stack's **cantModify** property is set to true, the\n> window retains its standard appearance, but tools other than the\n> Browse tool can no longer be used in it. In other words, every tool\n> behaves like the Browse tool when clicking in an unmodifiable stack's\n> window.\n\n#### Modeless Dialog Boxes – for alerts and settings\n\nModeless dialog boxes are similar to editable windows. Like editable\nwindows, they can be interleaved with other windows in the application.\nTheir appearance may differ slightly from the appearance of editable\nwindows, depending on the platform.\n\n| &nbsp;| &nbsp;| &nbsp;|\n|----------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| ![](images/script-build-ui-modeless-stack-mac.png) |  ![](images/script-build-ui-modeless-stack-win.png) | ![](images/script-build-ui-modeless-stack-linux.png) |\n| Mac | Windows | Linux |\n\n\nFigure 17 – Modeless Dialog Boxes on Multiple Platforms\n\nLike unmodifiable stacks, modeless dialog boxes do not allow use of\ntools other than the Browse tool. Use modeless dialog boxes in your\napplication for windows such as a Preferences or Find dialog box, that\ndo not require the user to dismiss them before doing another task.\n\nTo display a stack in a modeless dialog box, you use the **modeless** or\n**go** commands:\n\n\tmodeless stack \"My Stack\"\n\tgo stack \"My Stack\" as modeless\n\nStacks whose **style** property is set to \"modeless\" always open as\nmodeless dialog boxes, regardless of what command you use to open them.\n\n#### Modal Dialog Boxes – for alerts and settings\n\nA modal dialog box is a window that blocks other actions while the\nwindow is displayed. You cannot bring another window in the application\nto the front until the dialog box is closed, nor can you edit the stack\nusing the tools in the Tools palette. While a modal dialog box is being\ndisplayed, the handler that displayed it pauses until the dialog box is\nclosed.\n\n| &nbsp;| &nbsp;| &nbsp;|\n|----------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| ![](images/script-build-ui-modal-stack-mac.png) |  ![](images/script-build-ui-modal-stack-win.png) | ![](images/script-build-ui-modal-stack-linux.png) |\n| Mac | Windows | Linux |\n\nFigure 18 – Modal Dialog Boxes on Multiple Platforms\n\nModal dialog boxes do not have a close box. Usually, they contain one or\nmore buttons that close the window when clicked.\n\n> **Important:** If you mistakenly open a modal dialog box without\n> having included a button to close the window, use the contextual-menu\n> shortcut (Control-Shift-Right-click for Unix or Windows,\n> Command-Control-Shift-click for Mac OS) to display a context menu.\n> Choose *toplevel* to make the stack editable.\n\nTo display a stack in a modal dialog box, you use the **modal** command \nor **go** commands:\n\n\tmodal stack \"My Stack\"\n\tgo stack \"My Stack\" as modal\n\nStacks whose **style** property is set to \"modal\" always open as modal \ndialog boxes, regardless of what command you use to open them.\n\n#### Palettes – for accessory and tool windows\n\nA palette has a slightly different appearance, with a narrower title bar\nthan an editable window. Like dialog box windows, a palette does not\nallow use of tools other than the Browse tool.\n\n| &nbsp;| &nbsp;| &nbsp;|\n|----------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| ![](images/script-build-ui-palette-stack-mac.png) |  ![](images/script-build-ui-palette-stack-win.png) | ![](images/script-build-ui-palette-stack-linux.png) |\n| Mac | Windows | Linux |\n\n\nFigure 19 – Palette Windows on Multiple Platforms\n\nA palette floats in front of any editable windows or modeless dialog\nboxes that are in the same application. Even when you bring another\nwindow to the front, it does not cover any palettes.\n\n> **Note:** On some Linux systems, palettes have the same appearance and\n> behavior as ordinary windows and do not float. On Mac OS X systems,\n> palette windows disappear when their application is in the background\n> and another application is in front.\n\nTo display a stack in a palette, you use the **palette** command or \n**go** commands:\n\n\tpalette stack \"My Stack\"\n\tgo stack \"My Stack\" as palette\n\nStacks whose **style** property is set to \"palette\" always open as \npalettes, regardless of what command you use to open them.\n\n#### Ask Question Dialog – for asking a question\n\nThe ask question dialog is a special type of window that is designed to\nmake it easy to ask the user a question. It includes special syntax for\nopening the dialog with question text and returning any answer to the\nscript that called it. You can also specify the window title, as well as\nan icon to be displayed in the window. The font, object positions,\nbutton order and icon will *automatically change* to reflect the\noperating system. However, if you do require more flexibility than is\nprovided in this dialog, you should create your own modal dialog box\ninstead (see above).\n\n| &nbsp;| &nbsp;| &nbsp;|\n|----------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| ![](images/script-build-ui-ask-dialog-mac.png) |  ![](images/script-build-ui-ask-dialog-win.png) | ![](images/script-build-ui-ask-dialog-linux.png) |\n| Mac | Windows | Linux |\n\n\nFigure 20 – Ask Question Dialog Boxes on Multiple Platforms\n\nTo display the ask dialog, use the following commands:\n\n\task \"What is your name?\"\n\task question \"What is the answer?\" titled \"Question\"\n\n> **Tip:** You can try this example out right now by coping and pasting \nit into **Tools -\\> Message Box**, then pressing return.\n\nThe word question specifies the icon, and may be any of question |\ninformation | error warning.\n\nTo change the miniature application icon shown in the Mac OS X platform\npicture above, see the entry for gREVAppIcon in the \n*LiveCode Dictionary*.\n\nThe result is returned in the *special variable* it.\n\n\tif it is \"Joe\" then doSomeThing\n\nFor complete details on the syntax, see the ask command in the \n*LiveCode Dictionary*.\n\n![](images/image62.png)\n\nFigure 21 – Icons for Ask and Answer Dialogs on Multiple Platforms\n\n#### Answer Alert Dialog – for displaying a dialog\n\nLike the ask dialog box above, the answer dialog is a special dialog\nthat has been designed to make it easy to display information in a\ndialog on screen and optionally allow the user to make a choice from a\nlist of up to seven choices. The answer command opens the dialog, lets\nyou specify the text and the button choices, and returns the button\nclick to the script that called it. You can also specify the window\ntitle, as well as an icon to be displayed in the window. As with the ask\ndialog, the font, object positions, button order and icon will\n*automatically change* to reflect the operating system. However, if you\ndo require more flexibility than is provided in this dialog, you should\ncreate your own modal dialog box instead (see above).\n\n| &nbsp;| &nbsp;| &nbsp;|\n|----------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| ![](images/script-build-ui-answer-dialog-mac.png) |  ![](images/script-build-ui-answer-dialog-win.png) | ![](images/script-build-ui-answer-dialog-linux.png) |\n| Mac | Windows | Linux |\n\n\nFigure 22 – Answer Dialogs on Multiple Platforms\n\n\tanswer \"Hello World!\"\n\n\tanswer question \"What city is the capital of Italy?\" with \\\n\t\t \"Paris\" or \"London\" or \"Rome\" titled \"Multiple Choice\"\n\n\nThe result is returned in the *special variable* it.\n\n\tif it is \"Rome\" then \n\t\tanswer information \"That was the correct answer.\"\n\tend if\n\nFor complete details on the syntax, see the answer command in the \n*LiveCode Dictionary.*\n\nThe answer dialog is implemented internally as a stack attached to the\nLiveCode IDE. For details on customizing the IDE, see the section on\n*Editing the LiveCode User Interface*.\n\n> **Tip:** If you're not sure what a stack's name is, you can use the\n> **mouseStack** function to find out. Enter the following in the\n> Message Box (Tools -\\> Message Box), then move the mouse pointer over\n> the stack window and press Return: `put the mouseStack`\n\n#### File Selector Dialogs\n\nThe file selector dialogs allow you to display the system standard\ndialogs. These dialogs allow the user to select a file or a set of\nfiles, select a directory, or specify a name and location to save a\nfile.\n\nThe syntax for bringing up the file selector dialogs mirrors the syntax\nfor the alert and question dialogs detailed above. However, unlike these\ndialogs, the file selector dialogs are displayed using the system\nstandard dialogs where available. The notable exception at the time of\nthis writing is Linux platform, where a built-in dialog is used instead\ndue to more limited OS support. (You can force the other platforms to\nuse this built-in stack based file selector by setting the\n*systemFileSelector* global property.)\n\n![](images/image64.png)\n\nFigure 23 – Answer File dialog for selecting a file\n\n\tanswer file \"Select a file:\"\n\n\tanswer file \"Select an image file:\" \\\n\t\t with type \"Movies|avi\" or type \"All Files|\"\n\nThe file path to the file selected by the user is returned in the\n*special variable* it. If the user cancelled the dialog, the special\nvariable **it** will be empty and \"cancel\" will be returned by \n*the result* function.\n\nFor complete details on the syntax, see the **answer file with type** \ncommand in the *LiveCode Dictionary.*\n\n![](images/image65.png)\n\nFigure 24 – Ask File dialog for saving a file\n\n\task file \"Save this document as:\" with \"Untitled.txt\" \n\tanswer file \"Select an image file:\" \\\n\t\t with type \"Text Files|txt\" or type \"All Files|\"\n\nThe file path to the file to be saved is returned in the special\nvariable **it**. If the user cancelled the dialog, the it variable will \nbe empty and cancel will be returned by *the result* function.\n\nFor complete details on the syntax, see the ask file with type in the\n*LiveCode Dictionary.*\n\n![](images/image66.png)\n\nFigure 25 – Answer folder dialog for choosing a directory\n\n\tanswer folder \"Please choose a folder:\"\n\n\tanswer folder \"Please choose a folder:\" with \"/root/default folder\"\n\nThe file path to the folder selected by the user is returned in the\nspecial variable **it**. If the user cancelled the dialog, the **it**\nvariable will be empty and \"cancel\" information will be returned by \n*the result* function.\n\nFor complete details on the syntax, see answer folder in the \n*LiveCode Dictionary*.\n\n#### Color Chooser Dialog\n\nThe **answer color** dialog allows you to display the operating system’s\nstandard color picker dialog.\n\n![](images/script-build-ui-answer-color.png)\n\nFigure 26 – Answer color dialog for choosing a color \n\n\tanswer color\n\nThe color chosen is returned in the special variable **it**. If the\nuser cancelled the dialog, it will be empty and \"cancel\" will be\nreturned by *the result* function.\n\nFor complete details on the syntax, see answer color in the \n*LiveCode Dictionary.*\n\n#### Printer Dialogs\n\nThe printer dialogs allow you to display the standard printer and page \nsetup dialogs.\n\n![](images/image68.png)\n\nFigure 27 – Answer printer for standard printer dialog\n\nUse the **answer printer** command to display a standard printer dialog \nprior to printing. If the user cancels the dialog, \"cancel\" will be \nreturned by *the result* function.\n\n#### Alpha Blend Windows – for Enhanced Tooltips and Multimedia\n\nUse the *Shape* option in the *Stack Inspector* to set a stack’s\n**windowShape** property to the transparent, or *alpha channel* of an\nimage that has been imported together with its alpha channel (i.e. in\neither PNG or GIF format). This allows you to create a window with\n\"holes\" or a window with variable translucency. You can apply a shape to\nany type of stack, regardless of the mode it is opened, allowing such a\nwindow to block as a dialog, float as a palette, etc.\n\n> **Important:** The border and title bar of a stack are not shown if\n> the stack's **windowShape** is set. This means you will need to provide\n> methods of dragging and closing the window if you want the user to be\n> able to do these tasks.\n\n![](images/script-build-ui-window-shape.png)\n\nFigure 29 – Window with alpha mask applied\n\nYou can change the **windowShape** property dynamically by script to a\nseries of images to create an animated translucent window.\n\n#### System Palettes – for utilities floating above applications\n\nA system palette is like a palette, except that it floats in front of\nall windows on the screen, not just the windows in its application. Use\nsystem palettes for utilities that you want the user to be able to see\nand access in every application.\n\n![](images/script-build-ui-system-window.png)\n\nFigure 30 – System Window floating above other applications\n\nTo display a stack in a system palette, you turn on the check box in the\nStack Inspector \"Float Above Everything\". For more details on this\nfeature, see the entry for systemWindow in the *LiveCode Dictionary*.\n\nUsing this feature overrides the stack's **style** or **mode**.\n\nThe system palette style is currently not supported on Linux & Unix.\n\n#### Stack menus – for displaying non-standard menus\n\n> **Note:** Usually a menu in a LiveCode application is implemented as a\n> button. We recommend that menus are implemented using buttons, as\n> these will automatically be drawn with the native theme on each\n> platform. For more details, see the section on Menus below\n\nIt is also possible to display a stack as a *pulldown*, *popup*, or\n*option* menu. Stack menus are used when a menu needs to contain\nsomething other than just text. For example, a popup menu containing a\nslider, or an option menu consisting of icons instead of text, can be\nimplemented as a stack menu.\n\nTo display the stack menu, you create a button and set its **menuName**\nproperty to the stack's name. When the user clicks the button, the stack\nis displayed with the behavior of a menu. Internally, the menu is\nimplemented as a window, and you can use the **popup**, **pulldown**, or\n**option** command to display any stack as one of these menu types.\n\n#### Stack Decorations – for Window Appearance\n\nStack decorations allow you to specify how the title bar and border of a\nwindow will be drawn. You can access the stack decorations options in\n**Object -\\> Stack Inspector**.\n\nApart from the differences in appearance between different window modes,\nthe appearance and functionality of a window can vary depending on the\nstack's properties and the platform it is being displayed on.A window's\ntitle bar displays the window's title, as well as a close box, minimize\nbox or collapse box, and maximize box or zoom box.\n\n![](images/image72.png)\n\nFigure 31 – Window Decorations on Windows and Mac OS X\n\n> **Note:** On Mac OS X, a stack's **shadow** property controls whether\n> the stack window has a drop shadow. On OS X systems, you can set this\n> property to false to create a window with no shadow.\n\nThe properties above can also be set by script, for more details see the\n**decorations** property in the *LiveCode Dictionary*.\n\nWhile the stack's mode is separate from its **decorations**, the mode\nmay affect whether these properties have an effect. If the\n**decorations** property is set to \"default\", it displays the\nappropriate decorations *for the current window type* on the current\nplatform.\n\n#### Button Controls – for performing actions\n\nA button is a clickable object that is typically for allowing a user to\nperform an action by clicking.\n\n| &nbsp;| &nbsp;| &nbsp;|\n|----------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| ![](images/script-build-ui-standard-button-mac.png) |  ![](images/script-build-ui-standard-button-win.png) | ![](images/script-build-ui-standard-button-linux.png) |\n| ![](images/script-build-ui-default-button-mac.png) |  ![](images/script-build-ui-default-button-win.png) | ![](images/script-build-ui-default-button-linux.png) |\n| ![](images/script-build-ui-rectangle-button-mac.png) |  ![](images/script-build-ui-rectangle-button-win.png) | ![](images/script-build-ui-rectangle-button-linux.png) |\n| Mac | Windows | Linux |\n\nFigure 32 – Button Objects on Multiple Platforms\n\nCheck boxes and radio buttons are used to allow the user to make\nchoices. Radio buttons are used when only one option for a set of\noptions may be selected at any time. Check boxes are used where some\noptions may be turned on and others may be off.\n\n> **Note:** LiveCode will automatically enforce the rule of highlighting\n> one radio button at a time if you place the radio buttons together in\n> a group. For more details on groups, see the section on \n> *Groups and Backgrounds*.\n\n| &nbsp;| &nbsp;| &nbsp;|\n|----------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| ![](images/script-build-ui-check-box-mac.png) |  ![](images/script-build-ui-check-box-win.png) | ![](images/script-build-ui-check-box-linux.png) |\n| ![](images/script-build-ui-radio-button-mac.png) |  ![](images/script-build-ui-radio-button-win.png) | ![](images/script-build-ui-radio-button-linux.png) |\n| Mac | Windows | Linux |\n\nFigure 33 – Check Boxes and Radio Buttons on Multiple Platforms\n\nAll button objects in LiveCode are highly flexible and customizable.\nCommon settings include the ability to show and hide the border or fill,\nand to display an icon.\n\nIcons allow you to provide a wide range of functionality. For example\nyou can create a roll over effect by setting a hover icon. Or you can\ncreate a custom check box by setting an icon and a highlight icon –\ndoing so will replace the system standard check box and display your\nicon in each state depending on whether the button has been pressed or\ndepressed.\n\n![](images/image75.png)\n\nFigure 34 – Custom Buttons for Multimedia\n\n> **Important:** Button icons are not limited in width or height. They\n> can be animated by using an animated GIF. In fact, an icon can\n> reference **any** image contained within your LiveCode stack file.\n> Referencing an image in this way saves disk space and allows you to\n> update all icons in your stack by updating a single image. See the\n> chapter *Working with Media* for more information.\n\n#### Text Field Controls – for displaying or entering text\n\nFields allow you to display text. Fields can optionally allow the user\nto edit the text. Fields support multiple fonts, styles and colors,\nimages and a subset of basic HTML tags. Fields can be linked to a\ndatabase using the Database Query Builder or by directly accessing a\ndatabase with the database library. They can display and render XML\nusing the XML library. List fields allow the user to select one or a set\nof choices. Table fields allow display of data similar to a spreadsheet.\nOther types of field can easily be created, including tree views, or any\nhybrid between these types, with a little scripting. At the time of this\nwriting there is also a 3<sup>rd</sup> party library available that\nallows you to host a web browser within an object and control it by\nscript.\n\n![](images/image76.png)\n\nFigure 35 – Field Controls\n\n#### List and Table Field Controls\n\nList fields allow you to display a set of choices. Users cannot edit\nlist fields. You can specify whether the user is allowed to make a\nsingle selection or multiple selections.\n\n![](images/image77.png)\n\nFigure 36 – List Fields\n\n#### Table Field Control – for displaying a table\n\nTable fields allow you to display data in cells, and optionally allow\nthe user to edit the cells. Table fields are ideal for displaying basic\ntabular data. For more complex data display requirements we recommend\nyou use the Data Grid control.\n\n![](images/image78.png)\n\nFigure 37 – Table Field\n\n#### Data Grid Control – for presenting data\n\nData Grids allow you to display data in both grid and form modes. You\ncan customize a data grid to include custom layouts that include any\nother LiveCode object. Data grids can provide a view into a data source,\nallowing you to display large data sets. For full documentation on using\ndata grids, see the [online\ndocumentation](http://lessons.runrev.com/spaces/lessons/manuals/datagrid)\n\n![](images/image79.png)\n\nFigure 38 – Data Grid\n\n#### Cards\n\nEach stack contains one or more separate screens of controls. Each\nscreen is known as a card. Each card can have an entirely different\nappearance, or all the cards in a stack can share some or all elements,\nby using *shared groups*, known as *backgrounds* (see below).\n\nChoosing **Object -\\> New Card** will create a new card within the\ncurrent stack. The new card will either be completely blank, or will\ncontain any shared groups from the previous card.\n\n#### Groups & Backgrounds – for organizing, and sharing controls\n\nGroups, LiveCode's most versatile object type, are used for several\npurposes: radio button clusters; menu bars; for creating scrollable\nobject areas within cards; and as backgrounds for displaying sets of\nobjects that are shared between cards. Groups can also be used for\ncreating a simple card and stack database, by holding fields that\ncontain a different record on each card.\n\n##### What Is a Group?\n\nA group is a single object that holds a set of objects. Objects are\ngrouped by selecting the controls you want to include in the group, then\nusing the **group** command or choosing **Object –\\> Group Selected**.\n\nOnce you've created the group, it becomes an object in its own right.\nYou can select, copy, move, and resize the group, and all the objects in\nthe group come with it. The objects in the group maintain their own\nidentities, and you can add objects to the group or delete them, but the\nobjects are owned by the group instead of the card.\n\nA group has its own properties and its own script. Groups can be any\nsize, can be shown or hidden, and can be moved to any location in the\nstack window, just like any other control. Like other controls, groups\ncan be layered in any order with the other controls on the card. Groups\ncan also display a border around a set of objects.\n\n![](images/image80.png)\n\nFigure 39 – Group of radio buttons with group title and border\n\nUnlike other controls, however, groups can appear on more than one card.\nYou place a group on a card using the **place** command or the \n**Place Group** submenu in the **Object menu**.\n\n> **Important:** A group that is shared between cards appears at the\n> same location on each card. A change made to the position of a shared\n> group on one card is reflected on all the other cards that share the\n> group.\n\n##### Groups and Backgrounds\n\nBoth the term **group** and the term **background** can be used to refer\nto groups. The terms are interchangeable in some circumstances and mean\ndifferent things in others. The differences are explained in more detail\nbelow.\n\nIn general, the term **group** refers to groups that are placed on a\ncard, while the term **background** refers to all the groups in a stack\nthat are available for use as *backgrounds* (see below). The expression\n\n\tthe number of groups \n\nevaluates to the number of groups on the current card. The expression\nthe number of backgrounds evaluates to the number of background groups\nin the current stack, including groups that are not placed on the\ncurrent card.\n\n> **Tip:** When you refer to a group by number, if you use the word\n> **group**, the number is interpreted as referring to the groups on the\n> referenced card, in order by layer. If you use the word\n> **background**, the number is interpreted as referring to the groups\n> in the stack, in the order of their creation.\n\nFor example, the expression the name of group 1 evaluates to the\n**name** of the lowest-layered group on the current card, while the\nexpression the name of background 1 evaluates to the **name** of the\nfirst group that was created in the stack--whether or not that\nparticular group is placed on the current card, or appears on any card\nat all.\n\nThe term **background** can be also used to refer to the set of cards\nthat share a particular group. The following statement goes to the third\ncard on which the group named \"Navigation\" is placed:\n\n\tgo card 3 of background \"Navigation\"\n\n##### Nested Groups\n\nLiveCode supports nested groups (one group containing another). Since a\ngroup is itself a control, it can be contained in another group.\n\nCreating a nested group is just like creating a group: select the\ncontrols you want to group (including the existing group), then choose\n**Object -\\> Group Selected**. The existing group is now a member of the\nnew group.\n\n##### Selecting and Editing Groups\n\nTo select a group, simply click on one of the objects that is contained\nwithin it. This will select the group.\n\nIf you want to select an object within the group, instead of the group\nitself, there are two ways to do so. You can turn on the \n**Select Grouped** option on the toolbar or in \n**Edit -\\> Select Grouped Controls**. This causes groups to be ignored\nwhen selecting objects, allowing you to select objects inside a group as\nif the group didn’t exist. You can enter this mode by script by toggling\nthe **selectGroupedControls** global property.\n\nAlternatively you can go into edit group mode, a special mode that only\ndisplays the objects within that group. Select the group, then press\n**Edit Group** on the toolbar or choose **Object -\\> Edit Group**. When\nyou have finished, choose **Object -\\> Stop Editing Group**. You can\ntoggle this mode programmatically by using the commands \n**start editing** and **stop editing**.\n\n> **Tip:** If a group's border has been set, an outline appears at the\n> group's edges. However, clicking within or on the border does not\n> select the group. To select the group, you must click one of its\n> controls.\n\n##### Placing and Removing Backgrounds\n\nOnce you create a group, you can display it on any or all cards in the\nstack. First, ensure that the group’s Behave as Background option has\nbeen set in the Inspector. Then navigate to the card you want to place\nthe group on and choose **Object -\\> Place Group** to place an instance\nof a particular group on the current card. You can control these\nfeatures from script by using the **backgroundBehavior** property and\n**place** command.\n\n> **Note:** When you create a new card, if there are any groups on the\n> current card whose Behave as Background has been set, they are\n> automatically placed on the new card. To make it easy for all\n> the cards in a stack to share a single group, create the group on the\n> first card and set this property to true, before you create any other\n> cards.\n\nTo remove a group from the current card without deleting it from the\nstack select the group and choose **Object -\\> Remove Group**. The group\ndisappears from the current card, but it's still placed on any other\ncards that share the group. You can remove a group by script using the\n**remove** command.\n\n> **Tip:** You can use the **start editing** command from the Message\n> Box to edit a group that has not been placed on any card. Since the\n> group is not on any card, you must refer to it using the term\n> \"background\" instead of the term \"group\".\n\nYou can completely delete a group in the same way as you delete any\nother object, by selecting the group and choose **Edit -\\> Clear** or\npressing backspace.\n\n> **Important:** Deleting a background group removes it from all the\n> cards it appears on, and from the stack itself.\n\nTo dissolve a group back into its component controls, select the group\nand choose **Object -\\> Ungroup**. You can ungroup a group by script\nusing the **ungroup** command. Ungrouping deletes the group object and\nits properties (including its script) from the stack, but does not\ndelete the controls in it. Instead, they become card controls of the\ncurrent card. The controls disappear from all other cards the group is\non.\n\n> **Note:** If you ungroup a group, then select the controls and regroup\n> them before leaving the current card, the group is restored as it was.\n> However, leaving the current card makes the ungrouping permanent and\n> deletes the group from all other cards it was on.\n\n##### Groups and the Message Path\n\nFor details on how groups and backgrounds fit into the Message Path, see\nthe section on *Groups, Backgrounds & The Message Path*, below.\n\n#### Graphics, Images, Players, Audio & Video Clip Objects – for multimedia\n\nLiveCode supports a wide range of media formats, allowing you to produce\nrich media applications. The image object allows you to import or\nreference images, manipulate images by script or interactively with the\npaint tools, and save them out in different formats with variable\ncompression options. Support extends to alpha channeled PNG images and\nanimated GIF images. Images can be imported and reused within a stack to\ncreate custom or interactive interface elements. To learn how to work\nwith these objects in a script, see the section on *Working with Media*.\n\nImage formats supported include GIF, JPEG, PNG, BMP, XWD, XBM, XPM, or\nPBM, PGM, or PPM files. On Mac OS systems, PICT files can also be\nimported (but they cannot be displayed on Unix or Windows systems). For\nfull details on each of these formats, see the section on \n*Working with Media*.\n\nYou can import images using **File -\\> Import as Control -\\> Image\nFile**. You can reference an image using \n**File -\\> New Referenced Control -\\> Image file**.\n\nPaint tools can only be used on images that have been imported as a\ncontrol. See the section on *Using the Paint Tools* for details on how\nto use the paint tools.\n\n![](images/image81.png)\n\nFigure 40 – Image, Graphic and Player objects\n\nVector graphics can also be created and manipulated with the graphic\ntools and by script. LiveCode supports paths with variable fills,\ngradients, blended and antialiased graphics. At time of this writing\nthere is also a 3<sup>rd</sup> party library that allows the import and\nexport of SVG format graphics. Use graphic objects to create interactive\ninterfaces, graphs, charts or games.\n\nUse the player object to display and interact with any media formats\nsupported by AVFoundation on Mac OS X and DirectShow on Windows. \nLiveCode allows you to turn on and off tracks within a movie and set \ncallback messages that trigger scripts at specific points in the movie,\nand stream movies from a server. At time of this writing there is also a\n3<sup>rd</sup> party library that allows you to edit and save movies by\nscript.\n\nThe Audio Clip & Video Clip objects allow you to embed audio or video\nclip data within a stack. They do not have any visual\nrepresentation and can be accessed by script or in the Application\nBrowser. Players, Audio & Video clips are covered in their respective\nsections within the chapter on *Working with Media*.\n\n#### Menu Controls – for displaying choices\n\nMenus are used to display a list of choices. The *pulldown* menu\ndisplays a standard *pulldown* menu, and can be automatically inserted\ninto the main menu bar on Mac OS systems. The *option* menu allows a\nchoice from a list. The combobox allows the user to type an *option* or\nchoose from a list. Popup menus can be displayed underneath the cursor\nand used to provide context sensitive options anywhere in your\napplication. For more information on working with *pulldown* menus\nwithin the main menu bar, see the section on the *Menu Builder* below.\n\nMenu contents can be defined using a list of item names and special\ncharacters to indicate where shortcuts and checkmarks should be placed.\nThis is the most common type of menu and is known as a *contents menu*.\nLiveCode will automatically draw menus defined as *contents* menus using\nthe native system look on each platform. When you choose an item from a\ncontents menu, LiveCode will send a **menuPick** message along with the\nname of the item chosen.\n\nAlternatively, menus may be constructed from a *stack panel*, giving you\ncomplete control over the menu contents and allowing the display of any\nobject type of functionality. When you choose an item from a \n*stack panel* menu, the individual object within the menu will receive a\n**mouseUp** message. Note that panel menus cannot be displayed within \nthe main menu bar on Mac OS systems.\n\nFor more details on working with and scripting menus in general, see the\nsection *Working with Menus* in the *Programming a User Interface* \nguide.\n\n| &nbsp;| &nbsp;| &nbsp;|\n|----------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| ![](images/script-build-ui-pulldown-menu-mac.png) |  ![](images/script-build-ui-pulldown-menu-win.png) | ![](images/script-build-ui-pulldown-menu-linux.png) |\n| ![](images/script-build-ui-option-menu-mac.png) |  ![](images/script-build-ui-option-menu-win.png) | ![](images/script-build-ui-option-menu-linux.png) |\n| ![](images/script-build-ui-combo-box-mac.png) |  ![](images/script-build-ui-combo-box-win.png) | ![](images/script-build-ui-combo-box-linux.png) |\n| ![](images/script-build-ui-popup-menu-mac.png) |  ![](images/script-build-ui-popup-menu-win.png) | ![](images/script-build-ui-popup-menu-linux.png) |\n| Mac | Windows | Linux |\n\n\nFigure 41 – Menu Controls\n\nThe cascade menu is a special type of control that is only used when\nbuilding a stack panel menu. Sub-menu items can be created in list-based\ncontent menus without using this object.\n\n![](images/image83.png)\n\nFigure 42 – Tab Menu on Windows\n\nThe tabbed panel is a type of menu in LiveCode. You can specify a list\nof tabs to be displayed and receive a `menuPick`message when the user\nclicks on a tab in the same way as other menus. There are two common\ntechniques for implementing a tabbed interface: group the objects for\neach tab together and show or hide the appropriate group when you change\ntab; or place the tab object into a group which is then placed as a\nbackground on multiple cards.\n\n#### Other Controls\n\nScroll bars can be used as a *progress* bar to display a value, a\n*slider* to allow the user to choose a value, or to scroll objects.\n(Note that you don’t need to use a scrollbar object with fields or\ngroups as these can display a built-in scroll bar.) Sliders and\nscrollbars can be displayed both horizontally and vertically – to\ndisplay vertically, resize so that the height is greater than the width.\n\n| &nbsp;| &nbsp;| &nbsp;|\n|----------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| ![](images/script-build-ui-progress-bar-mac.png) |  ![](images/script-build-ui-progress-bar-win.png) | ![](images/script-build-ui-progress-bar-linux.png) |\n| ![](images/script-build-ui-scrollbar-mac.png) |  ![](images/script-build-ui-scrollbar-win.png) | ![](images/script-build-ui-scrollbar-linux.png) |\n| ![](images/script-build-ui-slider-mac.png) |  ![](images/script-build-ui-slider-win.png) | ![](images/script-build-ui-slider-linux.png) |\n\nFigure 43 – Scrollbars\n\n### Using the Menu Builder\n\nThe menu builder allows you to create and edit a standard menu bar that\nwill work correctly regardless of the platform you intend to deploy on.\nOn Windows and Unix, menus built with the Menu Builder will appear in\nthe top of the window. On Mac OS they will be displayed in the main menu\nbar. It is also possible to generate a menu bar by script. For more\ndetails, see the section on *Programming a User Interface*.\n\nChoose **Tools -\\> Menu Builder** to open the Menu Builder.\n\n![](images/script-build-ui-menu-builder.png)\n\nFigure 44 – Menu Builder\n\n| &nbsp;| &nbsp;|\n|-------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **Preview** | This option allows you to preview your menu bar in the main menu bar. It only applies on Mac OS systems where the option Set as Menu Bar on Mac OS has been turned on.<br><br> > **Important:** To bring back the LiveCode development menu bar when working with a stack that has this option turned on, click on a LiveCode IDE window such as the Tool bar. |\n| **Menu bar settings** | This area specifies the main settings for your menu bar. Use the *New* button to create a new menu bar in the current top most editable stack. Enter the name for your menu bar in the text area. *Delete* will permanently delete your menu bar. Use the *Edit* button to load an existing menu bar from the top most editable stack to edit in the area below|\n| **Menu edit area**    | Select a menu to work on from the scrolling list. At a minimum your application should have a File, Edit and Help menu. These menus are created for you automatically when you create a new menu bar. To create a new menu, move the orange *divider bar* to the position in the menu bar you want to create the new menu, and press *New Menu*. Disable the currently selected menu by checking *Disabled*. Choose the keyboard shortcut (the portion of the name that is underlined), using the *Mnemonic* popup menu (Windows, Linux & Unix only). To move a menu in the list, select it then press the *up or down arrows* (to the right of the name area|\n| **Menu content area** | Select a menu item to work on from the scrolling list. To create a new menu item, move the orange *divider bar* to the position in the menu bar you want to create the new menu, and press *New Item*. Disable the currently selected item checking *Disabled*. Choose the keyboard shortcut (the portion of the name that is underlined, for use when the menu is open), using the *Mnemonic* popup menu (Windows, Linux & Unix only). To move a menu item up or down the list, select it then click the *up or down arrows* (to the right of the name area). To move items into a *submenu*, click the *Right* arrow, or click the *Left* arrow to move a submenu item back into the main menu bar. To insert a *divider*, position the orange divider bar where you want the divider, the click the blue divider button (top right). To make the menu item a *Checkbox* or *Diamond* option, choose the appropriate option from the *Mark* popup menu. To create a control key *shortcut* for the item, click the Shortcut check box and enter the letter you want to use for the shortcut. To understand the *symbols* that are created next to the menu items, see the section on *Menu Bars* within the chapter on *Programming a User Interface*. |\n| **Scripting**         | *Edit Script* opens the Code Editor for the currently selected menu. *Auto Script* places a blank script within the currently selected button with spaces to insert actions for each of the menu items within that item. We recommend you press Auto Script before pressing Edit Script when you create a menu|\n\n### Using the Geometry Manager\n\nUse the Geometry Manager to specify how objects should be scaled and \npositioned when the user resizes the window.\n\n![](images/script-build-ui-geometry-manager.png)\n\nFigure 45 – The Geometry Manager\n\n| &nbsp;| &nbsp;|\n|--------------------------------|----------|\n| **Scale or Position Selector** | Choose whether you want the control to be *scaled* or *positioned* when the stack is resized. Scaling will change the dimensions of the control as the stack resizes. Positioning will move the control, it does not change its dimensions. Note that it is possible to scale an object in the horizontal plane and have it position in the vertical. Select Scale then set the options for one axis in the Linking area. Then select Position and set the options for the other axis. If you set options in both the Scale and Position modes for both axis, the Scaling options will be ignored.                                                                                                                                                                                                                                                                                                                                                                                          |\n| **Linking area**               | Use the linking area to specify the *relationship* between the control and the window, or other controls as the stack is resized. In Scaling mode you can link each edge of the object to the window or another object. In positioning mode, you can only link the X and Y axis of an object. Click the gray bars to create a link. A single click results in an absolute link, a second click will create a relative link. An absolute link will keep the object the current number of pixels away from what it is being linked to. For example, if you link the right edge to the edge of the window and the edge is currently 10 pixels away from the edge of the window, whenever the stack is resized the edge will remain exactly 10 pixels away. However if you use a relative link the distance will be calculated as a percentage of the total width of the card. The object will remain the same percentage away from the edge of the card, the exact number of pixels will vary.<br><br>When linking to another control, be sure to link to a control that is moved relative to the window, or by a script (e.g. in a `resizeStack`handler).<br><br>When using the Geometry Manager with an existing `resizeStack`handler, be sure to pass the `resizeStack`message, otherwise the Geometry Manager will not be able to take effect.<br><br>To force the Geometry to manually update, call **revUpdateGeometry**.<br><br> > **Tip:** You can use the Geometry Manager to scale objects with a \"divider\" bar. Create and script the bar to move, then link the edges of the controls to it, then call revUpdateGeometry each time it moves to have the objects scale automatically.|\n| **Clipping settings** | Turn on Prevent Object Clipping Text to prevent the control getting too small to display its label when the window is resized. If the control is a field, you can also turn on the option to display scroll bars if the text within the field does not fit. |\n| **Limit settings**    | Allows you to set the minimum and maximum possible widths and heights for the object.                                                                                                                                                                       |\n| **Remove All**        | Removes all Geometry settings from the control. Use this option if the settings you have applied do not give the desired effect and you want to start over.                                                                                                 |\n\n### 10 Tips for Good User Interface Design\n\nIf you are creating a simple utility for yourself, a handful of other\npeople, or as a research project, the design of the interface is less\nimportant. However, if you are creating software for a wide group of end\nusers, you should take time to carefully design the user interface. As\ncomputer software has become more mature over the past couple of\ndecades, user expectations of what their software experience should be\nhave increased. Increasingly, users expect clear, uncluttered interfaces\nwhich are visually appealing. Getting this right is part art and part\nscience. It is beyond the scope of this manual to give detailed\ninstruction on this topic. There are many good books and resources\ndevoted to this evolving area. However we thought it would be useful to\ngive you our top 10 tips for good user interface design.\n\n- Less is more\n\nDon't use three buttons where one would do. The fewer choices a user has\nto make the easier your software will be to learn.\n\n- Design to communicate\n\nGood design supports whatever you are trying to communicate.\n\n- Get the defaults right\n\nProviding preferences is great for power users. Just remember that the\nmajority of your users will never adjust the defaults. So focus on\ngetting the default behaviors right before you start to add preferences.\n\n- Layout\n\nA clean consistent layout helps to convey a feeling of professionalism\nand make your software useable. If you have used a button that is 20\npixels wide in one part of your interface then use the same size of\nbutton elsewhere. Line your objects up carefully.\n\n- Screen resolution\n\nConsider what screen resolution you are designing for and whether or not\nyou want your interface to be resizable early on. This decision will\nhave a big impact on your design.\n\n- Consider the program flow\n\nIf you program performs a complex task with many options, consider\ncreating a wizard style interface which guides the user step by step\nthrough the task. That way they are never faced with a screen covered\nwith dozens of options and no idea what to do next.\n\n- Test it on real users\n\nBring in a group of people and watch them use the program. Don't\ninterfere or help them out, just get them going and take notes. If you\ndon't have a budget for expensive user testing labs, this process can be\nas simple as gathering a group of students and offering them free pizza.\nYou'll get a ton of useful feedback that will really help make your\nprogram easy to use.\n\n- Don't use square wheels\n\nThe various types of widget and control type available have built up a\nmeaning for users over years of use. Don't use something that has a well\nunderstood function to perform a different sort of task. If you need a\nwidget that does something new, build something new.\n\n- Skinning\n\nIf you're producing a custom skin for your application, a good rule of\nthumb is either make it entirely custom or use standard OS widgets. An\nOS native button can look very out of place in the middle of a carefully\ndesigned custom skin.\n\n- HCI guidelines for the three main platforms\n\nEach of the platforms that LiveCode supports has its own set of User\nInterface Guidelines. We recommend you take time to familiarize yourself\nwith them.\n\nApple Human Interface Guidelines:\n\n<http://developer.apple.com/documentation/UserExperience/Conceptual/\nOSXHIGuidelines/XHIGIntro/chapter_1_section_1.html>\n\nWindows Vista User Experience Guidelines:\n\n<http://msdn2.microsoft.com/en-us/library/aa511258.aspx>\n\nGNOME Human Interface Guidelines 2.0:\n\n<http://library.gnome.org/devel/hig-book/stable/>\n\nKDE Human Interface Guidelines:\n\n<http://wiki.openusability.org/guidelines/index.php/Main_Page>\n\n## Coding in LiveCode\n\nWriting code is how you give your application functionality. Writing the\nright code means your application will do what you want it to do.\nFortunately, LiveCode’s built in high level language, makes this task\neasy. The English-like syntax is easy to read and write. This chapter\nwalks you through writing LiveCode.\n\n### The Structure of a Script\n\n### What is a Script\n\nEvery object in LiveCode can contain a script, which tells it what to\ndo. You edit the script of an object using the Code Editor (see *The\nCode Editor*). A script is organized into a set of individual *message\nhandlers*, each one of which can respond to a different event (see\n*Messages*) or contain a specific piece of functionality. Scripts can\nsend messages to each other. In a well organized application, a script\nwill regularly pass data between different types of message handlers\nwhich have been grouped and organized to deliver functionality, with a\nminimum amount of duplication. A script can contain sections of code\nthat is commented – remarks that are intended for a human to read and\nare not executed. Technically a script is simply another object\nproperty, so one script can set another – within certain limits.\n\n### The Types of Handler\n\nA *handler* is a complete section of code. Each handler can be executed\nindependently. There are four types of handler: commands (message\nhandlers), functions, getProp handlers and setProp handlers.\n\n### Message Handlers\n\nEach *message* handler begins with the **on** control structure followed\nby the name of the message that this handler responds to. The handler\nends with the **end** control structure and the name of the message.\nMessage handlers look like this:\n\n\ton mouseUp\n\t\tbeep\n\tend mouseUp\n\nA message handler is executed when the object whose script contains the\nhandler receives the message. This example handler responds to the\n**mouseUp** message (see *Messages*).\n\n### Function Handlers\n\nEach function handler begins with the **function** control structure\nfollowed by the name of the function that this handler computes. The\nhandler ends with the **end** control structure and the name of the\nfunction. Function handlers are typically called by another handler and\nreturn a value using the **return** control structure. Function handlers\nlook like this:\n\n\tfunction currentDay\n\t\treturn item 1 of the long date\n\tend currentDay\n\nA function handler is executed when a handler in the same script (or one\nin an object lower in the *message hierarchy*) calls the function. This\nexample handler returns today's name.\n\n### GetProp Handlers\n\nEach **getProp** handler begins with the **getProp** control structure\nfollowed by the name of the custom property that this handler\ncorresponds to. The handler ends with the **end** control structure and\nthe name of the property. **getProp** handlers look like this:\n\n\tgetProp myCustomProperty\n\t\treturn the scroll of me + 20\n\tend myCustomProperty\n\nA **getProp** handler is executed whenever the value of the\ncorresponding custom property is requested by a LiveCode statement. You\ncan write a `getProp`handler for any custom property of the object or\nanother object lower in the message hierarchy. For more information, see\nthe section on *Custom Properties*.\n\n### SetProp Handlers\n\nEach setProp handler begins with the **setProp** control structure\nfollowed by the name of the custom property that this handler\ncorresponds to. The handler ends with the **end** control structure and\nthe name of the property. setProp handlers look like this:\n\n\tsetProp myCustomProperty newSetting\n\t\tset the hilite of me to true\n\t\tpass myCustomProperty\n\tend myCustomProperty\n\nA setProp handler is executed whenever the value of the corresponding\ncustom property is changed by the **set** command. You can write a\nsetProp handler for any custom property of the object or another object\nlower in the object hierarchy. For more information, see the section on\n*Custom Properties*.\n\n### Comments\n\nComments are remarks that are intended for a human to read and are not\nexecuted. For some recommendations on what sort of comments to include\nand when, see the section on *Good Design Recommendations*.Comments can\nbe placed either in a handler, or outside any handler.\n\nAny line (or portion of a line) that starts with two dashes (**--**) or\na hash mark (**\\#**) is a comment. Placing these characters at the\nbeginning of a line is called \"commenting out\" the line.\n\n\ton mouseUp -- this part is a comment\n\t\tbeep\n\t\t-- and this is a comment too\n\tend mouseUp\n\nYou can temporarily remove a statement, or even an entire handler, by\ncommenting it out. To comment out several lines at once, select them and\nchoose **Script -\\> Comment**.\n\nSince comments are not executed, you can place them anywhere in a\nscript--inside a handler or outside all handlers.\n\nComments that start with **--** or \\## only extend to the end of the\nline. To create a multiple-line comment, or *block comment*, surround it\nwith **/\\*** and **\\*/** instead:\n\n\ton openCard\n\t\t/* This is a multiple-line comment that might\n\t\tcontain extensive information about this handler,\n\t\tsuch as the author's name, a description, or the\n\t\tdate the handler was last changed. */\n\t\tshow image \"My Image\"\n\t\tpass openCard /* You can also make one-line comments */\n\tend openCard\n\t\nBlock comments are handy when you want to temporarily remove a section\nof code while debugging a handler. You can place the characters \"/\\*\" at\nthe start of the section, and \"\\*/\" at the end, to prevent the section\nfrom being executed.\n\n### Compiling a Script\n\nA script is compiled when you change the script either by clicking Apply\nin the Code Editor (or, if altering a script from another script, using\nthe **set** command). During compilation, the entire script is analyzed.\n\nIf a compile error is found when a script is being compiled, the entire\nscript is unavailable for execution until the error is corrected and the\nscript is re-compiled. This applies only to compile errors. If an\nexecution error occurs during the execution of a handler, it does not\naffect the ability to use other handlers in the same script. For more\ninformation on dealing with errors, see the section on *Debugging*.\n\nYou cannot change a script while a handler in it is executing, because\nwhat is executed is the compiled version, not the text in the **script**\nproperty.\n\n### Summary\n\nEach object has a script, which can be empty or can contain one or more\nLiveCode handlers. You change a script using the Code Editor, or by\nsetting the object's **script** property.\n\nA script can contain four kinds of handlers: commands, function\nhandlers, setProp handlers, and getProp handlers.\n\nA comment is a part of the script that is not executed. Comments start\nwith **--** or **\\#**.\n\nIf a script contains a compile error, none of its handlers can be used\nuntil the error is fixed.\n\n## Events\n\nLiveCode is based upon events. Every action a script takes is triggered\nby an event, which is sent in the form of a message.\n\n### What Causes Messages to be Sent\n\nMessages are sent by *events*. Events include user actions (such as\ntyping a key or clicking the mouse button) and program actions (such as\ncompleting a file download or quitting the application). LiveCode\nwatches for events and sends a message to the appropriate object when an\nevent occurs.\n\n> **Note:** When a tool other than the Browse tool is active, the\n> development environment traps the built-in messages that are normally\n> sent when clicking (such as **mouseDown** and **mouseUp**). This is so\n> that, for example, you can use the Pointer tool to select and move a\n> button without triggering its **mouseUp** handler.\n\nThese messages are referred to as built-in messages, and include\n**mouseDown**, **mouseUp**, **keyDown**, **openCard**, and all the other\nmessages described in the LiveCode Dictionary.\n\nLiveCode also sends a message whenever a handler executes a *custom*\ncommand (see *Sending Messages*). However, *built-in* commands are\nexecuted directly by the engine and don't result in sending a message.\nSimilarly, LiveCode sends a function call whenever a handler calls a\n*custom* function, a **setProp** trigger whenever a handler sets a\n*custom* property, and a **getProp** call whenever a handler gets the\nvalue of a custom property.\n\n### Responding to Events\n\nTo respond to a message, you write a message handler with the same name\nas the message. For example, to respond to a **keyDown** message sent to\na field (which is sent when the user presses a key while the insertion\npoint is in the field), place a **keyDown** handler in the field's\nscript:\n\n\ton keyDown theKey -- responds to keyDown message\n\t\tif theKey is a number then beep\n\tend keyDown\n\n## The Message Path\n\nThe *message path* is the set of rules that determine which objects, in\nwhich order, have the opportunity to respond to a message. The message\npath is based on the *object hierarchy*.\n\n### The Object Hierarchy\n\nEach LiveCode object is part of another object, of a different object\ntype. For example, each card is part of a stack, each grouped control is\npart of a group, and so on. This *object hierarchy* defines the\nownership and inheritance relationship between objects.\n\nFont, color and pattern properties are *inherited* from the object’s\nowner if they are not set. This means that if you set the **textFont**\nof a stack, all the objects within that stack that do not have their\n**textFont** property set will use that text font.\n\n### The Message Path\n\nWhen a message is sent to an object, it is often handled directly by a\nmessage handler in that object. However if no handler is present, the\nmessage will continue along a path until it finds a message handler that\ncan respond to it. This makes it possible to group similar functionality\ntogether at different levels within your application. This behavior\napplies both to event messages sent as a result of a user action, and\ncustom messages sent by script. It is therefore possible to write\nlibraries of common functions.\n\nThe object hierarchy is closely related to the *path* that a message\ntravels on. In most cases, when an object passes a message on, the\nmessage goes to the object's owner in the object hierarchy.\n\nThe Message Path is detailed in the figure below.\n\n![](images/image89.png)\n\nFigure 48 – The Message Path\n\nFor example, suppose the user clicks a button in a main stack, causing\nLiveCode to send a **mouseUp** message to the button. If the button's\nscript does not contain a handler for the **mouseUp** message, the\nmessage is passed along to the card the button is on. If the card's\nscript contains a **mouseUp** handler, the handler is executed. But if\nthe card does not handle the **mouseUp** message, it is passed on to the\ncard's stack. If the stack script contains a **mouseUp** handler, the\nhandler is executed. But if the stack does not handle the **mouseUp**\nmessage, it is passed on to the engine.\n\nThe engine is the end of the message path, and if a message reaches it,\nthe engine takes any default action (e.g. inserting a character into a\nfield or highlighting a button), then throws the message away.\n\nIf a message corresponding to a *custom* command or a *custom* function\ncall reaches the end of the message path without finding a handler,\ninstead of being thrown away, it causes an execution error.\n\n> **Note:** In order to be considered a background (as per the Message\n> Path diagram above), a group must have its **backgroundBehavior**\n> property is set to true.\n\nIf a stack's **dynamicPaths** property is set to true, message handlers\nin that stack use HyperCard's dynamic path behavior: if a handler uses\nthe **go** or **find** command to go to a card other than the original\ncard, that destination card's message path is inserted into the message\npath as long as the handler is on that card. The **dynamicPaths**\nproperty is provided for compatibility with imported HyperCard stacks,\nand is normally set to false, but you may encounter this behavior when\nworking with a stack that was originally created in HyperCard.\n\n### The Message Target\n\nThe object that a message *was originally sent* to is called the\nmessage's target. You can get the target from within any handler in the\nmessage path by using the **target** function.\n\n> **Tip:** To get the name of the object whose script is currently\n> executing, use the **me** keyword.\n\nFor example, if you click a button (causing a **mouseUp** message to be\nsent), and the button's script contains a **mouseUp** handler, then the\n**target** function returns the button's name. However, if the button\ndoesn't handle the **mouseUp** message, it's passed to the card, and if\nthe card has a **mouseUp** handler, it is executed in response to the\nmessage. In this case, the card's script is executing, but the\n**target** is not the card--it's the button that was originally clicked,\nbecause LiveCode sent the **mouseUp**message to the button.\n\n### Handlers with the Same Name\n\nIf two different objects in the message path each have a handler with\nthe same name, the message is handled by the first object that receives\nit and has a handler for it.\n\nFor example, suppose that a button's script includes a **mouseUp**\nhandler, and so does the stack script. If you click the button, a\n**mouseUp** message is sent to the button. Because the button's script\nhas a **mouseUp** handler, the button handles the message, and it isn't\npassed any further. The message is never sent to the stack script, so\nfor this click event, the stack script's **mouseUp** handler is not\nexecuted.\n\n> **Note:** If an object's script has more than one handler with the\n> same name, the first one is executed when the object receives the\n> corresponding message. Other handlers in the same object's script with\n> the same name are never executed.\n\n### Trapping Messages\n\nWhen an object receives a message and a handler for that message is\nfound, the handler is executed. Normally, a message that's been handled\ndoes not go any further along the message path. Its purpose having been\nserved, it disappears. Such a message is said to have been *trapped* by\nthe handler.\n\nIf you want to prevent a message from being passed further along the\nmessage path, but don't want to do anything with it, an empty handler\nfor the message will block it from being passed on. This example\nprevents the **mouseDown** message from being acted on by the object the\nempty handler is in, as well as any objects below it in the object\nhierarchy:\n\n\ton mouseDown\n\tend mouseDown\n\nYou can use the same technique to block custom function calls,\n**setProp** triggers, and **getProp** calls.\n\n### Blocking System Messages\n\nYou can block system messages – for example those sent when you navigate\nto another card – from being sent while a handler is executing by\nsetting the **lockMessages** property to true.\n\nFor example, if the handler opens another stack, LiveCode normally sends\n**openCard** and **openStack** messages to the stack. If the stack\ncontains handlers for these messages that would cause unwanted behavior\nduring this operation, you can use the **lockmessages** command before\ngoing to the stack in order to temporarily block these messages. When\nthe handler finishes executing, the **lockMessages** property is\nautomatically reset to its default value of false, and normal sending of\nmessages resumes.\n\n> **Tip:** To block navigation messages while testing or debugging a\n> stack, press Suppress Messages on the toolbar or choose \n> **Development -\\> Suppress Messages**.\n\n### Passing a Message to the Next Object\n\nTo let a message pass further along the message path, use the **pass**\ncontrol structure. The **pass** control structure stops the current\nhandler and sends the message on to the next object in the message path,\njust as though the object hadn't contained a handler for the message:\n\n\ton openCard\n\t\tdoSpecialSetupForThisCard\n\t\tpass openCard -- let stack get the message too\n\tend openCard\n\n### Selectively Trapping or Passing Messages\n\nSome built-in messages, such as **keyDown**, trigger an action, so\ntrapping the message prevents the action from being performed at all.\nThe following example passes the **keyDown** message only if the\ncharacter typed is a number:\n\n\ton keyDown theKey\n\t\tif theKey is a number then pass keyDown\n\tend keyDown\n\nIf you place this handler in a field's script, it allows the user to\nenter numbers, but any other keystrokes are trapped by the **keyDown**\nhandler and not allowed to pass.\n\nA similar principle applies to **setProp** triggers. If a **setProp**\nhandler does not pass the **setProp** trigger, the custom property is\nnot set.\n\n### Groups, Backgrounds & The Message Path\n\nAs you can see from the diagram above a group's position in the message\npath depends on whether the \"Behave as Background\" check box has been\nset (by script or using the **backgroundBehavior** property).\n\nIf background behavior is false, the group is in the message path for\nall controls it owns, but is not in the message path of any other\nobject.\n\nIf the background behavior is true, the group is *also* in the message\npath for any cards it is placed on. If you send a message to a card\ncontrol, the message passes through the control, then the card, then any\nbackground groups on the card in order of **number**, then the stack.\n\nSince a group owns any controls that are part of the group, if you send\na message to a control within a group, the group is in the message path\nfor its own controls, regardless of whether it’s background behavior is\ntrue or false. If a group has already received a message because it was\noriginally sent to one of the controls in the group, the message is not\nsent through the group again after the card has handled it.\n\n> **Tip:** If you want a handler in a group's script to affect only the\n> objects in the group, place the following statement at the beginning\n> of the handler:\n>\n>\tif the owner of the target is not me then pass *message*.\n>\n> This filters out any objects that are not part of the group.\n\n## Commands and Functions\n\nYou use commands and functions to perform the actions of your\napplication. Commands instruct the application to do something – such as\nplay a movie, display a window, or change a property. Functions compute\na value – different functions might add a column of numbers, or get the\nfifteenth line of a certain file, or find out whether a key is being\npressed.\n\n### Using Built-in Commands and functions\n\nLiveCode has over one hundred and fifty built-in commands, and over two\nhundred built-in functions, all of which are documented in the LiveCode\nDictionary.\n\n#### Commands\n\nA command is an instruction to LiveCode to do something. A command is\nplaced at the start of a statement (either the start of a line or after\na control structure such as \"then\"). The command is followed by any\nparameters that specify the details of what the command is to do.\n\nHere are some examples of how built-in commands are used in statements:\n\n\tgo next card -- go command\n\tbeep --beep command\n\tset the hilite of me to true-- set command\n\n#### Functions\n\nA function call is a request to LiveCode for information. A function is\nstated using the name of the function, followed by opening and closing\nbrackets that may contain any parameters that specify the details of\nwhat the function is to act on.\n\nWhen you use a function in a statement, LiveCode calls the function to\ncompute the specified information, then substitutes that information in\nthe script as if the script had originally written that information in\nplace of the function call. The information returned can therefore be\n*put* into a *variable* or other *container* by using the put command in\nfront of a function.\n\nHere's an example of how a function is used:\n\n\tput round(22.3) into field \"Number\"\n\nWhen this statement is executed, LiveCode calls the **round** function.\nWhen you round off 22.3, the resulting number is 22, so the statement\nputs the number 22 into the field.\n\nThe number you're rounding off is placed in parentheses after the\n**round** function's name. This number is called the function's\nparameter. A function can have one parameter, or none, or several. The\nparameters are enclosed in parentheses and, if there's more than one,\nthey're separated with commas. Here are some examples:\n\n\tput date() into myVariable -- date function, no parameters\n\tput length(\"hello\") into me -- length function, 1 parameter\n\tget average(10,2,4) -- average function, 3 parameters\n\t\n> **Important:** A function call, by itself, is not a complete\n> statement. You need to use a function call in conjunction with a\n> command or control structure. (In the first example above, the\n> **round** function is used with the **put** command.)\n\n#### Writing function calls with the \"the\" form\n\nIf a built-in function has no parameters or one parameter, it can be\nwritten in a different form, with no parentheses:\n\n\tput the date into myVariable -- date function\n\tput the length of \"hello\" into me -- length function\n\nIf the function has no parameters, this form is written as the\n*functionName*. If it has one parameter, this form is written as the\n*functionName* of parameter.\n\nThe \"the\" form works the same way as the \"()\" form shown above, and you\ncan use the two forms interchangeably for *built-in functions* with\nfewer than two parameters. The LiveCode Dictionary entry for each\nbuilt-in function shows how to write both forms.\n\nYou can use the \"the\" form for built-in functions, but not for custom\nfunctions that you write. Writing custom functions is discussed later.\n\n### Custom Commands and Functions\n\nYou use custom commands and custom functions the same way as any other\ncommand or function.\n\n#### Using custom commands\n\nYou can execute a custom command simply by typing the name of the\ncommand you want to send.\n\n\tmyCommand\n\nYou respond to a custom command's message in the same way, by writing a\nmessage handler with the name of the command:\n\n\ton myCommand -- a custom command\n\t\tbeep 3\n\t\tgo next card\n\t\tadd 1 to field \"Card Number\"\n\tend myCommand\n\nIf you don't specify an object, the message is sent to the object whose\nscript is being executed, and then passes up the message hierarchy as\nnormal.\n\nLike a built-in command, a custom command is an instruction to LiveCode\nto do something. You can include parameters with a custom command by\npassing them after the name:\n\n\tcheckForConnection \"ftp://ftp.example.org\"\n\n\tmakePrefsFile fileLoc,field \"Preferences\"\n\nBuilt-in commands can have very flexible syntax:\n\n\tgo to card 3 of stack \"Dialogs\" as modal\n\n\tgroup image \"Help Icon\" and field \"Help Text\"\n\n\thide button ID 22 with visual effect dissolve very fast\n\nHowever, the syntax of custom commands is more limited. A custom command\ncan have several parameters, and if there is more than one, they are\nseparated by commas:\n\n\tlibURLDownloadToFile myFile,newPath,\"downloadComplete\"\n\n\trevExecuteSQL myDatabaseID,field \"Query\",\"\\*b\" & \"myvar\"\n\nBut custom commands cannot use words like \"and\" and \"to\" to join parts\nof the command together, the way built-in commands can. Because of this,\ncustom commands cannot be as English-like as built-in commands can be.\n\n#### Using custom functions\n\nWhen you use the custom function \"fileHeader\" in a statement, the\nfunction handler is executed, and the function call is replaced by the\nvalue in the **return** statement. This example shows how the function\ncan be used:\n\n\tput fileHeader(it) into myFileHeaderVar\n\nAnd the corresponding custom function:\n\n\tfunction fileHeader theFile\n\t\tput char 1 to 8 of URL (\"file:\" & theFile) into tempVar\n\t\tput binaryDecode(\"h\\*\",tempVar) into tempVar\n\t\treturn tempVar\n\tend fileHeader\n\nLike a built-in function or library function, a custom function call is\na request for information. Here are a few examples showing the use of\nmade-up custom functions:\n\n\tget formattedPath(\"/Disk/Folder/File.txt\")\n\tput summaryText(field \"Input\") into field \"Summary\"\n\tif handlerNames(myScript, \"getProp\") is empty then beep\n\nCustom functions don't have a \"the\" form, and are always written with\nparentheses following the function name. If the function has parameters,\nthey are placed inside the parentheses, separated by commas. If the\nfunction doesn't have parameters, the parentheses are empty.\n\n### Passing Parameters\n\nA value that you pass from one handler to another is called a parameter.\n\nIn the example below, the following statement sends the \"alertUser\"\nmessage with a parameter:\n\n\talertUser \"You clicked a button!\"\n\nThe parameter \"You clicked a button!\" is passed to the \"alertUser\"\nhandler, which accepts the parameter and places it in a parameter\nvariable called \"theMessage\". The \"alertUser\" handler can then use the\nparameter in its statements:\n\n\ton alertUser theMessage\n\t\tbeep\n\t\tanswer theMessage -- uses the parameter \"theMessage\"\n\tend alertUser\n\n### Passing Multiple Parameters\n\nIf a statement passes more than one parameter, the parameters are\nseparated by commas. The following example has two parameters,\n\"theMessage\" and \"numberOfBeeps\":\n\n\ton seriouslyBugUser theMessage,numberOfBeeps\n\t\tbeep numberOfBeeps\n\t\tanswer theMessage\n\tend seriouslyBugUser\n\nTo use this custom command, you call it like this:\n\n\tseriouslyBugUser \"Hello\",5\n\nWhen the \"seriouslyBugUser\" handler is executed with the statement\nabove, the *theMessage* parameter is \"Hello\", and the *numberOfBeeps*\nparameter is 5.\n\n### Parameter Variables\n\nIn the example above, \"theMessage\" and \"numberOfBeeps\" are the parameter\nvariables. You declare parameter variables in the first line of a\nhandler. When the handler begins executing, the values you passed are\nplaced in the parameter variables. You can use parameter variables the\nsame way as ordinary variables: you can put data into them, use them in\nexpressions, and so on.\n\nParameter variables are local variables, so they go out of existence as\nsoon as the handler stops executing.\n\n#### Parameter variable names\n\nYou can give a parameter any name that's a legal variable name. The\nnames of variables must consist of a single word and may contain any\ncombination of letters, digits, and underscores (\\_). The first\ncharacter must be either a letter or an underscore.\n\nIt is not the name, but the order of parameters that is significant.\n\n#### Empty parameters\n\nA handler can have any number of parameter variables regardless of the\nnumber of parameters passed to it. If there are more parameter variables\nthan there are values to put in them, the remaining parameter variables\nare left empty. Consider the following handler, which has three\nparameter variables:\n\n\ton processOrder itemName,itemSize,numberOfItems\n\t\tput itemName into field \"Name\"\n\t\tput itemSize into field \"Size\"\n\t\tif numberOfItems is empty then put 1 into field \"Number\"\n\t\telse put numberOfItems into field \"Number\"\n\tend processOrder\n\nThe following statement places an order for one sweater:\n\n\tprocessOrder \"sweater\",\"large\"\n\nThe statement only passes two parameters, while the \"processOrder\"\nhandler has three parameter variables, so the third parameter variable,\n\"numberOfItems\", is empty. Because the handler provides for the\npossibility that \"numberOfItems\" is empty, you can pass either two or\nthree parameters to this handler.\n\n#### Setting a default value for a parameter\n\nTo use a default value for a parameter, you check whether the parameter\nis empty. If it is, then no value has been passed, and you can simply\nput the desired default into the parameter, as in the following example:\n\n\tlogData theData,theFilePath\n\t\tif theFilePath is empty then\n\t\t\tput \"logfile\" into theFilePath\n\t\tend if\n\t\tput theData into URL (\"file:\" & theFilePath)\n\tend logData\n\nThe \"logData\" handler puts data into a file, whose name and location you\nspecify in the second parameter. If you only provide one parameter, the\nhandler uses the filename \"logfile\" as the default value, and logs the\ndata to that file:\n\n\tlogData field 1,\"/Disk/Folder/data.txt\" *-- specifies a file*\n\tlogData myVariable-- doesn't specify a file, uses \"logfile\"\n\nThe first statement above specifies the second parameter, so it doesn't\nuse the default value. The second statement only specifies one\nparameter, so the data will be placed in \"logfile\" by default.\n\n### Implicit Parameters\n\nIf a statement passes more parameters than the receiving handler has\nparameter variables to hold them, the receiving handler can access the\nextra parameters with the **param** function:\n\n\tfunction product firstFactor,secondFactor\n\t\tput firstFactor \\* secondFactor into theProduct\n\n\t\tif the paramCount \\> 2 then\n\n\t\trepeat with x = 3 to the paramCount\n\t\t\tmultiply theProduct by param(x)\n\t\tend repeat\n\t\tend if\n\t\treturn theProduct\n\tend product\n\nThe function above assumes that two parameters will be passed to be\nmultiplied, but can multiply more numbers by using the **param**\nfunction to access parameters beyond the first two. The following\nstatement uses the \"product\" custom function above to multiply four\nnumbers together:\n\n\tanswer product(22,10,3,7)\n\nWhen the \"product\" handler executes, the first two parameters – 22 and\n10 – are placed in the parameter variables \"firstFactor\" and\n\"secondFactor\". The third parameter, 3, is accessed with the expression\n`param(3)`, and the fourth parameter, 7, is accessed with the expression\n`param(4)`.\n\n### Passing Parameters by Reference\n\nNormally, if you pass a variable name as a parameter, that variable is\nnot changed by anything the called handler does. This is because the\nvariable itself is not passed, only its contents. Passing parameters in\nthis way is called \"passing by value\" because the variable's value--not\nthe variable itself--is what is passed.\n\nIf the name of a parameter variable is preceded with the **@**\ncharacter, that parameter's value is a variable name, rather than the\nvalue in the variable. Changing the parameter variable in the called\nhandler changes the value of the variable in the calling handler. This\nway of passing parameters is called \"passing by reference\", because you\npass a reference to the variable itself instead of just its value.\n\nFor example, the following handler takes a parameter and adds 1 to it:\n\n\ton setVariable @incomingVar\n\t\tadd 1 to incomingVar\n\tend setVariable\n\nThe following handler calls the \"setVariable\" handler above:\n\n\ton mouseUp\n\t\tput 8 into someVariable\n\t\tsetVariable someVariable*-- call by reference*\n\t\tanswer \"someVariable is now:\" && someVariable\n\tend mouseUp\n\nExecuting this **mouseUp** handler displays a dialog box that says\n\"someVariable is now: 9\". This is because, since \"someVariable\" was\npassed by reference to the \"setVariable\" handler, its value was changed\nwhen \"setVariable\" added 1 to the corresponding parameter variable.\n\nYou can pass parameters by reference to any custom function or custom\ncommand, simply by preceding the parameter name with the **@** character\nin the first line of the handler, as in the \"setVariable\" example\nhandler above. Do not use the **@** character when referring to the\nparameter elsewhere in the handler.\n\n> **Note:** If a parameter is passed by reference, you can pass only\n> variable names for that parameter. You cannot pass string literals or\n> expressions using other containers such as fields. Trying to use the\n> \"setVariable\" command described above using the following parameters\n> will cause an execution error:\n\n#### Empty parameters\n\nIf a handler defines a parameter as being passed by reference, you must\ninclude that parameter when calling the handler. Omitting it will cause\nan execution error.\n\n### Returning Values\n\nOnce a function handler has calculated a value, it needs a way to send\nthe result back to the handler that called the function. And if an error\noccurs during a message handler, it needs a way to send an error message\nback to the calling handler.\n\nThe **return** control structure is used within a function handler to\npass the resulting value back to the calling handler. The returned value\nis substituted for the function call in the calling statement, just like\nthe value of a built-in function. Take another look at the example from\nabove:\n\n\tfunction expanded theString\n\t\trepeat for each character nextChar in theString\n\t\t\tput nextChar & space after expandedString\n\t\tend repeat\n\t\treturn char 1 to -2 of expandedString\n\tend expanded\n\nIn the custom function example above, the**return** control structure\nsends the spaced-out string back to the **mouseUp** handler that called\nthe \"expanded\" function.\n\n> **Note:** The **return** control structure stops the handler, so it's\n> usually the last line in the handler.\n\n### Returning an Error from a Message Handler\n\nWhen used in a message handler, the **return** control structure serves\na slightly different purpose: it returns an error message to the calling\nhandler.\n\nWhen used in a message handler, the **return** control structure sets\nthe **result** function for the calling handler. If you want to return\nan error message to the calling handler, use the **return** control\nstructure within the message handler.\n\nHere's an example of a message handler that displays a dialog box:\n\n\ton echoAMessage\n\t\task \"What do you want to show?\"\n\t\tif it is empty then return \"No message!\"\t\n\t\telse answer it\n\tend echoAMessage\n\nThis handler asks the user to enter a message, then displays that\nmessage in a dialog box. If the user doesn't enter anything (or clicks\nCancel), the handler sends an error message back to the calling handler.\nA handler that uses the \"echoAMessage\" custom command can check the\n**result** function to see whether the command successfully displayed a\nmessage:\n\n\ton mouseUp\n\t\techoAMessage\n\t\tif the result is empty then beep\n\tend mouseUp\n\nThe **result** function is also set by many built-in commands in case of\nan error. If you check the **result** in a handler, the value belongs to\nwhatever command – built-in or custom – that set it last, so if you're\ngoing to check the **result**, be sure to do so right after the command\nwhose success you want to check.\n\n### Summary\n\nIn this topic, you have learned that:\n\nA command instructs the application to do something, while a function\nrequests the application to compute a value.\n\nYou create a custom command or custom function by writing a handler for\nit.\n\nValues that you pass to a handler are called parameters.\n\nTo pass a parameter by reference, you precede its name with an **@**\nsign in the first line of the handler.\n\nWhen used in a function handler, the **return** control structure\nreturns a value.\n\nWhen used in a message handler, the **return** control structure returns\nan error message that can be accessed with the **result** function.\n\n## Variables\n\nA variable is a place to store data that you create, which has no\non-screen representation. Variables can hold any data you want to put\ninto them. One way to think of a variable is as a box with a name on it.\nYou can put anything you want into the box, and take it out later, by\nsimply providing the variable's name:\n\n\tput 1 into thisThing -- a variable named \"thisThing\"\n\tput thisThing into field ID 234\n\tput \"Hello Again!\" into line 2 of thisThing\n\nBut unlike some other types of *containers*, variables are non-permanent\nand aren't saved with the stack. Instead, variables are automatically\ndeleted either when their handler is finished running or when you quit\nthe application (depending on the variable's *scope*). You can also use\nthe **delete variable** command to delete a variable. When a variable is\ndeleted, not only the content of the variable disappears, but also the\nvariable itself--the \"box\".\n\n> **Tip:** To save a variable's value, set a custom property of the\n> stack to the value of the variable in your applications\n> **closeStackRequest** or **shutDown** handler. To restore the\n> variable, put the custom property into a variable in the application's\n> **startUp** or **openStack** handler.\n\n### Variable Scope\n\nThe *scope* of a variable is the part of the application where the\nvariable can be used. If you refer to a variable in a handler that's\noutside the variable's scope, you'll get either an execution error or an\nunexpected result.\n\nThere are three levels of variable scope: **local**, **scriptlocal**,\nand **global**. Every variable is one of these three types. The\ndifference between these scopes is in where they can be used and how\nlong their value lasts.\n\n### Local Variables\n\nA local variable can be used only in the handler that creates it. Once\nthe handler finishes executing, the variable is deleted. The next time\nyou execute the handler, the variable starts from scratch: it does not\nretain what you put into it the last time the handler was executed.\n\nTo create a local variable, you simply put something into it. If you use\nthe **put** command with a variable name that does not yet exist, the\nvariable is automatically created as a local variable:\n\n\tput true into myNewVar -- creates variable named \"myNewVar\"\n\n> **Tip:** While you can use almost any word that isn’t a LiveCode\n> language word – also known as a *reserved word* – for a variable name,\n> it will help you greatly if you get into the habit of naming variables\n> logically and consistently. For details of what names are allowed for\n> variables, see the section on *Variable Names* below. For some\n> recommendations on naming variables, see the section on \n> *Tips for Writing Good Code*, below.\n\nAlternatively, you can create a local variable explicitly by declaring\nit using the **local** command inside a handler:\n\n> **Important:** If you use a local variable in one handler, and that\n> handler calls another handler, you can't use the local variable in the\n> second handler. If you use a variable with the same name, LiveCode\n> creates a second variable that is local to the second handler. But the\n> two local variables don't affect each other, because they're in\n> different handlers.\n\n\tlocal myNewVar -- creates variable named \"myNewVar\"\n\tput true into myNewVar -- puts a value into \"myNewVar\".\n\nOne common source of bugs involves misspelling a local variable name.\nNormally, doing so doesn't produce an execution error, because if you\nuse a variable that doesn't exist, LiveCode creates it automatically.\nThis means that if you misspell a variable name, LiveCode creates a new\nvariable with the mispelled name. Such a bug may be difficult to track\ndown because it can result in a variable having the wrong value without\ncausing an error message.\n\nTo prevent this problem, you can require all local variables to be\ndeclared with the **local** command. You do this by turning on \n**Script -\\> Variable Checking** in the Code Editor menu bar. \nIf this option is on, trying to use a local variable that doesn't exist\nwill cause an execution error, instead of automatically creating it. Any\nmisspelled variable names will therefore cause an obvious execution\nerror when their handler is executed, making them easy to find.\n\nLocal variables are deleted when the handler that they're used in\nfinishes executing. You can also use the **delete variable** command to\ndelete a local variable.\n\n### Script Local Variables\n\nA script local variable can be used in *any handler* in an object's\nscript. You cannot use a script local variable in handlers in other\nobjects' scripts. Unlike a local variable, a script local variable\nretains its value even after a handler finishes executing.\n\nTo create a script local variable, you must use the **local** command in\nthe script, but outside any handler. We recommend you always declare\nscript local variables at the top of a script so they in one place and\neasy to find:\n\n\tlocal mySharedVariable\n\ton mouseDown\n\t\tput 2 into mySharedVariable\n\tend mouseDown\n\n\ton mouseUp\n\t\tanswer mySharedVariable *-- displays \"2\"*\n\tend mouseUp\n\n> **Note:** If you put the **local** command in a handler, instead of\n> outside any handler, it creates a local variable instead. The command\n> creates a script local variable only if you put it in the script but\n> not within a handler.\n\nYou can also use the **delete variable** command to delete a script\nlocal variable.\n\n### Global Variables\n\nA global variable can be used in any handler, *anywhere* in the\napplication. Unlike a *local* variable, a global variable retains its\nvalue even after the handler that created it finishes executing. Unlike\na *script local* variable, a global variable can be used by any handler\nin any object's script.\n\nThe same global variable can be used by any stack during a session. You\ncan declare a global variable in one stack, and use it in others.\n\nTo create a global variable, you must declare it using the **global**\ncommand:\n\n\tglobal someGlobalSetting\n\nYou must also use the **global** command at the start of a handler to\nmake an existing global variable *available* to a handler. While a\nglobal variable can be used by any handler, you must do this in any\nhandler you are going to use it in. If you don't declare a global\nvariable before using it, the handler will not take the global\nvariable's existence into account, and will simply create a local\nvariable with the same name.\n\nYou can use the **global** command either inside a handler, or outside\nany handler at the top of a script (like a script local). If you use the\ncommand in a handler, the global variable can be used by any statement\nin that handler. If you use the command in a script but outside any\nhandler, the global variable is available to every handler in that\nscript.\n\nThe following example shows the use of a global variable in a button\nscript. In this example, the variable is declared outside any handler,\nso the individual handlers don't need to declare it again:\n\n\tglobal myGlobal -- declares global for the whole script\n\ton mouseDown -- can use \"myGlobal\"\n\t\tput 1 into myGlobal\n\tend mouseDown\n\n\ton mouseUp -- can use \"myGlobal\"\n\t\tadd 2 to myGlobal\n\t\tanswer myGlobal-- displays \"3\"\n\tend mouseUp\n\nTo use the same global variable in a handler where the variable isn't\ndeclared in the script, you must place the **global** declaration in the\nhandler:\n\n\ton mouseUp -- in another button's script\n\t\tglobal myGlobal\n\t\tadd 5 to myGlobal\n\t\tanswer myGlobal\n\tend mouseUp\n\nIf you click the first button, then the secoond, the second button\ndisplays the number 8.\n\nAs with script local variables, we recommend you place all **global**\ndeclarations in scripts at the top of the script, making the\ndeclarations easy for you to find later.\n\n> **Tip:** You can get a list of existing global variables with the\n> **globalNames** function. You can also choose \n> **Development \\> Variable Watcher** to see a list of global variables\n> and change their values. Or you can get the value using the Message \n> Box.\n\nGlobal variables are automatically deleted when you quit the\napplication. You can also use the **delete variable** command to delete\na global variable.\n\n### Variable Names\n\nThe names of variables must consist of a single word and may contain any\ncombination of letters, digits, and underscores (\\_). The first\ncharacter must be either a letter or an underscore. You cannot use any\nLiveCode language word as a name of a variable.\n\nHere are some examples of **legal** variable names:\n\n\tsomeVariable\n\tpicture3\n\tmy\\_new\\_file\n\t_output\n\nHere are some names that **cannot** be used as variable names:\n\n\t3rdRock -- illegal as starts with a digit\n\tthis&That -- illegal as \"&\" cannot be used\n\tMy Variable –- illegal as it is more than one word\n\nAvoid giving a variable the same name as a custom property. If you refer\nto a custom property, and there is a variable by the same name, LiveCode\nuses the contents of the variable as the name of the custom property.\nGenerally this will produce unexpected results.\n\nGlobal variables whose names begin with \"gRev\" are reserved by the\nLiveCode development environment.\n\nSee the section on *Tips for Writing Good Code* below for advice on \nchoosing variable names.\n\n### Special Variable Types\n\nMost of the time, you use variables that you create yourself, using the\n**local** or **global** commands, or simply by putting a value into a\nnew variable in order to create it.\n\nLiveCode also creates certain types of variables automatically:\n*parameter* variables, *command-line* variables, *environment*\nvariables, and the special variable **it**.\n\n#### Parameter variables\n\nIn a handler for a custom command or custom function, you can define\nparameters on the first line of the handler. For example, the following\nhandler defines two parameters named \"thisThing\" and \"thatThing\":\n\n\ton myHandler thisThing,thatThing\n\t\tadd thisThing to thatThing\n\t\tsubtract thatThing from field 2\n\tend myHandler\n\nWhen you use the custom command or custom function, you can pass values \nto it using the parameters:\n\n\tmyHandler 15,4+1\n\t-- puts \"15\" into the parameter \"thisThing\",\n\t-- and puts \"5\" into the parameter \"thatThing\"\n\nWhen named parameters are used in a handler, they are called parameter\nvariables. Within the handler, the parameters can be used in the same\nway as local variables: you can get their value, use them in\nexpressions, and put data into them.\n\nLike local variables, parameter variables persist only as long as the\nhandler is executing.\n\n#### Environment variables\n\nMost operating systems that LiveCode supports provide information about\nthe operating environment in *environment* variables.\n\nYou can access environment variables by prepending the **$** character\nto the variable's name. For example, the following statement gets the\ncontents of the LOGNAME environment variable, which holds the current\nuser's login name:\n\n\tget $LOGNAME\n\nSee your operating system's technical documentation to find out what\nenvironment variables are available.\n\nYou can also create your own environment variables by prepending the\n**$** character to the new environment variable's name:\n\n\tput field 3 into $MYENVVAR\n\n> **Note:** Environment variables behave like global variables and can\n> be used in any handler. However, you do not need to use the **global**\n> command to declare them before using them.\n\nThe environment variables that you create this way are available to the\napplication, and are also exported to processes started up by the\n**shell** function or the **open process** command.\n\n#### Command-line argument variables\n\nIf you start up the application from a command line, the command name is\nstored in the variable `$0`and any arguments passed on the command line\nare stored in numbered variables starting with the **$** character.\n\nFor example, if you start the application by typing the following shell\ncommand:\n\n\tmyrevapp -h name\n\nthen the variable `$0`contains \"myrevapp\" (the name of the application),\n$1 contains \"-h\", and `$2`contains \"name\".\n\n> **Note:** Command-line argument variables behave like global variables\n> and can be used in any handler. However, you do not need to use the\n> **global** command to declare them before using them.\n\n#### The special variable \"it\"\n\nThe **it** variable is a special local variable used by LiveCode to\nstore certain results.\n\nCertain commands--such as **get**, **convert**, **read from file**,\n**ask**, and **answer**--put their results in this special variable. For\na complete list of commands that use the **it** variable, see the entry\nfor **it** in the LiveCode Dictionary. The following example shows how\nthe **answer** command uses the **it** variable:\n\n\ton mouseUp \n\t\tanswer \"Go where?\" with \"Backward\" or \"Forward\" \n\t\t-- the answer command puts the button the user clicked \n\t\t-- into the it variable:\n\t\tif it is \"Backward\" then \n\t\t\tgo back \n\t\telse \n\t\t\tgo next \n\t\tend if\n\tend mouseUp\n\nYou can use the **it** variable in the same way as any other local\nvariable, using the **put** command to put things into it and using the\nvariable in expressions to work with the contents.\n\n### Array Variables\n\nA variable can hold more than a single value. A variable that holds more\nthan one value is called an array, and each of the values it holds is\ncalled an element. Each element has its own name (called the element's\nkey).\n\nIf you think of a variable as a box with a name, you can think of an\narray as a box with compartments inside it. Each compartment is an\n*element*, and each compartment has a name, or *key*, of its own.\n\nYou specify an element of an array variable by using the variable name\nalong with the element's key. You enclose the key in square brackets.\nThe key may be a name, number or variable. Here's an example that shows\nhow to put data into one element of an array:\n\n\tput \"ABC\" into myVariable[\"myKeyName\"]\n\n> **Note:** If you use a key that's not a number or variable, you should\n> enclose the key's name in double quotes whenever you refer to it. This\n> prevents problems in case there is a variable or reserved word with\n> the same name.\n\nYou can use any element of an array variable in the same way you use the\nwhole variable: put data into the element (or before or after it) and\nfind out what data it contains. In this way, any element of a variable\nis like a variable in and of itself.\n\nArray elements may contain nested or sub-elements, making them\nmulti-dimensional. This type of array is ideal for processing\nhierarchical data structures such as trees or XML. To access a\nsub-element, simply declare it using an additional set of square\nbrackets.\n\n\tput \"ABC\" into myVariable[\"myKeyName\"][“aChildElement”]\n\nYou may nest elements within themselves to any number of levels.\n\n#### Deleting Elements of an Array\n\nYou use the **delete variable** command to remove one element from an\narray variable, in the same way you delete a variable. To delete an\nelement, you specify both the variable and the element's key:\n\n\tdelete variable myVar[\"myElement\"] delete variable\n\tmyVar[“myElement”][“child1”]\n\nThis statement removes the element named \"myElement\" from the variable\n\"myVar\", but does not delete the other elements in the array.\n\n#### Listing the Elements in an Array\n\n> **Tip:** To delete the contents of an element without deleting the\n> element itself, put **empty** into the element:\n\n\tput empty into myVar[\"myElement\"]\n\nYou use the **keys** function to list the elements in an array variable.\nThe **keys** function returns a list of elements, one per line:\n\t\n\tput the keys of myArray into listOfElements\n\n#### Listing Nested Elements within an Element\n\nYou use the **keys** function to list the child elements of an element\nwithn an array variable. The **keys** function returns a list of\nelements, one per line:\n\n\tput the keys of myArray[“node25”] into listOfElements\n\n\n#### Transforming a List of Data into an Array\n\nThe **split** command separates the parts of a variable into elements of\nan array. You can specify what character in the list you want the data\nto be split by. The data will be converted into a set of elements named\naccording to where it is split. For example:\n\n\tput \"A apple,B bottle,C cradle\" into myVariable\n\tsplit myVariable by comma and space\n\nWill result in the following:\n\n| KEY | VALUE  |\n|-----|--------|\n| A   | apple  |\n| B   | bottle |\n| C   | cradle |\n\nFor more details, see the **split** command in the LiveCode Dictionary.\n\n#### Combining the Elements of an Array into a List\n\nThe **combine** command combines the elements of the *array* into a \nsingle variable. After the command is finished executing, the variable \nspecified by *array* is no longer an array.\n\nFor example:\n\n\tcombine myArray using return\n\nWill combine the contents of the each element of the original *array* so \nthat they appear on a separate line.\n\nFor more information, see the **combine** command in the LiveCode \nDictionary.\n\n#### Nesting an Array\n\nYou may place an entire array as a child of an element by putting an \narray variable into an element of another array. For example:\n\n\tput tMyArray into tBigArray[“node50”]\n\nWill result in the entire array being placed as a child of `node50` \nwithin tBigArray.\n\n#### More Information\n\nFor more information about using array variables, see the guide on \n*Processing Text and Data*.\n\n### Constants\n\nA constant is a value that has a name. Like a variable, a constant is\nset in your script. Unlike variables, constants cannot be changed.\n\nWhen you use a constant, LiveCode substitutes the value of the constant\nfor its name. The following example uses a constant named \"slash\":\n\n\tput slash after field \"Expressions\" *-- displays \"/\"*\n\nYou create a new constant using the **constant** command.\n\nYou cannot put anything into a constant once it's been created.\n\n#### Built-in constants\n\nThe LiveCode language defines several constants, such as **return**,\n**space**, and **comma**, for characters that have special meaning in\nscripts and therefore can't be entered literally into an expression.\n\n> **Tip:** To see a list of all built-in constants, open the\n> Documentation window, click LiveCode Dictionary, and choose\n> \"Constants\" from the menu at the top of the window.\n\n#### User-defined constants\n\nYou can also define your own constants using the **constant** command:\n\n\tconstant myName=\"Joe Smith\"\n\nLike variables, constants can have different scope depending on how they\nare created. A constant can be defined as either a local constant or a\nscript local constant:\n\nIf you place the **constant** command in a handler, the constant can be\nused only in that handler.\n\nIf you place the **constant** command in a script, but outside any\nhandler, the constant can be used in any handler in the script.\n\n## Containers, Operators & Sources of Value\n\n### What is a Container?\n\nContainers are sources of information that can be edited using chunk\nexpressions. In addition to variables, LiveCode has six other container\ntypes: fields, buttons, images, URLs, the selection, and the message box.\n\nFields, buttons, and imported images are all LiveCode objects. All\ndisplay their content on the screen, in different ways, and the contents\nof all three are saved when you save the stack they are in. URLs refer\nto external resources (either files on the system, or items on an\nInternet server). The Message Box is a special container that's part of\nthe development environment. All of these containers are covered in more\ndetail in their respective sections.\n\n### Setting and Retrieving Data from Containers\n\nYou use the **put** command to place data into a container, or to place\ndata from a container into another container or variable. Containers\nsupport the use of chunk expressions, the ability to specify a portion\nof a container by referring to it in English. For more details, see the\nsection on *Chunk Expressions*.\n\n### What are Sources of Value?\n\nSources of value are like containers. They can be retrieved using the\n**get** command. However unlike containers, they cannot be set using the\n**put** command. Sources of value include properties, function calls,\nliteral strings, and constants.\n\n### Getting and Setting Properties\n\nYou can use the **get** command to retrieve data from properties.\nProperties may be set using the **set** command. When retrieving data\nyou may use chunk expressions. However you must set a property in its\nentirety, using the set command. Properties are covered in more detail\nin the section on *Properties*. Examples of retrieving and setting\nproperties are to be found throughout this *User’s Guide*.\n\n### What are Literal Strings?\n\nA literal string is a string of characters whose value is itself. If the \nstring is a number, the value is that number.\n\n### Using Literal Strings\n\nWhen you use a literal string in an expression, LiveCode simply \nsubstitutes the string for itself:\n\n\tput \"Hello World!\" into field 1\n\tget 1 + 2 + it\n\tput 1 - 4.234 into field \"Result\"\n\n#### Quoting strings\n\nLiteral strings that consist of more than one word or are reserved words\nin the LiveCode language must be enclosed in double quotes:\n\n\tput \"This is a test\" into myVar -- works\n\tput This is a test into myVar -- **DOESN'T WORK - not quoted**\n\tput That into myVar -- works\n\tput This into myVar -- **DOESN'T WORK - reserved word**\n\nIn some contexts, you can use an unquoted one-word literal string\nwithout causing a script error. However, you should make a practice of\nalways quoting literal strings (other than numbers), because it ensures\nthat the statement will continue to work properly even if the string\nbecomes a reserved LiveCode word in the future.\n\nIf the **Script -\\> Variable Checking** option is set to true, compiling\na script that contains an unquoted literal string causes a script error.\n\n### What are Operators?\n\nUse operators to put together, compare or perform an operation on data.\nUse a *String Operator* to combine data. Use a *Numeric Operator* to\nperform a calculation. Finally, use a *Logical Operator* to return true\nor false.\n\n### Numeric Operators\n\nNumeric operators produce a number as their result. Numeric operators\ninclude the arithmetic operators (**+**, **-**, **\\***, **/**, **mod**,\n**div**, and **^**) and the bitwise operators (**bitAnd**, **bitOr**,\n**bitXOr**, and **bitNot**). For individual usage instructions, look up\nthe operator you wish to use in the LiveCode Dictionary.\n\nFor example:\n\n\tput \"1+2 =\" && 1+2 into field \"Eq\" -- displays \"1+2 = 3\"\n\n#### String operators\n\nString operators produce a string of characters as their result. String \noperators are the concatenation operators (**&**, **&&**, and **,**).\n\n\tput \"1+2 =\" && 1+2 into field \"Eq\" -- displays \"1+2 = 3\"\n\n### Logical Operators\n\nLogical operators produce either \"true\" or \"false\" as their result.\n\nLogical operators include the comparison operators (**=**, **\\<\\>**,\n**\\<**, **\\>**, **\\<=**, **\\>=**), existence operators (**there is a**,\n**there is no**, **is in**, **is not in**, **is among**, \n**is not among**, **contains**), data type operators (**is a**, \n**is not a**), geometry operators (**is within**, **is not within**), \nand basic logical operators (**and**, **or**, **not**).\n\n\tif the platform is \"MacOS\" and field \"Time\" < zero then ...\n\n### Binary versus Unary Operators\n\nOperators can use either one argument (a unary operator) or two\narguments (a binary operator):\n\n\t\"a\" & \"b\" -- & is binary \n\tthere is a field \"c\" -- **there is a** is unary\n\nThe **bitNot**, **there is a**, **there is no**, **is a**, **is not a**,\nand **not** operators are unary operators. All other operators are\nbinary operators.\n\n### Conversion of Values\n\nLiveCode converts values in expressions to whatever type of data is\nneeded for the operation. This conversion happens automatically, so you\ndon't need to know what type of data you are dealing with in advance\n(something that in other languages is called \"type casting\").\n\nFor example, suppose you have the following statement:\n\n\tput char 2 of \"123\" + char 3 of \"456\" into field 3\n\nCharacter 2 of the literal string \"123\" is the single-character string\n\"2\", and character 3 of the literal string \"456\" is the single-character\nstring \"6\". When LiveCode uses the **+** operator, it automatically\nconverts these strings to numbers so that they can be added together.\nThen it converts the resulting number back to a string so that it can be\nplaced in a field as text.\n\n### Operator Precedence\n\nWhen you combine sources of value using operators, LiveCode evaluates\neach source of value in the expression. Next, it applies any operators\nto arrive at a final value for the expression. LiveCode does not\nnecessarily apply all the operators in right-to-left order.\n\nInstead, it uses the operator precedence order to determine how to\ncompute expressions that include more than one operator. Precedence\ndetermines the order in which LiveCode carries out calculations in\nexpressions. If an expression contains more than one operator, the\noperators with higher precedence are calculated before operators with\nlower precedence.\n\nFigure 49 – Operator Precedence\n\n| &nbsp;| &nbsp;| &nbsp;|\n|----------------|--------------------------|------------------------------------------------------------------------------------------------------------------------------------|\n| Grouping       | **() **                                                             | Any part of the expression in parentheses is evaluated first. If parentheses are nested, the innermost values are evaluated first. |\n| Unary          | **-**<br>**not**<br>**bitNot**<br>**there is a**<br>**there is no** | Next, unary operations (that act on only one operand) are done. This includes unary minus (which makes a number negative).         |                          \n| Exponentiation | **^**                                                               | Next, exponentiation operations are done.                                                                                          |\n| Multiplication | **\\***<br>**/**<br>**div**<br>**mod**                               | Multiplication and division are done next. These are numeric operators and result in a number.                                     |\n| Addition       | **+**<br>**-**                                                      | Addition and subtraction are done next. These are numeric operators and result in a number.                                        |\n| Concatenation  | **&**<br>**&&**<br>**,**                                            | Operations that join two strings are done next. These are string operators and result in a string.                                 |\n| Comparison     | **\\<**<br>**\\<=**<br>**\\>**<br>**\\>=**<br>**contains**<br>**is among**<br>**is not among**<br>**is in**<br>**is not in**<br>**is within**<br>**is not within**<br>**is a**<br>**is not a **  | Operations that compare two values are done next. These are logical operators and result in either true or false.                  |\n| Equality       | **=, is**<br>**\\<\\>, !=, ?, is not**  \t\t\t\t\t\t\t   | Operations that compare two values for equality are done next. These are logical operators and result in either true or false.     |\n| bitAnd         | **bitAnd**                                                          | bitAnd operations are done next.                                                                                                   |\n| bitXOr         | **bitXOr**                                                          | bitXOr operations are done next.                                                                                                   |\n| bitOr          | **bitOr**                                                           | bitOr operations are done next.                                                                                                    |\n| and            | **and**                                                             | and operations are done next.                                                                                                      |\n| or             | **or**                                                              | or operations are done last.                                                                                                       |\n| function calls |                                                                     | Functions are evaluated after all possible operators in the function’s parameters are evaluated.                                   |\n\n### Using the Grouping Operator *()*\n\nSuppose you want to change the precedence used in an expression. The\ngrouping operator () has higher precedence than all other operators, so\nyou can use it to change the order in which operators are evaluated. In\nother words, if you enclose part of an expression in parentheses, any\noperations inside the parentheses are evaluated before anything else\nhappens.\n\nFor example, function calls have higher precedence than division, so the\nexpression the sin of 1/4 means \"get the sine of 1, then divide it by\n4\":\n\n\tget the sin of 1/4 -- does the sin function first\n\nIf you want the sine of 1/4, you need to change the order of evaluation\nso that the division is done first. You do this by surrounding the part\nyou want evaluated first with parentheses:\n\n\tget the sin of (1/4) -- does the division first\n\nIf parentheses are nested, the expression within the innermost set of\nparentheses is evaluated first.\n\n### Factors and Expressions\n\nAn expression is any source of value, or combination of sources of\nvalue. Any of the sources of value discussed above – containers,\nproperties, function calls, literal strings, and constants – are simple\nexpressions. You use operators to combine sources of value to produce\nmore complex expressions.\n\n### Defining Factors\n\nA factor is the first fully resolvable portion of an expression. (All\nfactors are expressions, but not all expressions are factors.) A factor\ncan be either a source of value, or an expression that combines sources\nof value but doesn't include any binary operators outside parentheses.\nEnclosing an expression in parentheses turns it into a factor.\n\nThese examples show some expressions, along with the first factor in\neach expression, to help you see the distinction:\n\n| Expression             | First factor   |\n|------------------------|----------------|\n| 3 + 4                  | 3              |\n| (3 + 4)                | (3 + 4)        |\n| (3 + 4)/field 4        | (3 + 4)        |\n| field 6 \\* pi          | field 6        |\n| sin of pi/4            | sin of pi      |\n| sin(pi/4)              | sin(pi/4)      |\n| sin(pi/4) \\* exp2(12)  | sin(pi/4)      |\n| whole world            | whole          |\n| \"whole world\"          | \"whole world\"  |\n\n#### When it matters\n\nThe distinction between factors and expressions matters when you're \nusing the **the** form of built-in functions, when you use **URL**, and \nwhen you refer to objects.\n\nIf you use the **the** form of a built-in function that has a parameter, \nthe parameter must be a factor, not an expression:\n\n\tget the sqrt of 4 + 5 -- yields 7\n\tget sqrt(4+5) -- yields 3\n\tget the sqrt of (4 + 5) -- yields 3\n\nIn the first example above, although we intended to get the square root\nof 9, we actually ended up with the square root of 4. This is because\nthe expression `4 + 5` is not a factor (because it contains a binary\noperator that's not inside parentheses). The first factor in the\nexpression `4 + 5` is 4, so the first example gets the square root of 4\n(which is 2), then adds 5 to that result.\n\nThe second example avoids this problem because it doesn't use the \"the\"\nform of the function. Since the parameter is enclosed in parentheses,\nyou can use either a factor or an expression, and obtain the intended\nresult, the square root of 9.\n\nIn the third example, we turn the expression `4 + 5` into a factor by\nsurrounding it with parentheses. Since the parameter is now a factor, we\ncan get the correct result, even using the **the** form of the function.\n\nWhen referring to URLs, the URL is a factor:\n\n\tget URL \"file:myfile.txt\" -- works\n\tget URL \"file:\" & \"myfile.txt\" -- **DOESN'T WORK**\n\tget URL (\"file:\" & \"myfile.txt\") -- works\n\nIn the first example, the URL specified is a factor because it is a \nsimple string with no operators.\n\nThe **URL** in the second example is not a factor, because it includes \nthe binary operator **&**, so the **get** command tries to get the URL \n\"file:\" – which is nonexistent--and concatenate the content of that \n**URL** with the string \"myfile.txt\".\n\nIn the third example, we turn the **URL** into a factor by surrounding \nit with parentheses, providing the expected result.\n\nWhen referring to **cards** or **backgrounds**, the **name**, **number** \nor **ID** of the object is an expression:\n\n\tgo card 1 + 1 -- goes to card 2\n\tgo card 3 of background \"Data\" && \"Cards\"\n\t-- goes to first card with the group \"Data Cards\"\n\nHowever, when referring to controls (including groups) or stacks, the \n**name**, **number**, or **ID** of the object is a factor:\n\n\tanswer field 1 + 10 -- displays field 1 content + 10\n\tanswer field (1 + 10) -- displays field 11 content\n\tselect button \"My\" && \"Button\" -- **DOESN'T WORK**\n\tselect button (\"My\" && \"Button\") – works\n\n\n## Making Decisions\n\nYou make decisions using the **if … then … else** control structure or, \nif you want to choose from a list of options, use the **switch** \ncontrol structure.\n\n### If … then … else\n\nUse the **if** control structure to execute a statement or list of\nstatements under certain circumstances. For example, you may want your\napplication to respond differently depending on a user action.\n\nThe **if** control structure always begins with the word **if**. There \nare four forms of the **if** control structure:\n\n\tif condition then statement [else elseStatement]\n\nThis form may have a line break before the words `then` or `else` or \nboth.\n\n\tif condition then \n\t\tstatementList \n\t[else \n\t\telseStatementList] \n\tend if\n\n\tif condition \n\tthen statement \n\t[else \n\t\telseStatementList \n\tend if]\n\n\tif condition then \n\t\tstatementList \n\telse elseStatement\n\nThe *condition* is any expression that evaluates to true or false. The\n*statementList* or *elseStatementList* consists of one or more LiveCode\nstatements, and can also include if, switch, try, or repeat control\nstructures. The *statement* or *elseStatement* consists of a single\nLiveCode statement.\n\nIf the *condition* evaluates to true, the *statement* or *statementList*\nis executed; if the *condition* evaluates to false, the *statement* or\n*statementList* is skipped. If the if control structure contains an else\nclause, the *elseStatement* or *elseStatementList* is executed if the\n*condition* is false.\n\nIf one if control structure is nested inside another, use of the second\nform described above is recommended, since the other forms may cause\nambiguities in interpreting which else clause belongs with which if\nstatement.\n\nThe if control structure is most suitable when you want to check a\nsingle *condition*. If you need to check for multiple possibilities,\ndoing something different for each one, use a switch control structure\ninstead.\n\n### Switch\n\nUse the **switch** control structure when you want to choose among \nseveral possible values for an expression and then execute a set of \nstatements that depends on the value.\n\n\tswitch [switchExpression] \n\tcase {caseValue | caseCondition}\n\t\t[statementList] \n\t[default defaultStatementList] \n\tend switch\n\nThe **switch** control structure begins with the word switch on a single\nline, with an optional *switchExpression*. The **switch** line is\nfollowed by one or more case sections. Each case section begins with the\ncase keyword, followed by either a *caseValue* (if a *switchExpression*\nwas included on the **switch** line) or a *caseCondition* (if no\n*switchExpression* was included). If the *caseValue* is equal to the\n*switchExpression*, or the *caseCondition* evaluates to true, LiveCode\nbegins executing the following statements.\n\nThe **case** sections may be followed by an optional default section. If\nno **break** statement has been encountered yet in the switch control\nstructure, the statements in the default section are executed. The\n**switch** structure ends with an end switch statement.\n\nThe *switchExpression* is any expression. The *caseValue* is any\nexpression. If the *caseValue* evaluates to the same value as the\n*switchExpression*, the condition is matched for that case section. The\n*caseCondition* is any expression that evaluates to true or false. (If\nthe *caseCondition* evaluates to true, the condition is matched for that\ncase section. Each *statementList* consists of one or more LiveCode\nstatements, and can also include if, switch, try, or repeat control\nstructures. The *defaultStatementList* consists of one or more LiveCode\nstatements.\n\nFlow of control in a **switch** structure is less complicated than it\nlooks. In general, when LiveCode enters a **switch** control structure,\nit looks for the first case section whose *caseValue* is equal to the\n*switchExpression*, or whose *caseCondition* is true. When a matching\ncondition is found, all statements following it are executed--even\nstatements in another case section--until either a break statement is\nencountered or the **switch** control structure ends.\n\nThis means that if you do not end a **case** section's *statementList*\nwith a break statement, the statements in all the following case\nsections (and the default section) are executed even if those case\nsections don't have a matching *caseValue* or a true *caseCondition*.\nOccasionally, this behavior is useful. However, in most cases, you\nshould place a break statement at the end of each *statementList*. This\nensures that only one *statementList* is executed, and the rest are\nskipped.\n\nThis also means that you can attach more than one *caseValue* or\n*caseCondition* to the same *statementList*, simply by placing one case\nline above the next. The following example beeps if the current card is\neither the last or first card, and goes to the next card otherwise:\n\n\tswitch (the number of this card) \n\tcase 1 \n\tcase (the number of cards)\n\t\t-- either of the above conditions execute the following \n\t\t-- statement:\n\t\tbeep \n\t\tbreak \n\tdefault \n\t\tgo next card \n\tend switch\n\nThere is no limit to the number of **case** sections you can include in\na **switch** control structure, although the more case sections there\nare, the more expressions LiveCode must evaluate and the more slowly the\n**switch** structure executes.\n\n## Extending the Message Path\n\nThis section deals with how to extend the message path, either by adding\ncode libraries to the message path, or by sending messages directly to\nobjects that are not currently in the message path.\n\n### Creating a Code Library\n\nA library is a set of custom commands and custom functions for a\nspecific application or a specific area of functionality. You can create\na library for any purpose you want, and put any custom commands and\nfunctions into it that you need. Libraries are typically used to store\nroutines that are common across your application. You can also exchange\nuseful libraries with other developers.\n\nTo create a code library, place the handlers you want to use in any\nobject that's available in your stack. This object is now a code\nlibrary. Then use the **insert script** command to add that object to\nthe message path. To insert the script of a stack into the message path,\nuse the **start using** command. Typically you would run one of these\ncommands as your application is starting up, so that all the scripts can\naccess the libraries you require. Libraries do not need to be in the\nsame stack or even stack file, you can load any stack on disk and then\nload the libraries within it to make them available to all running\nstacks. This makes it easy to design your application in modules, share\ncode with other developers or update your application libraries without\nmodifying your application. You can design your standalone application\nto work in the same way, making it easy to update it using a small patch\nutility, i.e. without having to reinstall the entire application.\n\n### Using backScripts\n\nTo make the script of an object available to any other handler in\nLiveCode:\n\n\tinsert script of card \"Library\" into back\n\nThe script of an object that's been inserted into the back, as in the\nabove example, is called a **backScript**. Such an object is placed last\nin the message path of all objects. It receives messages after any other\nobject, and just before the engine receives the message. The\n**backScript** object remains in the message path until the end of the\nsession (or until you remove it with the **remove script** command.)\n\nBecause a **backScript** receives messages after all other objects in\nthe message path, if you place a handler in the **backScript**, it\neventually gets all the corresponding messages, no matter what object\nsent them, unless another object handles them first.\n\n### Using frontScripts\n\nYou can also extend the message path by placing objects into the front\nof the message path, before any other object. The script of such an\nobject is called a frontscript, and you use the **insert script**\ncommand to place the object in the front:\n\n\tinsert script of button \"Interceptor\" into front\n\nBecause the object is in the front of the message path, it receives\nmessages even before the target of the message. For example, if you\nclick a button, any objects in the front of the message path receive the\n**mouseUp** message first, before the button. If you place a handler in\na frontscript, it receives all the corresponding messages before any\nother object can handle them.\n\nUse a frontscript when you want to be able to handle a message even if\nthe target object has a handler for it. For example, the LiveCode\ndevelopment environment displays a contextual menu when you\n**Control-Shift-right-click** an object. It does this with a\n**mouseDown** handler in a frontscript. Whenever you click an object,\nthe frontscript receives the **mouseDown** message first, and checks\nwhether the needed keys are being pressed. If they are, the handler\ndisplays the contextual menu; the **mouseDown** message is trapped and\ngoes no further. Otherwise, the handler passes the message to the next\nobject in the message path, which is the object you clicked.\n\n### Using a Stack's Script with *start using*\n\nThe **start using** command is similar to the **insert script** command,\nbut can be used only to place stacks, not other object types, in the\nmessage path.\n\nThe **start using** command inserts the stack at the end of the message\npath, *after* the object's stack and main stack, but *before* objects\nthat have been inserted into the back with **insert script**.\n\n### Sending Messages Directly to Objects\n\nIf the handler you want to use is not in the message path, instead of\ninserting it into the path to make it a code library, you can use the\n**send** command to directly **send** a message to the object whose\nscript contains the handler.\n\n> **Tip:** You can use this technique to skip a portion of the message\n> path, by sending the message directly to an object further up the\n> hierarchy.\n\n\ton mouseUp \n\t\t-- in button script \n\t\tsend \"mouseUp\" to this stack \n\tend mouseUp\n\nFor example, suppose you have a handler for a custom command called\n*myCommand* in the script of a button, and you want to execute that\nhandler from a card script. Since the button is not in the card's\nmessage path, you can't simply use the command in the script, because if\nthe *myCommand* message goes through the card's message path, it won't\nfind the handler. The following statement sends the message directly to\nthe button whose script includes the handler:\n\n\tsend \"myCommand\" to button \"Stuff\" of card \"Stuff Card\"\n\n> **Important:** When you send a message to an object, the message path\n> for that message starts with the target object. For example, if a\n> stack script contains a **send** command that sends a message to a\n> button, the message moves through the button's message path, not the\n> stack's.\n\nIf you want to use a custom function whose function handler is not in\nthe message path, you can use the **value** function to specify the\nobject. The **value** function can be thought of as an equivalent of the\n**send** command for function calls.\n\nFor example, if card 1 of a stack contains a function handler called\n\"myFunction\" you can use the function from within the script of card 3\nwith the following statement:\n\n\tget value(\"myFunction(1,2,3)\",card 1)\n\n\n### The *send* Command versus the *call* Command\n\nThe **call** command is similar to the **send** command. Like the\n**send** command, the **call** command sends a message to the specified\nobject, allowing you to use handlers that aren't in the message path.\n\nThe difference between **send** and **call** is how they handle object\nreferences in the handler that is triggered by the sent message. If the\nmessage is sent by the **send** command, object references in the\nhandler are treated relative to the object you sent the message to.\n\nFor example, suppose card 1 of a stack contains the following handler:\n\n\ton showCard \n\t\tanswer the number of this card \n\tend showCard\n\nIf a handler in the script of card 3 uses the **send** command to send a\n\"showCard\" message to card 1, the dialog box displays \"1\", the number of\nthe card the handler is on. However, if the same handler uses the\n**call** command instead, the dialog box displays \"3\", the number of the\ncard that used the **call** command. In other words, handlers that are\ntriggered by the **send** command use the context of the object the\nhandler is in, while handlers that are triggered by the **call** command\nuse the context of the object that triggered the handler.\n\n### Writing reusable code using behaviors\n\nBehaviors are a method to create common functionality between objects\nwithout duplicating the scripts.\n\nAn object with a **behavior** set will act as though its script was set\nto the script of the **behavior** button. If multiple objects share the\nsame behavior, each will have its own set of script local variables. Any\nreferences to **me**, the **owner of me**, etc will resolve to the child\nobject currently executing.\n\nBehavior scripts must be stored in button objects. To set an object’s\nbehavior, refer to the long id of the button containing the behavior\nscript.\n\n## Timer Based Messaging\n\nTimers allow you to schedule events to happen in the future. Use timers\nfor updating the display at regular intervals, processing data in\nchunks, playing animations, displaying status bars, or anywhere where\nyou need to schedule events. Messages can be scheduled with millisecond\nprecision and fire many times a second to create an animation, or can be\nscheduled to arrive hours later. When you schedule an event to be\ndelivered in the future, LiveCode continues to respond to user events as\nnormal. This makes timer based messaging ideal where you want your user\ninterface to remain responsive while doing data processing or updating\nthe display.\n\n### Delivering a Message in the Future\n\nTo deliver a message after a specified time period, use the *in time* \nform of the send command.\n\n\tsend \"updateStatus\" to me in 20 seconds\n\tsend \"updateAnimation\" to me in 33 milliseconds\n\n### Repeating a Timer Message\n\nIf you want to send a message repeatedly, for example to continuously\ndraw frames in an animation, simply send the same message again at the\nend of the message handler. The following example starts an animation\nwhen the button is clicked on, then updates the frame at 30 frames per\nsecond (every 33 milliseconds).\n\n\ton mouseUp \n\t\tupdateAnimation \n\tend mouseUp\n\t\n\ton updateAnimation \n\t\t-- insert code to update animation here \n\t\tsend updateAnimation to me in 33 milliseconds \n\tend updateAnimation\n\nThe result will be that the *updateAnimation* message is sent, it will\nupdate the screen then send itself to itself in a 33 milliseconds. The\nmessage will continue to be delivered indefinitely. Therefore it is\nimportant that you ensure there is an condition in the message handler\nthat will exit when the task is done, without sending the message again.\nAlternatively you can directly cancel any message to stop the loop (see\nthe section *Canceling a Timer Message* below for more details).\n\nTo create a *smooth script driven animation*, you should allow for the\ntime it takes to redraw the display and for any interruptions (e.g.\nanother intensive process causing your message to be delivered late).\nThus it is best to send the message a little more frequently than you\nneed to redraw the screen, and to check each time the message is\nactivated what frame you should currently be on.\n\n\t-– variables will be available to all script handlers\n\tlocal sTotalFrames, sStart\n\n\ton mouseUp\n\t\t-- store the current start time\n\t\tput the milliseconds into sStart\n\t\t-- put the number of frames in your animation here\n\t\tput 100 into sTotalFrames updateAnimation\n\tend mouseUp\n\t\n\ton updateAnimation\n\t\t-- calculate milliseconds since start\n\t\tput the milliseconds – sStart into tElapsedTime\n\t\tput round(tElapsedTime / 33) into tFrameNumber\n\t\t-- calculate current frame number\n\t\tif tFrameNumber > sTotalFrames then\n\t\t\t-- if we have reached the end\n\t\t\tset the currentFrame of image 1 to sTotalFrames\n\t\t\t-- draw the last frame\n\t\t\texit updateAnimation\n\t\t\t-- exit without sending updateAnimation again\n\t\tend if\n\t\n\t\t-- insert code for drawing the screen here\n\t\t-- in this example we assume the animation is a simple\n\t\t-- animated GIF\n\t\t-- but you could have any type of operation here, e.g.\n\t \t-- setting the transform of a vector\n \t\tset the currentFrame of image 1 to tFrameNumber\n\t \t-- send another updateAnimation message\n\t\t send updateAnimation to me in 22 milliseconds\n\tend updateAnimation\n\nFor more example scripts involving timers and animation, see the \n*Sample Scripts* section of the online documentation.\n\n### Canceling a Timer Message\n\nWhen a timer message is sent, **the result** function contains the ID of\nthe message generated. Use the **cancel** command to cancel that\nmessage, preventing it from being delivered. In the following example, a\ndialog will be displayed 20 seconds after the user moves the mouse over\na button. If the mouse moves out of the button before the 20 seconds has\nelapsed, the dialog will not be displayed.\n\n\tlocal LTimerID\n\ton mouseEnter\n\t\tsend \"displayDialog\" to me in 20 seconds\n\t\tput the result into lTimerID\n\tend mouseEnter\n\t\n\ton mouseLeave\n\t\tcancel lTimerID\n\tend mouseLeave\n\t\n\ton displayDialog\n\t\tanswer \"The mouse was over this button for 20 seconds.\"\n\tend displayDialog\n\n\n> **Important:** Ensure you have a way to cancel any pending timer\n> messages. Typically you may want to ensure that a timer is cancelled\n> when the card is closed. For example a timer message that draws an\n> animation on the current card will generate a script error if the card\n> is changed and the message is still sent, as the script will no longer\n> be able to find the objects.\n\n### Displaying a List of Pending Timer Messages\n\nYou can get a list of all the currently pending timer based messages\nusing the **pendingMessages** function.\n\n\tput the pendingMessages into tMessagesList\n\n*tMessagesList* will now contain a list of messages, one per line. Each\nline consists of four items, separated by commas:*the message ID, *the\ntime the message is scheduled for, *the message name, *the long ID\nproperty of the object that the message will be sent to\n\n> **Tip:** You can see a list of all pending messages using the \n*Message Box* pending messages tab – the fifth icon along. For more \ndetails, see the section on the *Message Box*.\n\nFor more details, see the pendingMessages entry in the \n*LiveCode Dictionary*.\n\n> **Tip:** To cancel all currently pending messages indiscriminately,\n> use the following repeat loop:\n\n\trepeat for each line l in the pendingMessages\n\t\tcancel (item 1 of l)`\n\tend repeat\n\n## Tips for Writing Good Code\n\nIts worth taking time to establish some conventions in how you write\ncode. There are many benefits to making your coding practices\nconsistent. Consistently named variables are easier to debug during\ndevelopment because you will always know the scope of a particular\nvariable (whether it's a global, or applies only to the current handler,\netc.). It makes it easier to understand the code you have written when\nyou come to read it 6 months later. By making appropriate use of\nfunctions and libraries, you make your program more modular and\ntherefore easier to modify and add features to in the future. A\ncomprehensive guide to writing good code is beyond the scope of this\nmanual. But we thought it would be helpful to give you some hints and\ntips\n\n#### Variable naming\n\nUse consistent variable names to make your code easier to understand. It\nmay not seem important now, but when you have forgotten how it works 6\nmonths later it will help to make it readable. It also makes it easier\nto exchange you code with other members of the LiveCode community, when\nyou need to get help with something.\n\n| Character | Example | Usage                   |\n|-----------|---------|-------------------------|\n| g         | gVar    | Global variables        | \n| t         | tVar    | Handler-local variables |\n| s         | sVar    | Script-local variables  |\n| p         | pVar    | Parameters              | \n| k         | kVar    | Constants               | \n| c         | cVar    | Custom properties       | \n#### Variable scope\n\nAs a general rule of thumb, use a variable with just enough scope and no\nmore for the task at hand. In other words, if a handler local variable\nis all you need for a calculation, don't use a script local. If a script\nlocal would do, don't use a global. This makes it less likely that you\nwill introduce unexpected errors into your code by using the same\nvariable name for different purposes. A handler local variable only has\nmeaning within that handler so you can safely use the same variable name\nin other handlers.\n\n#### Use of comments\n\nComment your code as you go. Don't write comments where the meaning is\nobvious. But even a sentence next to a complex routine will help you or\nothers to quickly understand it later.\n\n#### Use of functions\n\nIf you're writing a lot of code, consider whether it can be written as a\nseries of functions instead of as a single monolithic handler. This\nmakes it much easier to understand the function of each discrete section\nof code. The more you can make these functions \"black boxes\", that take\ninput and produce output without dependences, the easier it will be if\nyou later want to change how that aspect of the code works.\n\n#### Explicit Variables\n\nIf you're working on a larger code base you may want to turn on the\nVariable Checking option in the Script menu of the Code Editor. This\nmakes LiveCode require that you declare all variables (even script\nlocals) before you can compile your script. It also requires you to\nplace all literal strings in quotes. This method of coding can help you\nto quickly track down errors as you go by making you think a little\nabout what variables you are going to use at an early stage, and\npointing out spelling mistakes.\n\nWhat's most important is that you develop your own consistent style and\nthen stick to it. Once you have been applying some of these techniques\nfor a short time, they will become second nature.\n\nFor a more in-depth look at this subject, we recommend [Fourth World's\nScripting Style Guide](http://www.fourthworld.com/embassy/articles/scriptstyle.html)"
	},	{
	"name":"programming_a_user_interface",
	"display name":"Programming a User Interface",
	"location":"ide",
	"group":"Basic",
	"data":"# Programming a User Interface\n\n## Introduction\n\nThe user interface for your application is often one of its most important features. \nThe *LiveCode Script* guide shows how to build a user interface using LiveCode’s tools \nand development environment. In this guide we look at how you can edit, or even build a \nuser interface programmatically. Everything you can do using the built-in tools you can \nalso do programmatically. You can even create and modify a user interface at run time in \na standalone application, or provide interactive methods for your users to modify \nspecific aspects of your application. This set of capabilities allow you to produce \napplications that construct their interface using XML files or a custom data structure, \nprogrammatically construct aspects of complex interfaces, modify their look using user \nspecified parameters, create themed or skinned interface options, build your own \ninterface editing tools that plug-in to LiveCode’s IDE and much more. You can also create \ncustom objects and attach your own virtual behaviors and custom properties to them. We \nrecommend you spend a little time becoming familiar with building an interface using the \ntools in the development environment before creating or editing an interface \nprogrammatically.\n\n## Referring to Objects\n\nIn general, you can refer to any object by its **name**, **number**, or **ID** property.\n\n### Referring to objects by name \n\nYou can refer to an object using its object type followed by its name. For example, to \nrefer to a button named \"OK\", use the phrase `button \"OK\"`:\n\n```\nset the loc of button \"OK\" to 32,104\n```\n\nTo change an object's name, enter a name in the object's property inspector, or use the \n**set** command to change the object's **name** property:\n\n```\nset the name of field \"Old Name\" to \"New Name\"\nselect after text of field \"New Name\"\n```\n\n### Referring to objects by number\n\nA control's number is its layer on the card, from back to front. A card's number is its \nposition in the stack. A stack's number is the order of its creation in the stack file. \nA main stack's number is always zero.\n\nYou can refer to an object using its object type followed by its number. For example, to \nrefer to the third-from-the-back field on a card, use the phrase \"field 3\":\n\n```\nset the backgroundColor of field 3 to blue\n```\n\nTo change the number of a card or control, change the Layer box in the Size & Position \npane of the object's property inspector, or use the **set** command to change the object's \n**layer** property:\n\n```\nset the layer of field \"Backmost\" to 1\n```\n\n> **Tip:** New objects are always created at the top layer. To refer to an object you've \njust created, use the ordinal **last**:\n\n```\ncreate button\nset the name of last button to \"My New Button\"\n```\n\n### Referring to objects by ID\n\nEach object in LiveCode has an ID number. The **ID** property never changes (except for \nstack IDs), and is guaranteed unique within the stack: no two objects in the same stack \ncan have the same **ID** property.\n\nYou can refer to an object using its object type, then keyword `ID`, followed by its `ID` \nnumber. For example, to refer to a card whose **`ID`** property is 1154, use the phrase \ncard `ID` 1154:\n\n```\ngo to card ID 1154\n```\n\nYou cannot change an object's **ID** property (except for a stack).\n\n> **Important:** Wherever possible, you should name your objects and refer to them by \nname instead of using number or ID. Both the number and ID properties will change if \nobjects are copied and pasted. Additionally, your scripts will rapidly become difficult \nto read if there are many ID or numerical references to objects.\n\n### Referring to objects by ordinal\n\nYou can refer to an object using its object type followed by the ordinal numbers **first** \nthrough **tenth**, or the special ordinals **middle** and **last**. To refer to a random \nobject, use the special ordinal **any**. For example, to refer to the last card in the \ncurrent stack, use the special ordinal **last**:\n\n```\ngo to last card\n```\n\n### The special descriptor ‘this’\n\nUse the **this** keyword to indicate the current stack, or the current card of a stack:\n\n```\nset the backgroundColor of this stack to white\nsend \"mouseUp\" to this card\nset the textFont of this card of stack \"Menubar\" to \"Sans\"\n```\n\n### Control references\n\nA control is any object that can appear on a card. Fields, buttons, scrollbars, images, \ngraphics, players, widgets, and groups are all controls. Stacks, cards, audio clips, \nand video clips are *not* controls.\n\nYou can refer to an object of any of these object types using the word \"control\", \nfollowed by an ID, name, or number:\n\n```\nhide control ID 2566\nsend mouseDown to control \"My Button\"\nset the hilite of control 20 to false\n```\n\nIf you use a name, as in the expression `control \"Thing\"`, the reference is to the first \ncontrol (with the lowest **layer**) that has that name.\n\nWhen you refer to a control by number using its object type, the reference is to the Nth \ncontrol of that type. For example, the phrase field 1 refers to the lowest field on the \ncard. This may not be the lowest control, because there may be controls of other types \nunderneath field 1. However, when you refer to a control by number using the word control, \nthe reference is to the Nth control of any type. The phrase control 1 refers to the lowest \ncontrol on the card, which may be of any type.\n\n> **Tip:** To refer to the object underneath the mouse pointer, use the **mouseControl** \nfunction.\n\n### Nested Object References\n\nTo refer to an object that belongs to another object, nest the references in the same \norder as the object hierarchy. For example, if there is a button called \"My Button\" on a \ncard called \"My Card\", you can refer to the button like this:\n\n```\nshow button \"My Button\" of card \"My Card\"\n```\n\nYou can mix names, numbers, ordinal references, and IDs in a nested object reference, and \nyou can nest references to whatever depth is required to specify the object. The only \nrequirement is that the order of references be the same as the order of the object \nhierarchy, going from an object to the object that owns it. Here are some examples:\n\n```\nfield ID 34 of card \"Holder\"\nplayer 2 of group \"Main\" of card ID 20 of stack \"Demo\"\nfirst card of this stack\n```\n\nstack \"Dialog\" of stack \"Main\" *-- \"Dialog\" is a substack*\n\nIf you don't specify a card in referring to an object that is contained by a card, \nLiveCode assumes the object is on the current card. If you don't specify a stack, LiveCode\nassumes the object is in the current stack. You can reference a control in another stack \nby either of the following methods:\n\nUse a nested reference that includes the name of the stack:\n\n```\nfield 1 of stack \"My Stack\"\ngraphic \"Outline\" `of` card \"Tools\" `of` stack \"Some Stack\"\n```\n\nSet the **defaultStack** property to the stack you want to refer to first. The \n**defaultStack** specifies the current stack, so you can refer to any object in the \n**defaultStack** without including a stack name. This example sets a checkbox in the \ncurrent stack to have the same setting as a checkbox in another stack called \"Other \nStack\":\n\n```\nput the defaultStack into savedDefault -- so you can set it back later\nset the defaultStack to \"Other Stack\"\n\nput the hilite of button \"Me\" into meSettin -- this button is in \"Other Stack\"\nset the defaultStack to savedDefault\n\nset the hilite of button \"Me Too\" to meSetting -- this button is in the original stack\n```\n\nIf an object is in a group, you can include or omit a reference to the group in a nested \nreference to the object. For example, suppose the current card contains a button called \n\"Guido\", which is part of a group called \"Stereotypes\". You can refer to the button with \nany of the following expressions:\n\n```\nbutton \"Guido\"\nbutton \"Guido\" of card 5\nbutton \"Guido\" of group \"Stereotypes\"\nbutton \"Guido\" of group \"Stereotypes\" of card 5\n```\n\nIf there is no other button named \"Guido\" on the card, these examples are equivalent. If \nthere is another button with the same name in another group (or on the card, but not in \nany group), you must either specify the group (as in the second and third examples) or \nrefer to the button by its **ID** property, to be sure you're referring to the correct \nbutton.\n\n### Avoid using numbers as object names\n\nIt is dangerous to set the **name** property of an object to a number.\n\nFor example, create three fields on a new card, naming the first one\n\"3\", the second one \"2\", and the third one \"1\".  In other words, the\ncreation order of those three fields is the reverse of the numerical\nnames you've given them.  Now use the message box to:\n\n    put \"This is field 3\" into field 3\n\nThe third field created, the one named \"1\", has its text set.  The\nnumber of the field, _not_ the **name** set by you, was used by\nLiveCode as the object reference.\n\nThis shows the perils of using a number as the **name** of an object.\nThere are built-in properties of controls (the **layer** and the\n**number**) that are based on integers, and to use integers in yet\nanother way, in the **name** property, will likely cause unexpected\nbehaviour at best.\n\nThis applies to cards as well.  The card order supersedes any\nnumerical card **name**.\n\nYou can, however, use a name which includes a number safely.  For\nexample, you could call you fields \"field1\", \"field2\" and \"field3\".\n\nNow there is no conflict when you use the message box to:\n\n    put \"This is field 3\" into field \"field3\"\n\nYou could also construct numerical field names:\n\n    on mouseUp\n       repeat with y = 1 to 3\n          put y into field (\"field\" & y)\n       end repeat\n    end mouseUp\n\nThis will put the values \"1\", \"2\" and \"3\" into the fields named\n\"field1\", \"field2\" and \"field3\".  The \"field\", concatenated with the\nnumber, removes the conflict with the control number.\n\n## Properties\n\nA property is an attribute of a LiveCode object. Each type of object has many built-in \nproperties, which affect the object's appearance or behavior. You can also define custom \nproperties for any object, and use them to store any kind of data.\n\nThis topic discusses how to use properties, how properties are inherited between objects, \nand how to create and switch between collections of property settings.\n\nTo fully understand this topic, you should know how to create objects, how to use an \nobject's property inspector, and how to write short scripts.\n\n### Using Object Properties\n\nA property is an attribute of an object, and each object type has its own set of built-in \nproperties appropriate for that type. An object can be *completely described* by its \nbuilt-in properties; if you could make all the properties of two objects identical, they'd \nbe the same object. It is thus possible to describe an object entirely as an array of \nproperties, or to export and import properties using text or XML files. More details on \nsome of the methods you can use to do this are covered later in this chapter.\n\n> **Note:** Since no two objects can have the same **ID** property, it's not possible in \npractice for two different objects to become the same object, because the **ID** will \nalways be different.\n\nBuilt-in properties determine the appearance and behavior of stacks and their contents - \nfonts, colors, window types, size and placement, and much more – as well as much of the \nbehavior of the LiveCode application. By changing properties, you can change almost any \naspect of your application. When you combine the ability to change properties with the \nability to create and delete objects programmatically, you can modify every aspect of your \napplication (subject to any limitations of the license agreement applicable to your \nedition of LiveCode).\n\n### Referring to properties\n\nProperty references consist of `the` word `the`, `the` property name, `the` word of, and a\nreference to `the` object:\n\n```\nthe armedIcon of button \"My Button\"\nthe borderWidth of field ID 2394\nthe name of card 1 of stack \"My Stack\"\n```\n\nProperties are sources of value, so you can get the value of a property by using it in an \nexpression:\n\n```\nput the height of field \"Text\" into myVar\nput the width of image \"My Image\" + 17 after field \"Values\"\nif item 1 of the location of me \\> zero then beep\n```\n\nFor example, to use the **width** property of a button as part of an arithmetic \nexpression, use a statement like the following:\n\n```\nadd the width of button \"Cancel\" to totalWidths\n```\n\nThe value of the property – in this case, the width of the button in pixels – is \nsubstituted for the property reference when the statement is executed.\n\nTo see a list of all the language words (including properties) applicable to a particular \nobject type, open the *Dictionary* and navigate to the entry for the object type. You can\nfilter the entries to only show object types by clicking on the *object* in the type\nfilter section.\n\n### Changing properties\n\nTo change the value of a property, you use the **set** command:\n\n```\nset the borderColor of group \"My Group\" to \"red\"\nset the top of image ID 3461 to zero\n```\n\nYou can also see and change many of an object's properties by selecting the object and \nchoosing *Object Inspector*. See the chapter *Building a User Interface* for more details.\n\nMost built-in properties affect the appearance or behavior of the object. For example, a \nbutton's **height**, **width**, and **location** are properties of the button. Changing \nthese properties in a handler causes the button's appearance to change. Conversely, \ndragging or resizing the button changes the related properties.\n\n**Read-only properties**\n\nSome properties can be read, but not set. These are called read-only properties. Trying \nto set a read-only property causes an execution error.\n\nTo find out whether a property is read-only, check its entry in the LiveCode Dictionary.\n\n**Changing a part of a property**\n\nProperties are not containers, so you cannot use a chunk expression to change a *part* of \nthe property. However, you can use a chunk expression to *examine* part of a property. \nFor example, you cannot set line 1 of a property to a new value: you must set the whole \nproperty. For more details see the section *Chunk Expressions* in the chapter on \n*Processing Text and Data*.\n\nTo change one part of a property, first put the property value into a variable, change the \nrequired part of the variable, then set the property back to the new variable contents:\n\n```\nput the rect of me into tempRect\nput \"10\" into item 2 of tempRect\nset the rect of me to tempRect\n```\n\n**Custom properties and virtual properties**\n\nA custom property is a property that you define. You can create as many custom properties \nfor an object as you want, and put any kind of data into them, including binary data or \narray data. You can even store a file in a custom property.\n\nVirtual properties are custom properties that trigger a custom script action when you \nchange them, allowing you to implement \"virtual\" object behaviors.\n\n*Custom properties* and *virtual properties* are covered in their respective sections \nlater in this chapter.\n\n### Property Inheritance\n\nMost properties are specific to the object they are part of, and affect only that object.\n\nHowever, some properties of an object, such as its color and text font, take on the \nsettings of the object above it in the object hierarchy. For example, if a field's \nbackground color property is not specified (that is, if its **backgroundColor** property \nis empty), the field takes on the background color of the card that owns it. If no \nbackground color is specified for the card either, the stack's background color is used, \nand so on. This means you can set a background color for a stack, and every object in it \nwill automatically use that background color, without your having to set it for each \nobject.\n\nThis process of first checking the object, then the object's owner, then the object that \nowns that object, and so on, is called *inheritance* of properties. Each object inherits \nthe background color of the object above it in the hierarchy. Similar inheritance rules \napply to the **foregroundColor**, **topColor**, **bottomColor**, **borderColor**, \n**shadowColor**, and **focusColor** properties, to their corresponding pattern properties, \nand to the **textFont**, **textSize**, and **textStyle** properties.\n\n### Overriding inheritance\n\nInheritance is used to determine an object's appearance only if the object itself has no \nsetting for the property. If an inheritable property of an object is not empty, that \nsetting overrides any setting the object might inherit from an object above it in the \nobject hierarchy.\n\nFor example, if a button's **backgroundColor** property is set to a color reference \ninstead of being empty, the button uses that background color, regardless of the button's \nowners. If the object has a color of its own, that color is always used.\n\n**The effective keyword**\n\nIf an inheritable property of an object is empty, you can't simply check the property to \nfind out what color or font settings the object displays. In this case, use the \n**effective** keyword to obtain the inherited setting of the property. The **effective** \nkeyword searches the object's owners, if necessary, to find out what setting is *actually* \nused.\n\nFor example, suppose you have a field whose **textFont** property is empty. The \n**textFont** of the card that the field is on is set to \"Helvetica\", so the field inherits \nthis setting and displays its text in the Helvetica font. To find out what font the field \nis using, use the expression `the effective textFont`:\n\n```\nget the textFont of field \"My Field\" *-- empty*\nget the effective textFont of field \"My Field\" *-- Helvetica*\n```\n\nYou can use the **effective** keyword with any inherited property.\n\n## Global Properties\n\nLiveCode also has global properties, which affect the *overall behavior* of the \napplication. Global properties are accessed and changed the same way as object properties. \nThey do not belong to any particular object, but otherwise they behave like object \nproperties.\n\n> **Tip:** To see a list of all global properties, open the *Message Box*, and choose the \n*Global Properties* icon – the third icon from the left at the top of the window. To see a \nlist of all properties in the language, including both global and object properties, use \nthe propertyNames global property.\n\nA few properties are *both* global *and* object properties. For example, the \n**paintCompression** is a global property, and also a property of images. For these \nproperties, the global setting is separate from the setting for an individual object.\n\nSome other global properties are affected by *system settings*. For example, the default \nvalue of the **playLoudness** property is set by the operating system's sound volume \nsetting.\n\n### Referring to global properties\n\nYou refer to global properties using **the** and the property name:\n\n```\nthe defaultFolder\nthe emacsKeyBindings\nthe fileType\n```\n\nSince global properties apply to the whole application, you don't include an object \nreference when referring to them.\n\nGlobal properties are sources of value, so you can get the value of a global property by \nusing it in an expression:\n\n```\nget the stacksInUse\nput the recentNames into field \"Recent Cards\"\nif the ftpProxy is empty then exit setMyProxy\n```\n\n### Changing global properties\n\nTo change a global property, you use the **set** command, in the same way as for object \nproperties:\n\n```\nset the itemDelimiter to \"/\"\nset the grid to false\nset the idleTicks to 10\n```\n\nSome global properties can be changed by other commands. For example, the **lockScreen** \nproperty can either be set directly, or changed using the **lock screen** and \n**`unlock screen`** commands. The following two statements are equivalent:\n\n```\nset the lockScreen to false *-- does the same thing as...*\nunlock screen\n```\n\n### Saving and restoring global properties\n\nObject properties are part of an object, so they are saved when the stack containing their \nobject is saved. Global properties, however, are not associated with any object, so they \nare not saved with a stack. If you change the value of a global property, the change is \nlost when you quit the application.\n\nIf you want to use the same setting of a global property during a different session of \nyour application, you must save the setting – in a Preferences file, in a custom property, \nor elsewhere in a saved file – and restore it when your application starts up.\n\n## Text Related Properties\n\nNormally, properties are applied only to objects or, in the case of global properties, to \nthe entire application. However, a few properties also apply to chunks in a field or to \nsingle characters in a field.\n\n### Text style properties\n\nCertain text-related properties can be applied either to an entire field or to a chunk of \na field:\n\n```\nset the textFont of word 3 of field \"My Field\" to \"Courier\"\nset the foregroundColor of line 1 of field 2 to \"green\"\nif the textStyle of the clickChunk is \"bold\" then beep\n```\n\nThe following field properties can be applied to either an entire field or to a chunk of \nthe field:\n\n\ntextFont, textStyle, and textSize\n\ntextShift\n\nbackgroundColor and foregroundColor\n\nbackgroundPattern and foregroundPattern (Unix systems)\n\nEach chunk of a field inherits these properties from the field, in the same way that \nfields inherit from their owners. For example, if a word's **textFont** property is empty, \nthe word is displayed in the field's font. But if you set the word's **textFont** to \nanother font name, that word – and only that word – is displayed in its own font.\n\nTo find the text style of a chunk in a field, whether that chunk uses its own styles or \ninherits them from the field, use the **effective** keyword:\n\n```\nget the effective textFont of word 3 of field ID 2355\nanswer the effective backgroundColor of char 2 to 7 of field \"My Field\"\n```\n\n> **Tip:** If a chunk expression includes more than one style, the corresponding property \nfor that chunk reports \"mixed\". For example, if the first line of a field has a \n**textSize** of \"12\", and the second line has a **textSize** of \"24\", an expression like \nthe textSize of line 1 to 2 of field \"My Field\" reports \"mixed\".\n\n### Formatted text properties\n\nThe **htmlText**, **RTFText**, and **unicodeText** properties of a chunk are equal to the \ntext of that chunk, along with the formatting information that's appropriate for the \nproperty.\n\nFor example, if a field contains the text \"This is a test.\", and the word \"is\" is \nboldfaced, the htmlText of word 2 reports \"\\<b\\>is\\</b\\>\".\n\nFor more information on these properties see the chapter on *Processing Text and Data*, as \nwell as the individual entries for these properties in the *LiveCode Dictionary*.\n\n**The formattedRect and related properties**\n\nThe **formattedRect** property (along with the **formattedWidth**, **formattedHeight**, \n**formattedLeft**, and **formattedTop**) reports the position of a chunk of text in a \nfield. These properties are read-only.\n\nThe **formattedRect**, **formattedLeft**, and **formattedTop** properties can be used for \na chunk of a field, but not the entire field. The **formattedWidth** and \n**formattedHeight** apply to both fields and chunks of text in a field.\n\n**The imageSource, linkText, and visited properties**\n\nThe **imageSource** of a character specifies an image to be substituted for that character \nwhen the field is displayed. You use the **imageSource** to display images inside fields:\n\n```\nset the imageSource of char 17 of field 1 to 49232\nset the imageSource of char thisChar of field \"My Field\" to \"http://www.example.com/banner.jpg\"\n```\n\nThe **linkText** property of a chunk lets you associate hidden text with part of a field's \ntext. You can use the **linkText** in a **linkClicked** handler to specify the destination \nof a hyperlink, or for any other purpose.\n\nThe **visited** property specifies whether you have clicked on a text group during the \ncurrent session. You can get the visited property for any chunk in a field, but it is \nmeaningless unless the chunk's **textStyle** includes \"link\".\n\nThe **imageSource**, **linkText**, and **visited** properties are the only properties that \ncan be set to a chunk of a field, but not to the entire field or any other object. Because \nthey are applied to text in fields, they are listed as field properties in the LiveCode \nDictionary.\n\n## Creating and Deleting Objects\n\nLiveCode allows you to create and delete objects programmatically. You may optionally \nspecify all the properties for a new object before creating it.\n\n### The Create Object Command\n\nYou use the **create** command to create a new object.\n\n```\ncreate [invisible] *type* [*name*] [in *group*]\n```\n\nThe *type* is any control that can be on a card: field, button, image, scrollbar, graphic, \nor player.\n\nThe *name* is the name of the newly created object. If you don't specify a *name*, the \nobject is created with a default name.\n\nThe *group* is any group that's on the current card. If you specify a *group*, the new \nobject is a member of the group, and exists on each card that has the group. If you don't \nspecify a group, the object is created on the current card and appears only on that card.\n\n```\ncreate button \"Click Me\"\ncreate invisible field in first group\n```\n\nYou can also create widgets of a given kind on a card, using the \n**create widget** command.\n\n```\ncreate [invisible] widget [*name*] as *kind* [in *group*]\n```\n\nThe *kind* is the kind of any currently installed widget. \n\nFor more details, see the *create command* in the *LiveCode Dictionary*. For details on \nhow to specify the properties of an object before creating it, see the section on \n*Creating Objects Off-screen Using Template Objects*, below.\n\n### The Delete Object Command\n\nYou can use the **delete** command to remove objects from the stack.\n\ndelete {*object}*\n\nThe *object* is any available object.\n\n```\ndelete this card\ndelete button \"New Button\"\n```\n\nFor more details, see the *delete command* in the *LiveCode Dictionary*.\n\n### Creating Objects Off-screen Using Template Objects\n\nLiveCode uses *template objects* to allow you to specify the properties for an object \nbefore it is created. The template objects are off-screen models – there is one for each \npossible type of object, e.g. button, field, graphic, etc.\n\nIf you need to create a new object and then set some properties on the object, it is more \nefficient to make the changes to the template object, then create the object. Because the \nobject can be created with all of its properties set correctly, there is no need to lock \nthe screen and update or reposition the object after creating it. For example, the \nLiveCode development environment uses the template objects internally to create new \nobjects from the main tool palette.\n\nYou set properties on template objects in the same way you set properties on normal \nobjects.\n\nset the {property} of the template{Objecttype} to {value}\n\nFor example, to create a button with the name \"Hello World\", positioned at 100,100:\n\n```\nset the name of the templateButton to \"Hello World\"\nset the location of the templateButton to 100,100\ncreate button\n```\n\nWhen you have used the templateObject to create a new object, you should reset it before \nusing it again. Resetting the templateObject sets all off its properties back to defaults.\n\nreset the template[Objecttype]\n\nFor example, to reset the `templateButton`:\n\n```\nreset the templateButton\n```\n\nFor more details on the template objects, search the *LiveCode Dictionary* for \n\"*template*\".\n\n## Property Arrays using the Properties Property\n\nIn addition to retrieving individual object properties, you can retrieve or set an entire \nset as an array using the **properties** property. You can use this to edit, copy, export \nor import properties.\n\n```\nset the properties of *object* to *propertiesArray*\nput the properties of *object* into propertiesArray\n```\n\nThe **properties** of an object is an array containing that object's significant built-in \nproperties.\n\n```\nput the properties of button 1 into myArray\nset the properties of last player to the properties of player \"Example\"\n```\n\n> **Tip:** This example handler shows you how to write the properties of an object to a \ntext file.\n\n```\non mouseUp\n\tput the properties of button 1 into tPropertiesArray\n\tcombine tPropertiesArray using return and \"|\"\n\task file \"Save properties as:\"\n\tif it is not empty then put tPropertiesArray into URL (\"file:\" & it)\nend mouseUp\n```\n\nIn this example, each property name will be written followed by the \"|\" character and the \nproperty value and then a return character.\n\nFor more details, see the *properties property* in the *LiveCode Dictionary*.\n\n## Custom Properties\n\nA custom property is a property that you create for an object, in addition to its built-in \nproperties. You can define custom properties for any object, and use them to store any \nkind of data.\n\nThis topic discusses how to *create* and *use* custom properties, and how to *organize* \ncustom properties into *sets* (or *arrays*). The following section covers how to create \nvirtual properties and use **getProp** and **setProp** handlers to handle custom property \nrequests.\n\n### Using Custom Properties\n\nA custom property is a property that you define. You can create as many custom properties \nfor an object as you want, and put any kind of data into them (even binary data). You can \neven store a file in a custom property.\n\nUse a custom property when you want to:\n- associate data with a specific object\n- save the data with the object in the stack file\n- access the data quickly\n\n### Creating a Custom Property\n\nYou create a custom property by setting the new property to a value. If you set a custom \nproperty that doesn't exist, LiveCode automatically creates the custom property and sets \nit to the requested value.\n\nThis means that you can create a custom property in a handler or the message box, simply \nby using the **set** command. The following statement creates a custom property called \n\"endingTime\" for a button:\n\n```\nset the endingTime of button \"Session\" to the long time\n```\n\nYou can create custom properties for any object. However, you cannot create global custom \nproperties, or custom properties for a chunk of text in a field. Unlike some built-in \nproperties, a custom property applies only to an object.\n\n> **Important:** Each object can have its own custom properties, and custom properties are \nnot shared between objects. Creating a custom property for one object does not create it \nfor other objects.\n\n### The Content of a Custom Property\n\nYou set the value of a custom property by using its property name together with the \n**set** command, in the same way you set built-in properties:\n\n```\nset the myCustomProperty of button 1 to false\n```\n\nYou can see and change all of an object's custom properties in the Custom Properties pane \nof the object's property inspector: click the custom property you want to change, then \nenter the new value.\n\n**Changing a part of a property**\n\nLike *built-in properties*, custom properties are *not* containers, so you cannot use a \nchunk expression to change a part of the custom property. Instead, you put the property's \nvalue into a variable and change the variable, then set the custom property back to the \nnew variable contents:\n\n```\nput the lastCall of this card into myVar\nput \"March\" into word 3 of myVar\nset the lastCall of thisCard to myVar\n```\n\n### Custom Property Names\n\nThe name of a custom property must consist of a single word and may contain any \ncombination of letters, digits, and underscores (\\_). The first character must be either \na letter or an underscore.\n\nAvoid giving a custom property the same name as a variable. If you refer to a custom \nproperty in a handler, and there is a variable by the same name, LiveCode uses the \ncontents of the variable as the name of the custom property. This usually causes \nunexpected results.\n\n> **Important:** It is important to avoid giving custom properties the same name as \nexisting engine properties *unless* those properties are only ever accessed in the \ncontext of a custom property set. Unintended effects may result if you attempt to use the \nname of an engine property as a custom property.\n\nCustom property names beginning with \"**rev**\" are reserved for LiveCode's own custom \nproperties. Naming a custom property with a reserved name may produce unexpected results \nwhen working in the development environment.\n\n### Referring to Custom Properties\n\nCustom property references look just like built-in property references: the word the, the \nproperty name, the word of, and a reference to the object.\n\nFor example, to use a custom property called \"lastCall\" that belongs to a card, use a \nstatement like the following:\n\n```\nput the lastCall of this card into field \"Date\"\n```\n\nLike built-in properties, custom properties are sources of value, so you can get the value \nof a custom property by using it in an expression. The property's value is substituted for \nthe property reference when the statement is executed. For example, if the card's \n\"lastCall\" custom property is \"Today\", the example statement above puts the string \"Today\" \ninto the \"Date\" field.\n\n### Nonexistent Custom Properties\n\nCustom properties that don't exist evaluate to empty. For example, if the current card \ndoesn't have a custom property called \"astCall\", the following statement empties the \nfield:\n\nput the lastCall of this card into field \"Date\" *– empty*\n\n> **Note:** Referring to a nonexistent custom property does not cause a script error. This \nmeans that if you misspell a custom property name in a handler, you won't get an error \nmessage, so you might not notice the problem right away.\n\n### Finding out Whether a Custom Property Exists\n\nThe **customKeys** property of an object lists the object's custom properties, one per \nline:\n\n```\nput the customKeys of button 1 into field \"Custom Props\"\n```\n\nTo find out whether a custom property for an object exists, you check whether it's listed \nin the object's **customKeys**. The following statement checks whether a player has a \ncustom property called \"doTellAll\":\n\n```\nif \"doTellAll\" is among the lines of the customKeys of player \"My Player\" then*...*\n```\n\nYou can also look in the *Custom Properties* pane of the object's property inspector, \nwhich lists the custom properties. See the chapter on *Building a User Interface* for more \ndetails.\n\n### Custom Properties & Converting Text Between Platforms\n\nWhen you move a stack developed on a Mac OS or OS X system to a Windows or Unix system (or \nvice versa), LiveCode automatically translates text in fields and scripts into the \nappropriate character set. However, text in custom properties is not converted between the \nISO and Macintosh character sets. This is because custom properties can contain binary \ndata as well as text, and converting them would garble the data.\n\nCharacters whose ASCII value is between 128 and 255, such as curved quotes and accented \ncharacters, do not have the same ASCII value in the Mac OS character set and the \nISO 8859-1 character set used on Unix and Windows systems. If such a character is in a \nfield, it is automatically translated, but it's not translated if it's in a custom \nproperty.\n\nBecause of this, if your stack displays custom properties to the user--for example, if the \nstack puts a custom property into a field--and if the text contains special characters, it \nmay be displayed incorrectly if you move the stack between platforms. To avoid this \nproblem, use one of these methods:\n\nBefore displaying the custom property, convert it to the appropriate character set using \nthe **macToISO** or **ISOToMac** function. The following example shows how to convert a \ncustom property that was created on a Mac OS system, when the property is displayed on a \nUnix or Windows system:\n\n```\nif the platform is \"MacOS\" then\n\tanswer the myPrompt of button 1\nelse\n\tanswer macToISO(the myPrompt of button 1)\nend if\n```\n\nInstead of storing the custom property as text, store it as HTML, using the **HTMLText** \nproperty of fields:\n\n```\nset the myProp of this card to the HTMLText of field 1\n```\n\nBecause the **HTMLText** property encodes special characters as entities, it ensures that \nthe custom property does not contain any special characters--only the platform-independent \nencodings for them. You can then set a field's **HTMLText** to the contents of the custom \nproperty to display it:\n\n```\nset the HTMLText of field \"Display\" to the myProp of this card\n```\n\n### Storing a file in a custom property\n\nYou can use a URL to store a file's content in a custom property:\n\n```\nset the myStoredFile of stack \"My Stack\" to URL \"binfile:mypicture.jpg\"\n```\n\nYou restore the file by putting the custom property's value into a URL:\n\n```\nput the myStoredFile of stack \"My Stack\" into URL \"binfile:mypicture.jpg\"\n```\n\nBecause a custom property can hold any kind of data, you can store either text files or \nbinary files in a custom property. You can use this capability to bundle media files or \nother files in your stack.\n\nMany Mac OS Classic files have a resource fork. To store and restore such a file, you can \nuse the **resfile** URL scheme to store the content of the resource fork separately.\n\n> **Tip:** To save space, compress the file before storing it:\n\n```\nset the myStoredFile of stack \"My Stack\" to compress(URL \"binfile:mypicture.jpg\")\n```\n\nWhen restoring the file, decompress it first:\n\n```\nput decompress(the myStoredFile of stack \"My Stack\") into URL \"binfile:mypicture.jpg\"\n```\n\nFor more information about using URL containers, see the section on \n*Working with Files, URLs and Sockets* in the *Transferring Information* guide.\n\n### Deleting a custom property\n\nAs described above, the **customKeys** property of an object is a list of the object's \ncustom properties. You can set the **customKeys** of an object to control which custom \nproperties it has.\n\nIn LiveCode, there is no command to delete a custom property. Instead, you place all the \ncustom property names in a variable, delete the one you don't want from that variable, and \nset the object's **customKeys** back to the modified contents of the variable. This \nremoves the custom property whose name you deleted.\n\nFor example, the following statements delete a custom property called \"propertyToRemove\" \nfrom the button \"My Button\":\n\n```\nget the customKeys of button \"My Button\"\nset the wholeMatches to true\ndelete line lineOffset(\"propertyToRemove\",it) of it\nset the customKeys of button \"My Button\" to it\n```\n\nYou can also delete a custom property in the *Custom Properties* pane of the object's \n*Property Inspector*. Select the property's name and click the *Delete* button to remove \nit.\n\n## Custom Property Sets\n\nCustom properties can be organized into *custom property sets* – or arrays of custom \nproperties. A custom property set is a group of custom properties that has a name you \nspecify.\n\nWhen you refer to a custom property, LiveCode looks for that property in the object's \ncurrently-active custom property set. When you create or set a custom property, LiveCode \ncreates it in the currently-active custom property set, or sets the value of that property \nin the currently-active set. One custom property set is active at any one time, but you \ncan use array notation to get or set custom properties in sets other than the current set.\n\nThe examples in the previous section assume that you haven't created any custom property \nsets. If you create a custom property without creating a custom property set for it, as \nshown in the previous examples, the new custom property becomes part of the object's \ndefault custom property set.\n\n### Creating custom property sets\n\nTo make a custom property set active, you set the object's **customPropertySet** property \nto the set you want to use. As with custom properties and local variables, if the custom \nproperty set you specify doesn't exist, LiveCode automatically creates it, so you can \ncreate a custom property set for an object by simply switching to that set.\n\nThe following statement creates a custom property set called \"Alternate\" for an object, \nand makes it the active set:\n\n```\nset the customPropertySet of the target to \"Alternate\"\n```\n\nThe statement above creates the custom property set.\n\nYou can also view, create, and delete custom property sets in the Custom pane of the \nobject's property inspector.\n\nYou can list all the custom property sets of an object using its **customPropertySets** \nproperty.\n\nAs with custom properties, you can create custom property sets for any object. But you \ncan't create global custom property sets, or custom property sets for a chunk of a field.\n\n### Custom property set names\n\nThe names of custom property sets should consist of a single word, with any combination \nof letters, digits, and underscores (\\_). The first character should be either a letter \nor an underscore.\n\nIt is possible to create a custom property set with a name that has more than one word, \nor that otherwise doesn't conform to these guidelines. However, this is not recommended, \nbecause such a custom property set can't be used with the array notation described below.\n\n> **Note:** When you use the Custom Properties pane in the property inspector to create \na custom property set, the pane restricts you to these guidelines.\n\n### Referring to custom property sets\n\nTo switch the active custom property set, set the object's **customPropertySet** property \nto the name of the set you want to use:\n\n```\nset the customPropertySet of button 3 to \"Spanish\"\n```\n\nAny references to custom property refer to the current custom property set. For example, \nsuppose you have two custom property sets named \"Spanish\" and \"French\", and the French \nset includes a custom property called \"Paris\" while the Spanish set does not. If you \nswitch to the Spanish set, the **customKeys** of the object does not include \"Paris\", \nbecause the current custom property set doesn't include that property.\n\nIf you refer to a custom property that isn't in the current set, the reference evaluates \nto empty. If you set a custom property that isn't in the current set, the custom property \nis created in the set. You can have two custom properties with the same name in different \ncustom property sets, and they don't affect each other: changing one does not change the \nother.\n\nThe **customProperties** property of an object includes only the custom properties that \nare in the current custom property set. To specify the **customProperties** of a \nparticular custom property set, you include the set's name in square brackets:\n\n```\nput the customProperties[mySet] of this card into myArray\n```\n\n### Finding out whether a custom property set exists\n\nThe **customPropertySets** property of an object lists the object's custom property sets, \none per line:\n\n```\nanswer the customPropertySets of field \"My Field\"\n```\n\nTo find out whether a custom property set for an object exists, you check whether it's \nlisted in the object's **customPropertySets**. The following statement checks whether an \nimage has a custom property set called \"Spanish\":\n\n```\nif \"Spanish\" is among the lines of the customPropertySets of image ID 23945 then*...*\n```\n\nYou can also look in the Custom Properties pane of the object's property inspector, which \nlists the custom property sets in the \"Set\" menu halfway down the pane.\n\n### The default custom property set\n\nAn object's default custom property set is the set that's active if you haven't used the \n**customPropertySet** property to switch to another set. Every object has a default \ncustom property set; you don't need to create it.\n\nIf you create a custom property without first switching to a custom property set – as in \nthe earlier examples in this topic – the custom property is created in the default set. \nIf you don't set the **customPropertySet** property, all your custom properties are \ncreated in the default set.\n\nThe default custom property set has no name of its own, and is not listed in the object's \n**customPropertySets** property. To switch from another set to the default set, you set \nthe object's **customPropertySet** to empty:\n\n```\nset the customPropertySet of the target to empty\n```\n\n### Using multiple custom property sets\n\nSince only one custom property set can be active at a time, you can create separate \ncustom properties with the same name but different values in different sets. Which value \nyou get depends on which custom property set is currently active.\n\n**A translation example**\n\nSuppose your stack uses several custom properties that hold strings in English, to be \ndisplayed to the user by various commands. Your stack might contain a statement such as \nthis:\n\nanswer the standardErrorPrompt of this stack\n\nThe statement above displays the contents of the custom property called \n\"standardErrorPrompt\" in a dialog box.\n\nSuppose you decide you want to translate your application into French. To do this, you \nmake your original set of English custom properties into a custom property set (which you \nmight call \"myEnglishStrings\"), and create a new set called \"myFrenchStrings\" to hold the \ntranslated properties.\n\nEach set has the same-named properties, but the values in one set are in French and the \nother in English. You switch between the sets depending on what language the user chooses. \nThe statement:\n\nanswer the standardErrorPrompt of this stack\n\nprovides either the English or French, depending on which custom property set is active: \n\"myEnglishStrings\" or \"myFrenchStrings\".\n\n### Copying custom properties between property sets\n\nWhen it's created, a custom property set is empty, that is, there aren't any custom \nproperties in it. You put custom properties into a new custom property set by creating \nthe custom properties while the set is active:\n\n```\n-- create new set and make it active:\nset the customPropertySet of button 1 to \"MyNewSet\"\n-- now create a new custom property in the current set:\nset the myCustomProp of button 1 to true\n```\n\nYou can also use the **customProperties** property (which was discussed earlier in this \ntopic) to copy custom properties between sets. For example, suppose you have created a \nfull set of custom properties in a custom property set called \"myEnglishStrings\", and you \nwant to copy them to a new custom property set, \"frenchStrings\", so you can translate them \neasily. The following statements create the new custom property set, then copy all the \nproperties from the old set to the new one:\n\n```\n-- create the new set:\nset the customPropertySet of this stack to \"frenchStrings\"\n-- copy the properties in the English set to the new set:\n\nset the customProperties[\"frenchStrings \"] of this stack to the customProperties[\"frenchStrings \"] of this stack\n```\n\n> **Caution:** Custom property sets in the development environment\n\n### Arrays, custom properties, and custom property sets\n\nAll the custom properties in a custom property set form an array. The array's name is the \ncustom property set name, and the elements of the array are the individual custom \nproperties in that custom property set.\n\n**Referring to custom properties using array notation**\n\nYou can use array notation to refer to custom properties in any custom property set. This \nlets you get and set any custom property, even if it's not in the current set, without \nchanging the current set.\n\nFor example, suppose a button has a custom property named \"myProp\" which is in a custom \nproperty set called \"mySet\". If \"mySet\" is the current set, you can refer to the \"myProp\" \nproperty like this:\n\n```\nget the myProp of button 1\nset the myProp of the target to 20\n```\n\nBut you can also use array notation to refer to the \"myProp\" property, even if \"mySet\" is \nnot the current set. To refer to this custom property regardless of which custom property \nset is active, use statements like the following:\n\n```\nget the mySet[\"myProp\"] of button 1\nset the mySet[\"myProp\"] of the target to 20\n```\n\n> **Note:** Because the default custom property set has no name, you cannot use array \nnotation to refer to a custom property in the default set.\n\n**Storing an array in a custom property set**\n\nIf you store a set of custom properties in a custom property set, the set can be used \njust like an array. You can think of the custom property set as though it were a single \ncustom property, and the properties in the set as the individual elements of the array.\n\nTo store an array variable as a custom property set, use a statement like the following:\n\n```\nset the customProperties[\"myProperty\"] of me to theArray\n```\n\nThe statement above creates a custom property set called \"myProperty\", and stores each \nelement in \"theArray\" as a custom property in the new set. To retrieve a single element \nof the array, use a statement like this:\n\n```\nget the myProperty[\"myElement\"] of field \"Example\"\n```\n\n### Deleting a custom property set\n\nAs described above, the **customPropertySets** property of an object is a list of the \nobject's custom property sets. You can set the **customPropertySets** of an object to \ncontrol which custom property sets it has.\n\nIn LiveCode, there is no command to delete a custom property set. Instead, you place all \nthe custom property set names in a variable, delete the one you don't want from that \nvariable, and set the **customPropertySets** back to the modified contents of the \nvariable. This removes the custom property set whose name you deleted.\n\nFor example, the following statements delete a custom property set called \"mySet\" from \nthe button \"My Button\":\n\n```\nget the customPropertySets of button \"My Button\"\nset the wholeMatches to true\ndelete line lineOffset(\"mySet\",it) of it\nset the customPropertySets of button \"My Button\" to it\n```\n\nYou can also delete a custom property set in the Custom Properties pane of the object's \nproperty inspector. Select the set's name from the Set menu, then click the Delete button \nto remove it.\n\n## Attaching Handlers to Custom Properties\n\nWhen you change a custom property, LiveCode sends a **setProp** trigger to the object \nwhose property is being changed. You can write a **setProp** handler to trap this trigger \nand respond to the attempt to change the property. Like a message, this trigger uses the \nmessage path, so you can place the **setProp** handler anywhere in the object's message \npath.\n\nSimilarly, when you get the value of a custom property, LiveCode sends a **getProp** call \nto the object whose property is being queried. You can write a **getProp** handler to \nreply to the request for information. Like a function call, the **getProp** call also \ntraverses the message path.\n\nUsing **getProp** and **setProp** handlers, you can:\n- validate a custom property's value before setting it\n- report a custom property's value in a format other than what it's stored as\n- ensure the integrity of a collection of properties by setting them all at once\n- change an object's behavior when a custom property is changed\n\n**setProp** triggers and **getProp** calls are not sent when a built-in property is \nchanged or accessed. They apply only to custom properties.\n\n### Responding to changing a custom property\n\nWhen you use the **set** command to change a custom property, LiveCode sends a \n**setProp** trigger to the object whose property is being changed.\n\nA **setProp** trigger acts very much like a message does. It is sent to a particular \nobject. If that object's script contains a **setProp** handler for the property, the \nhandler is executed; otherwise, the trigger travels along the message path until it finds \na handler for the property. If it reaches the end of the message path without being \ntrapped, the **setProp** trigger sets the custom property to its new value. For more \ninformation about the message path, see the section on the *Message Path*.\n\nYou can include as many **setProp** handlers in a script for as many different custom \nproperties as you need.\n\n### The structure of a *setProp* handler\n\nUnlike a message handler, a `setProp` handler begins with the word `setProp` instead of \nthe word `on`. This is followed by the handler's name (which is the same as the name of \nthe custom property) and a parameter that holds the property's new value. A `setProp`\nhandler, like all handlers, ends with the word \"end\" followed by the handler's name.\n\nThe following example shows a setProp handler for a custom property named \"percentUsed\", \nand can be placed in the script of the object whose custom property it is:\n\n```\nsetProp percentUsed newAmount\n\t-- responds to setting the percentUsed property\n\tif newAmount is not a number or newAmount \\< zero or newAmount \\> 100 then\n\t\tbeep 2\n\t\texit percentUsed\n\tend if\n\tpass percentUsed\nend percentUsed\n```\n\nWhen you set the \"percentUsed\" custom property, the \"percentUsed\" handler is executed:\n\n```\nset the percentUsed of scrollbar \"Progress\" to 90\n```\n\nWhen this statement is executed, LiveCode sends a **setProp** trigger to the scrollbar. \nThe new value of 90 is placed in the *newAmount* parameter. The handler makes sure that \nthe new value is in the range 0–100; if not, it beeps and exits the handler, preventing \nthe property from being set.\n\nFor more details about the **setProp** control structure, see **setProp** in the LiveCode \nDictionary.\n\n**Passing the setProp trigger**\n\nWhen the **setProp** trigger reaches the engine - the last stop in the message path - the \ncustom property is set. If the trigger is trapped and doesn't reach the engine, the \ncustom property is not set.\n\nTo let a trigger pass further along the message path, use the **pass** control structure. \nThe **pass** control structure stops the current handler and sends the trigger on to the \nnext object in the message path, just as though the object didn't have a handler for the \ncustom property.\n\nIn the \"percentUsed\" handler above, if the *newAmount* is out of range, the handler uses \nthe **exit** control structure to halt; otherwise, it executes the **pass** control \nstructure. If the *newAmount* is in the right range, the pass control structure lets the \nproperty be set. Otherwise, since the trigger is not passed, it never reaches the engine, \nso the property is not changed.\n\nYou can use this capability to check the value of any custom property before allowing it \nto be set. For example, if a custom property is supposed to be boolean (true or false), a \nsetProp handler can trap the trigger if the value is anything but true or false:\n\n```\nsetProp myBoolean newValue\n\tif newValue is true or newValue is false\n\tthen pass myBoolean\nexit myBoolean\n```\n\n**Using the message path with a setProp trigger**\n\nBecause **setProp** triggers use the message path, a single object can receive the \n**setProp** triggers for all the objects it owns. For example, **setProp** triggers for \nall controls on a card are sent to the card, if the control's script has no handler for \nthat property. You can take advantage of the message path to implement the same \n**setProp** behavior for objects that all have the same custom property.\n\nIf a **setProp** handler sets its custom property, for an object that has that \n**setProp** handler in its message path, a runaway recursion will result. To avoid this \nproblem, set the **lockMessages** property to true before setting the custom property.\n\n> **Note:** To refer to the object whose property is being set, use the **target** \nfunction. The **target** refers to the object that first received the **setProp** trigger\n- the object whose custom property is being set - even if the handler being executed is \nin the script of another object.\n\n**Setting properties within a setProp handler**\n\nIn the \"lastChanged\" example in the box above, the handler sets the custom property \ndirectly, instead of simply passing the **setProp** trigger. You must use this method if \nthe handler makes a change to the property's value, because the **pass** control structure \nsimply passes on the original value of the property.\n\nIf you use the **set** command within a **setProp** handler to set the same custom \nproperty for the current object, no **setProp** trigger is sent to the target object \n(this is to avoid runaway recursion, where the **setProp** handler triggers itself). \nSetting a different custom property sends a **setProp** trigger. So does setting the \nhandler's custom property for an object other than the one whose script contains the \n**setProp** handler.\n\nUsing this method, you can not only check the value of a property, and allow it to be set \nonly if it's in range, you can also change the value so that it is in the correct range, \nhas the correct format, and so on.\n\nThe following example is similar to the \"percentUsed\" handler above, but instead of \nbeeping if the *newAmount* is out of range, it forces the new value into the range 0–100:\n\n```\nsetProp percentUsed newAmount\n\tset the percentUsed of the target to max(zero,min(100,newAmount))\nend percentUsed\n```\n\n**Nonexistent properties**\n\nIf the custom property specified by a setProp handler doesn't exist, the setProp handler \nis still executed when a handler sets the property. If the handler passes the **setProp** \ntrigger, the custom property is created.\n\n**Custom property sets and setProp handlers**\n\nA setProp handler for a custom property set behaves differently from a setProp handler \nfor a custom property that's in the default set.\n\nWhen you set a custom property in a custom property set, the **setProp** trigger is named \nfor the set, not the property. The property name is passed in a parameter using a special \nnotation. This means that, for custom properties in a set, you write a single setProp \nhandler for the set, rather than one for each individual property.\n\nThe following example handles **setProp** triggers for all custom properties in a custom \nproperty set called *myFrenchStrings*, which contains custom properties named \n*standardErrorPrompt*, *filePrompt*, and perhaps other custom properties:\n\n```\nsetProp myFrenchStrings[myPropertyName] newValue\n-- The myPropertyName parameter contains the name of\n-- the property that's being set\n\tswitch myPropertyName\n\tcase \"standardErrorPrompt\"\n\t\tset the myFrenchStrings[\"standardErrorPrompt\"] of the target to return & newValue & return\n\t\texit myFrenchStrings\n\tbreak\n\tcase \"filePrompt\"\n\t\tset the myFrenchStrings[\"filePrompt\"] of the target to return& newValue & return\n\texit myFrenchStrings\n\tbreak\n\tdefault\n\t\tpass myFrenchStrings\n\tend switch\nend myFrenchStrings\n```\n\nAs you can see from the **exit**, **pass**, and **end** control structures, the name of \nthis setProp handler is the same as the name of the custom property set that it controls \n- \"myFrenchStrings\". Because there is only one handler for all the custom properties in \nthis set, the handler uses the **switch** control structure to perform a different action \nfor each property that it deals with.\n\nSuppose you change the \"standardErrorPrompt\" custom property:\n\n```\nset the customPropertySet of this stack to \"myFrenchStrings\"\nset the standardErrorPrompt of this stack to field 1\n```\n\nLiveCode sends a **setProp** trigger to the stack, which causes the above handler to \nexecute. The property you set – \"standardErrorPrompt\" – is placed in the \"myPropertyName\" \nparameter, and the new value--the contents of field 1 – is placed in the \"newValue\" \nparameter. The handler executes the case for \"standardErrorPrompt\", putting a **return** \ncharacter before and after the property before setting it.\n\nIf you set a custom property other than \"standardErrorPrompt\" or \"filePrompt\" in the \n\"myFrenchStrings\" set, the default case is executed. In this case, the **pass** control \nstructure lets the **setProp** trigger proceed along the message path, and when it reaches \nthe engine, LiveCode sets the custom property.\n\n> **Note:** As mentioned above, you can address a custom property in a set either by first \nswitching to that set, or using array notation to specify both set and property. The \nfollowing example:\n\n```\nset the customPropertySet of me to \"mySet\" \nset the myProperty of me to true\n```\n\nis equivalent to:\n\n```\nset the mySet[\"myProperty\"] of me to true\n```\n\nRegardless of how you set the custom property, if it is a member of a custom property set, \nthe **setProp** trigger has the name of the set - not the custom property itself - and you \nmust use a setProp handler in the form described above to trap the **setProp** trigger.\n\n### Responding to a request for the value of a custom property\n\nWhen you use a custom property in an expression, LiveCode sends a getProp call to the \nobject whose property's value is being requested.\n\nA getProp call acts very much like a custom function call. It is sent to a particular \nobject. If that object's script contains a **getProp** handler for the property, the \nhandler is executed, and LiveCode substitutes the value it returns for the custom property \nreference. Otherwise, the call travels along the message path until it finds a handler \nfor the property. If the getProp call reaches the end of the message path without being \ntrapped, LiveCode substitutes the custom property's value in the expression.\n\nYou can include as many **getProp** handlers in a script as you need.\n\n**The structure of a getProp handler**\n\nUnlike a message handler, a `getProp` handler begins with the word `getProp`instead of \nthe word `on`. This is followed by the handler's name (which is the same as the name of \nthe custom property). A `getProp` handler, like all handlers, ends with the word \"end\" \nfollowed by the handler's name.\n\nThe following example is a getProp handler for a custom property named \"percentUsed\":\n\n```\ngetProp percentUsed\n\tglobal lastAccessTime\n\tput the seconds into lastAccessTime\n\tpass percentUsed\nend lastChanged\n```\n\nWhen you use the \"percentUsed\" custom property in an expression, the handler is executed:\n\n```\nput the percentUsed of card 1 into myVariable\n```\n\nWhen this statement is executed, LiveCode sends a getProp call to the card to retrieve \nthe value of the \"percentUsed\" property. This executes the getProp handler for the \nproperty. The example handler stores the current date and time in a global variable \nbefore the property is evaluated. For more details, see *getProp* in the \n*LiveCode Dictionary*.\n\n**Returning a value from a getProp handler**\n\nWhen the getProp trigger reaches the engine – the last stop in the message path – \nLiveCode gets the custom property from the object and substitutes its value in the \nexpression where the property was used.\n\nTo let a trigger pass further along the message path, use the **pass** control structure. \nThe **pass** control structure stops the current handler and sends the trigger on to the \nnext object in the message path, just as though the object didn't have a handler for the \ncustom property.\n\nTo report a value other than the value that's stored in the custom property - for example, \nif you want to reformat the value first – you use the **return** control structure \ninstead of passing the getProp call. The following example is a getProp handler for a \ncustom property named \"lastChanged\", which holds a date in **seconds**:\n\n```\ngetProp lastChanged\nget the lastChanged of the target\nconvert it to long date\nreturn it\nend lastChanged\n```\n\nThe **return** control structure, when used in a getProp handler, reports a property \nvalue to the handler that requested it. In the above example, the converted date – not \nthe raw property – is what is reported. As you can see from the example, you're not \nlimited to returning the actual, stored value of the custom property. In fact, you can \nreturn any value at all from a getProp handler.\n\n> **Important:** If you use a custom property's value within the property's getProp \nhandler, no getProp call is sent to the target object. This is to avoid runaway \nrecursion, where the **getProp** handler calls itself.\n\nA handler can either use the **return** control structure to return a value, or use the \n**pass** control structure to let LiveCode get the custom property from the object.\n\nIf the getProp call is trapped before it reaches the engine and no value is returned in \nthe getProp handler, the custom property reports a value of **empty**. In other words, a \ngetProp handler must include either a **return** control structure or a **pass** control \nstructure, or its custom property will always be reported as empty.\n\n**Using the message path with a getProp call**\n\nBecause getProp calls use the message path, a single object can receive the getProp calls \nfor all the objects it owns. For example, getProp calls for all controls on a card are \nsent to the card, if the control's script has no handler for that property. You can take \nadvantage of the message path to implement the same **getProp** behavior for objects that \nall have the same custom property.\n\nIf a **getProp** handler is not attached to the object that has the custom property and \nit uses the value of the custom property, a runaway recursion will result. To avoid this \nproblem, set the **lockMessages** property to true before getting the custom property's \nvalue.\n\n**Nonexistent properties**\n\nIf the custom property specified by a getProp handler doesn't exist, the getProp handler \nis still executed if the property is used in an expression. Nonexistent properties report \n**empty**; getting the value of a custom property that doesn't exist does not cause a \nscript error.\n\n**Custom property sets and getProp handlers**\n\nA getProp handler for a custom property set behaves differently from a getProp handler \nfor a custom property that's in the default set.\n\nWhen you use the value of a custom property in a custom property set, the getProp call is \nnamed for the set, not the property. The property name is passed in a parameter using \narray notation. This means that, for custom properties in a set, you write a single \ngetProp handler for the set, rather than one for each individual property.\n\nThe following example handles getProp calls for all custom properties in a custom \nproperty set called *expertSettings*, which contains custom properties named \n*fileMenuContents*, *editMenuContents*, and perhaps other custom properties:\n\n```\ngetProp expertSettings[thePropertyName]\n\t-- The thePropertyName parameter contains the name of\n\t-- the property that's being set\n\tswitch thePropertyName\n\tcase \"fileMenuContents\"\n\t\tif the expertSettings[fileMenuContents] of the target is empty then return \"(No items\"\n\t\telse pass expertSettings\n\tbreak\n\tcase \"editMenuContents\"\n\t\tif the expertSettings[editMenuContents] of the target is empty then return the noviceSettings[editMenuContents] of the target\n\t\telse pass expertSettings\n\tbreak\n\tdefault\n\t\tpass expertSettings\n\tend switch\nend expertSettings\n```\n\nAs you can see from the **pass** and **end** control structures, the name of this getProp \nhandler is the same as the name of the custom property set that it controls – \n\"expertSettings\". Because there is only one handler for all the custom properties in this \nset, the handler uses the **switch** control structure to perform a different action for \neach property that it deals with.\n\nSuppose you get the \"fileMenuContents\" custom property:\n\n```\nset the customPropertySet of button 1 to \"expertSettings\"\nput the fileMenuContents of button 1 into me\n```\n\nLiveCode sends a getProp call to the button, which causes the above handler to execute. \nThe property you queried – \"fileMenuContents\" – is placed in the \"thePropertyName\" \nparameter. The handler executes the case for \"fileMenuContents\": if the property is empty, \nit returns \"(No items\". Otherwise, the **pass** control structure lets the getProp call \nproceed along the message path, and when it reaches the engine, LiveCode gets the custom \nproperty.\n\n## Virtual Properties\n\nA virtual property is a custom property that exists only in a **setProp** and/or \n**getProp** handler, and is never actually set. Virtual properties are never attached to \nthe object. Instead, they act to trigger **setProp** or **getProp** handlers that do the \nactual work.\n\nWhen you use the **set** command with a virtual property, its setProp handler is executed, \nbut the **setProp** trigger is not passed to the engine, so the property is not attached \nto the object. When you use a virtual property in an expression, its getProp handler \nreturns a value without referring to the object. In both cases, using the property simply \nexecutes a handler.\n\nYou can use virtual properties to:\n- Give an object a set of behaviors\n- Compute a value for an object\n- Implement a new property that acts like a built-in property\n\n### When to use virtual properties\n\nBecause they're not stored with the object, virtual properties are transient: that is, \nthey are re-computed every time you request them. When a custom property depends on other \nproperties that may be set independently, it's appropriate to use a virtual property.\n\nFor example, the following handler computes the current position of a scrollbar as a \npercentage (instead of an absolute number):\n\n```\ngetProp asPercentage *-- of a scrollbar*\n\tput the endValue of the target - the startValue of the target into valueExtent\n\treturn the thumbPosition of me \\* 100 div valueExtent\nend asPercentage\n```\n\nThe \"asPercentage\" custom property depends on the scrollbar's **thumbPosition**, which \ncan be changed at any time (either by the user or by a handler). Because of this, if we \nset a custom property for the object, it would have to be re-computed every time the \nscrollbar is updated in order to stay current. By using a virtual property, you can \nensure that the value of the property is never out of date, because the getProp handler \nre-computes it every time you call for the \"asPercentage\" of the scrollbar.\n\nVirtual properties are also useful solutions when a property's value is large. Because \nthe virtual property isn't stored with the object, it doesn't take up disk space, and \nonly takes up memory when it's computed.\n\nAnother reason to use a virtual property is to avoid redundancy. The following handler \nsets the width of an object, not in pixels, but as a percentage of the object's owner's \n**width**:\n\n```\nsetProp percentWidth newPercentage\n\tset the width of the target to the width of the owner of the target * newPercentage div 100\nend percentWidth\n```\n\nSuppose this handler is placed in the script of a card button in a 320-pixel-wide stack. \nIf you set the button's \"percentWidth\" to 25, the button's **width** is set to 80, which \nis 25% of the card's 320-pixel width. It doesn't make much sense to store an object's \npercentWidth, however, because it's based on the object's **width** and its owner's \n**width**.\n\nConsider using virtual properties whenever you want to define an attribute of an object, \nbut it doesn't make sense to store the attribute with the object – because it would be \nredundant, because possible changes to the object mean it would have to be re-computed \nanyway, or because the property is too large to be easily stored.\n\n### Handlers for a virtual property\n\nAs you can see by looking at the example above, a handler for a virtual property is \nstructured like a handler for any other custom property. The only structural difference \nis that, since the handler has already done everything necessary, there's no need to \nactually attach the custom property to the object or get its value from the object. When \nyou set a virtual property or use its value, the **setProp** trigger or **getProp** call \ndoes not reach the engine, but is trapped by a handler first.\n\n**Virtual property setProp handlers**\n\nA setProp handler for an ordinary custom property includes the **pass** control structure, \nallowing the **setProp** trigger to reach the engine and set the custom property (or else \nit includes a **set** command that sets the property directly). A handler for a virtual \nproperty, on the other hand, does not include the **pass** control structure, because a \nvirtual property should not be set. Since the property is set automatically when the \ntrigger reaches the end of the message path, a virtual property's handler does not pass \nthe trigger.\n\nIf you examine an object's custom properties after setting a virtual property, you'll \nfind that the custom property hasn't actually been created. This happens because the \n**setProp** handler traps the call to set the property; unless you pass the setProp \ntrigger, the property isn't passed to LiveCode, and the property isn't set.\n\n**Virtual property getProp handlers**\n\nSimilarly, a getProp handler for an ordinary custom property either gets the property's \nvalue directly, or passes the getProp call so that the engine can return the property's \nvalue. But in the case of a virtual property, the object doesn't include the property, so \nthe getProp handler must return a value.\n\n### Creating new object properties\n\nYou can use virtual properties to create a new property that applies to all objects, or \nto all objects of a particular type. Such a property acts like a built-in property, \nbecause you can use it for any object. And because a virtual property doesn't rely on a \ncustom property being stored in the object, you don't need to prepare by creating the \nproperty for each new object you create: the virtual property is computed only when you \nuse it in an expression.\n\nThe following example describes how to implement a virtual property called \"percentWidth\" \nthat behaves like a built-in property.\n\n**Setting the \"percentWidth\" property**\n\nSuppose you place the \"percentWidth\" handler described above in a stack script instead of \nin a button's script:\n\n```\nsetProp percentWidth newPercentage\n\tset the width of the target to the width of the owner of the target * newPercentage div 100\nend percentWidth\n```\n\nBecause **setProp** triggers use the message path, if you set the \"percentWidth\" of any \nobject in the stack, the stack receives the **setProp** trigger (unless it's trapped by \nanother object first). This means that if the handler is in the stack's script, you can \nset the \"percentWidth\" property of any object in the stack.\n\nIf you place the handler in a backscript, you can set the \"percentWidth\" of any object, \nanywhere in the application.\n\nTo refer to the object whose property is being set, use the **target** function. The \n**target** refers to the object that first received the **setProp** trigger--the object \nwhose custom property is being set--even if the handler being executed is in the script \nof another object.\n\n**Getting the \"percentWidth\" property**\n\nThe matching getProp handler, which lets you retrieve the \"percentWidth\" of an object, \nlooks like this:\n\n```\ngetProp percentWidth\n\treturn 100 \\* (the width of the target div the width of the owner of the target)\nend percentWidth\n```\n\nIf you place the handler above in a card button's script, the following statement reports \nthe button's width as a percentage:\n\n```\nput the percentWidth of button \"My Button\" into field 12\n```\n\nFor example, if the stack is 320 pixels wide and the button is 50 pixels wide, the \nbutton's **width** is 15% of the card **width**, and the statement puts \"15\" into the \nfield.\n\nLike the **setProp** handler for this property, the **getProp** handler should be placed \nfar along the message path. Putting it in a stack script makes the property available to \nall objects in the stack; putting it in a backscript makes the property available to all \nobjects in the application.\n\n**Limiting the \"percentWidth\" property**\n\nMost built-in properties don't apply to all object types, and you might also want to \ncreate a virtual property that only applies to certain types of objects. For example, \nit's not very useful to get the width of a substack as a percentage of its main stack, \nor the width of a card as a percentage of the stack's width.\n\nYou can limit the property to certain object types by checking the **target** object's \nname:\n\n```\nsetProp percentWidth newPercentage\n\tif word 1 of the name of the target is \"stack\" or word 1 of the name of the target is \"card\" then exit setProp\n\tset the width of the target to the width of the owner of the target * newPercentage div 100\nend percentWidth\n```\n\nThe first word of an object's **name** is the object type, so the above revised handler \nignores setting the \"percentWidth\" if the object is a card or stack.\n\n## Property Profiles\n\nA property profile is a collection of object property settings, which is stored as a set. \nA profile for an object can contain settings for almost any properties of the object.\n\nYou can include values for most built-in properties in a profile, and create as many \ndifferent property profiles as you need for any object. Once you've created a profile, \nyou can switch the object to the profile to change all the property values that are \ndefined in the profile.\n\nFor example, suppose you create a property profile for a field that includes settings for \nthe field's color properties. When you switch to that profile, the field's colors change, \nwhile all other properties (not included in the profile) remain the same.\n\nUse property profiles when you want to:\n\n- Create \"skins\" for your application\n- Display your application in different languages\n- Present different levels--\"novice\",\"expert\", and so on\n- Use different user-interface standards for different platforms\n\nFor details on how to create property profiles using the IDE, see the section on \n*Property Profiles* in the chapter *Building a User Interface*.\n\n### Profile names\n\nProfile names follow the same rules as variable names. A profile name must be a single \nword, consisting of letters, digits, and underscores, and must start with either a letter \nor an underscore.\n\n> **Tip:** If you want to use a single command to switch several objects to a particular \nprofile, give the profile the same name for each of the objects it applies to.\n\n### The master profile\n\nEvery object has a master profile that holds the default settings for all its properties. \nIf you don't set an object's profile, the master profile is used. When you create a new \nprofile, you can change settings for various properties to make them different from the \nmaster profile's settings.\n\nIf you don't specify a property setting in a profile, the master profile's setting is \nused, so you don't have to specify all properties of an object when you create a profile, \nonly the ones you want to change.\n\nBy default, the master profile is named \"Master\". You can change the master profile's name \nin the *Property Profiles* pane of the *Preferences* window.\n\n### Switching between profiles\n\n**Switching a single object**\n\nTo switch an object's profile, you can use either the object's property inspector or the \n**revProfile** property.\n\n```\nset the revProfile of player \"My Player\" to \"MyProfile\"\n```\n\n**Switching all the objects on a card**\n\nTo switch the profiles of all the objects on a card, use the **revSetCardProfile** \ncommand:\n\n```\nrevSetCardProfile \"MyProfile\",\"My Stack\"\n```\n\nThe statement above sets the profile of all objects on the current card of the stack named \n\"My Stack\". (Although the **revSetCardProfile** command changes a card, you specify a \nstack name, not a card name.)\n\nIf an object on the card does not have a profile with the specified name, the object is \nleft untouched.\n\n**Switching all the objects in a stack**\n\nTo switch the profiles of all the objects in a stack, use the **revSetStackProfile** \ncommand:\n\n```\nrevSetStackProfile \"MyProfile\",\"My Stack\"\n```\n\nThe statement above sets the profile of all objects in the stack named \"My Stack\".\n\nIf an object in the stack does not have a profile with the specified name, the object is \nleft untouched.\n\n**Switching all the objects in a stack file**\n\nTo switch the profiles of all the objects in every stack in a stack file, use the \n**revSetStackFileProfile** command:\n\n```\nrevSetStackFileProfile \"MyProfile\",\"My Stack\"\n```\n\nThe statement above sets the profile of all objects in the stack named \"My Stack\", along \nwith any other stacks in the same stack file.\n\nIf an object in any of the stacks does not have a profile with the specified name, the \nobject is left untouched.\n\n### Creating a profile in a handler\n\nIn addition to creating property profiles in the property inspector, you can create a \nprofile in a handler.\n\nTo enable creating profiles, check the \"Create profiles automatically\" box in the \n\"Property Profiles\" pane of the Preferences window. If this box is checked, setting the \n**revProfile** property of an object automatically creates the profile.\n\nThis ability is particularly useful if you want to create a number of profiles, as shown \nin the following example:\n\n```\non mouseUp\n\t-- creates a profile for each card in the stack\n\trepeat with thisCard = 1 to the number of cards\n\t\tset the revProfile of card x to \"myNewProfile\"\n\tend repeat\nend mouseUp\n```\n\nThe handler above creates a profile called \"myNewProfile\" for all the cards in the current \nstack.\n\nIn order for this handler to work, the \"Create profiles automatically\" option in the \n\"Property Profiles\" pane of the Preferences window must be turned on.\n\nYou can control this behavior either in Preferences window or using the \n**gRevProfileReadOnly** keyword. If you don't want to save property changes when switching \nprofiles, do one of the following:\n\nSet the **gRevProfileReadOnly** variable to true:\n\n```\nglobal gRevProfileReadOnly\nput true into gRevProfileReadOnly\n```\n\nIn the \"Property Profiles\" pane of the Preferences window, uncheck the box labeled \"Don't \nsave changes in profile\".\n\nThe two methods of changing this setting are equivalent: changing the \n**gRevProfileReadOnly** variable also changes the preference setting, and vice versa.\n\nFor more details, see *gRevProfileReadOnly* in the *LiveCode Dictionary*.\n\n### Adding profile settings in a handler\n\nYou can add a property setting to a profile by switching to the profile, then setting the \nproperty:\n\n```\nset the revProfile of button 1 to \"MyProfile\"\nset the foregroundColor of button 1 to \"red\"\nset the revProfile of button 1 to \"Master\"\n```\n\nBy default, if you change a property and then switch profiles, the property you changed \nand its current setting is saved with the profile.\n\n## Managing Windows, Palettes and Dialogs\n\nLiveCode provides complete control over all aspects of window management, including moving, \nre-layering, and changing window mode.\n\n### Moving a window\n\nUsually, you use either the **location** or **rectangle** property of a stack to move the \nstack window.\n\nThe**location** property specifies the center of the stack's window, relative to the top \nleft corner of the main screen. Unlike the **location** of controls, the **location** of \na stack is specified in absolute coordinates. The following statement moves a stack to \nthe center of the main screen:\n\n```\nset the location of stack \"Wave\" to the screenLoc\n```\n\nThe **rectangle** property of a stack specifies the position of all four edges, and can \nbe used to resize the window as well as move it:\n\n```\nset the rectangle of this stack to \"100,100,600,200\"\n```\n\n> **Tip:** To open a window at a particular place without flickering, set the stack's \n**location** or **rectangle** property to the desired value either before going to it, \nor in the stack’s preOpenStack handler.\n\nYou can also use associated properties to move a window. Changing a stack's **bottom** \nor **top** property moves the window up or down on the screen. Changing the **left** or \n**right** property moves the window from side to side.\n\n### Changing a window's layer\n\nYou bring a window to the front by using the **go** command:\n\n```\ngo stack \"Alpha\"\n```\n\nIf the stack is already open, the **go** command brings it to the front, without changing \nits mode.\n\nTo find out the layer order of open stack windows, use the **openStacks** function. This \nfunction lists all open stack windows in order from front to back.\n\n**The palette layer**\n\nNormally, palette windows float above editable windows and modeless dialog boxes. A \npalette will always above a standard window, even if you bring the standard window to the \nfront. This helps ensure that palettes, which usually contain tools that can be used in \nany window, cannot disappear behind document windows. It's also a good reason to make \nsure you design palette windows to be small, because other windows cannot be moved in \nfront of them if the palette blocks part of the window.\n\n**The system palette layer**\n\nSystem windows--stacks whose **systemWindow** property is true--float above all other \nwindows, in every running application. This means that even if the user brings another \napplication to the front, your application's system windows remain in front of all \nwindows.\n\nSystem windows are always in front of other windows, and you cannot change this behavior.\n\n### The active window\n\nIn most applications, commands are applied to the active window. Since LiveCode gives you \nthe flexibility to use several different window types, not all of which are editable, the \ncurrent stack is not always the same as the active window. The current stack is the target \nof menu choices such as **View -\\> Go Next** and is the stack specified by the expression\n*this stack*.\n\nFor example, executing the **find** command may have unexpected results if stacks of \ndifferent modes are open, because under these conditions, the search may target a stack \nthat is not the frontmost window.\n\n**Finding the current stack**\n\nThe current stack--the stack that responds to commands--is designated by the \n**defaultStack** property. To determine which stack is the current stack, use the \nfollowing rules:\n\n**1.** If any stacks are opened in an editable window, the current stack is the frontmost \nunlocked stack. (A stack is unlocked if its **cantModify** property is set to false.)\n\n**2.** If there are no unlocked stacks open, the current stack is the frontmost locked \nstack in an editable window.\n\n**3.** If there are no stacks open in an editable window, the current stack is the \nfrontmost stack in a modeless dialog box.\n\n**4.** If there are no editable or modeless windows open, the current stack is the \nfrontmost palette.\n\nAnother way of expressing this set of rules is to say that the current stack is the \nfrontmost stack with the lowest **mode** property. You can find out which stack has the \nlowest **mode** using the **topStack** function.\n\n**The topStack function and the defaultStack property:**\n\nThe **defaultStack** property specifies which stack is the current stack. By default, \nthe **defaultStack** is set to the **topStack**, although you can change the \n**defaultStack** to any open stack.\n\nThe **topStack** function goes through the open stacks first by **mode**, then by layer. \nFor example, if any editable windows are open, the topmost editable window is the \n**topStack**. If there are no editable windows, the **topStack** is the topmost modeless \ndialog box, and so on.\n\n**Changing the current stack**\n\nTo operate on a stack other than the current stack, set the **defaultStack** property to \nthe stack you want to target before executing the commands. Usually, the **defaultStack** \nis the **topStack**, but you can change it if you want to override the usual rules about \nwhich window is active.\n\n**A note about Unix systems**\n\nIf your system is set up to use pointer focus rather than click-to-type or explicit focus, \nyou may experience unexpected results when using LiveCode, since the current stack will \nchange as you move the mouse pointer. It is recommended that you configure your system to \nuse explicit focus when using LiveCode or any other applications created in LiveCode.\n\n### Creating a backdrop\n\nFor some applications, you may want to create a solid or patterned backdrop behind your \napplication's windows. This backdrop prevents other applications' windows from being seen \n– although it does not close those windows – so it's appropriate for applications like a \ngame or kiosk, where the user doesn't need to see other applications and where you want \nto keep distractions to a minimum.\n\n> **Note:** In LiveCode Media edition, you cannot turn off the backdrop property.\n\nTo create a backdrop, you set the **backdrop** property to either a valid color reference, \nor the **ID** of an image you want to use as a tiled pattern:\n\n```\nset the backdrop to \"\\#99FF66\" *-- a color*\nset the backdrop to 1943 *-- an image ID*\n```\n\nIn the LiveCode development environment, you can create a backdrop by choosing \n**View -\\> Backdrop**. Use the Preferences dialog box to specify a backdrop color to use.\n\n### Open, Closed, and Hidden Windows\n\nEach open stack is displayed in a stack window. A stack can be open without being visible, \nand can be loaded into memory without being open.\n\n**Hidden stacks**\n\nA stack window can be either shown or hidden, depending on the stack's **visible** \nproperty. This means a window can be open without being visible on the screen.\n\n> **Tip:** To list all open stacks, whether they're visible or hidden, use the \n**openStacks** function.\n\n**Loaded stacks**\n\nA stack can also be loaded into memory without actually being open. A stack whose window \nis closed (not just hidden) is not listed by the **openStacks** function. However, it \ntakes up memory, and its objects are accessible to other stacks. For example, if a closed \nstack that's loaded into memory contains a certain image, you can use the image as a \nbutton icon in another stack.\n\nA stack can be loaded into memory without being open under any of the following \nconditions:\n\nA handler in another stack referred to a property of the closed stack. This automatically \nloads the referenced stack into memory.\n\nThe stack is in the same stack file as another stack that is open.\n\nThe stack was opened and then closed, and its **destroyStack** property is set to false. \nIf the **destroyStack** property is false, the stack is closed, but not unloaded, when its \nwindow is closed.\n\n> **Tip:** To list all stacks in memory, whether they're open or closed, use the \n**revLoadedStacks** function.\n\n### The states of a stack\n\nA stack, then, can be in any of four states:\n\n**Open and visible:**The stack is loaded into memory, its window is open, and the window \nis visible.\n\n**Open and hidden:**The stack is loaded into memory, its window is open, but the window \nis hidden. The stack is listed in the Window menu and in the Project Browser.\n\n**Closed but loaded into memory:**The stack is loaded into memory, but its window is not \nopen and it is not listed by the **openStacks** function or in the Window menu. However, \nits objects are still available to other stacks, and it is listed in the Project \nBrowser. A stack that is closed but loaded into memory has a **mode** property of zero.\n\nTo remove such a stack from memory, choose **Tools -\\> Project Browser**, find the \nstack's name, and Right-click it in the Project Browser window and choose \n\"Close and Remove from Memory\" from the contextual menu.\n\n**Closed:**The stack is not loaded into memory and has no effect on other stacks.\n\n### **Window Types and the Mode Property**\n\nIn a script, you can find out a stack window's type by checking the stack's **mode** \nproperty. This read-only property reports a number that depends on the window type. For \nexample, the **mode** of an editable window is 1, and the **mode** of a **palette** is 4.\n\nYou can use the **mode** property in a script to check what sort of window a stack is \nbeing displayed in:\n\n```\nif the mode of this stack is 5 then *-- modal dialog box*\n\tclose this stack\nelse -- some other type of window\n\tbeep\nend if\n```\n\nFor complete information about the possible values of the **mode** property, see its \nentry in the LiveCode Dictionary.\n\n### Window Appearance\n\nDetails of a window's appearance, such as the height of its title bar and the background \ncolor or pattern in the window itself, are mainly determined by the stack's mode. There \nare a few additional elements of window appearance that you can control with specific \nproperties.\n\n**The metal property**\n\nOn OS X systems, you use a stack's **metal** property to give the stack window a textured \nmetal appearance. This metal appearance applies to the stack's title bar and its \nbackground.\n\n> **Tip:** The metal appearance, in general, should be used only for the main window of \nan application, and only for windows that represent a physical media device such as a CD \nplayer. See Apple's Aqua user-interface guidelines for more information.\n\n**Window background color**\n\nThe background color or pattern of a window's content area--the part that isn't part of \nthe title bar--is determined by the window type and operating system, by default. For \nexample, on Mac OS X systems, a striped background appears in palettes and modeless dialog \nboxes.\n\nIf you want a window to have a specific color or pattern, you can set the stack's \n**backgroundColor** or **backgroundPattern** property:\n\n```\nset the backgroundColor of stack \"Alpha\" to \"aliceblue\"\nset the backgroundPattern of stack \"Beta\" to 2452 *-- img ID*\n```\n\nThis color or pattern overrides the usual color or background pattern.\n\n### The Decorations Property\n\nMost of the properties that pertain to a window's appearance can also be set in the \nstack's **decorations** property. The **decorations** of a stack consists of a \ncomma-separated list of decorations:\n\n```\nset the decorations of stack \"Gamma\" to \"title,minimize\"\n```\n\nThe statement above sets the stack's**minimizeBox** property to true, as well as showing \nits title bar, and sets other stack properties (**maximizeBox**, **closeBox**, **metal**) \nto false. Conversely, if you set a stack's **minimizeBox** property to true, its \n**decorations** property is changed to include \"minimize\" as one of its items. In this \nway, the **decorations** property of a stack interacts with its **closeBox**, \n**minimizeBox**, **zoomBox**, **metal**, **shadow**, and **systemWindow** properties.\n\n**The decorations property and menu bars in a window**\n\nOn Linux and Windows systems, the menu bar appears at the top of the window. On these \nsystems, whether a window displays its menu bar is determined by whether the stack's \n**decorations** property includes \"menu\":\n\n```\nset the decorations of this stack to \"title,menu\"\n```\n\nOn Mac OS X systems, the menu bar appears at the top of the screen, outside any window. \nOn these systems, the \"menu\" decoration has no effect.\n\n**Title bar**\n\nThe user drags the title bar of a window to move the window around the screen. In general, \nif the title bar is not displayed, the user cannot move the window. You use the \n**decorations** property (discussed below) to hide and show a window's title bar.\n\nWhen the user drags the window, LiveCode sends a **moveStack** message to the current \ncard.\n\nThe **decorations** property affects only whether the window can be moved by dragging it. \nEven if a stack's **decorations** property does not include the title bar decoration, you \ncan still set a stack's **location**, **rectangle**, and related properties to move or \nresize the window.\n\n**Window title**\n\nThe title that appears in the title bar of a window is determined by the stack's **label** \nproperty. If you change a stack's **label** in a script, the window's title is immediately \nupdated.\n\nIf the **label** is empty, the title bar displays the stack's **name** property. (If the \nstack is in an editable window whose **cantModify** is false, an asterisk appears after \nthe window title to indicate this, and if the stack has more than one card, the card \nnumber also appears in the window title. These indicators do not appear if the stack has \na **label**.)\n\nBecause the window title is determined by the stack's **label** property instead of its \n**name** property, you have a great deal of flexibility in changing window title. Your \nscripts refer to the stack by its **name**--which doesn't need to change--not its \n**label**, so you can change the window title without changing any scripts that refer to \nthe stack.\n\n**The close box**\n\nThe close box allows the user to close the window by clicking it. To hide or show the \nclose box, you set the stack's **closeBox** property:\n\n```\nset the closeBox of stack \"Bravo\" to false\n```\n\nWhen the user clicks the close box, LiveCode sends a **closeStackRequest** message, \nfollowed by a **closeStack** message, to the current card.\n\nThe **closeBox** property affects only whether the window can be closed by clicking. \nEven if a stack's **closeBox** property is false, you can still use the **close** command \nin a handler or the message box to close the window.\n\n**The minimize box or collapse box**\n\nThe terminology and behavior of this part of the title bar varies depending on platform. \nThe minimize box shrinks the window to a desktop icon.\n\nTo hide or show the minimize box or collapse box, you set the stack's **minimizeBox** \nproperty:\n\n```\nset the minimizeBox of this stack to true\n```\n\n> **Tip:** On OS X and Linux systems, you can set a stack's **icon** property to specify \nthe icon that appears when the stack is minimized.\n\nWhen the user clicks the minimize box or collapse box, LiveCode sends an **iconifyStack** \nmessage to the current card.\n\n**The maximize box or zoom box**\n\nThe terminology and behavior of this part of the title bar varies depending on platform. \nOn Mac OS X systems, the zoom box switches the window between its current size and \nmaximum size. The maximize box (Linux and Windows systems) expands the window to its \nmaximum size.\n\nTo hide or show the zoom box or maximize box, you set the stack's **zoomBox** property:\n\n```\nset the zoomBox of stack \"Hello\" to false\n```\n\nWhen the user clicks the zoom box or maximize box, LiveCode sends a **resizeStack** \nmessage to the current card.\n\n### Making a stack resizable\n\nA stack's **resizable** property determines whether the user can change its size by \ndragging a corner or edge (depending on operating system) of the stack window.\n\n> **Tip:** To move and resize controls automatically to fit when a stack is resized, use \nthe \"Geometry\" pane in the control's property inspector.\n\nSome stack modes cannot be resized, regardless of the setting of the stack's **resizable** \nproperty. Modal dialog boxes, sheets, and drawers cannot be resized by the user, and do \nnot display a resize box.\n\nThe **resizable** property affects only whether the window can be resized by dragging a \ncorner or edge. Even if a stack's **resizable** property is set to false, you can still \nset a stack's **location**, **rectangle**, and related properties to move or resize the \nwindow.\n\nWhen the user resizes a stack, LiveCode sends a **resizeStack** message to the current \ncard.\n\n### Irregularly-Shaped and Translucent Windows\n\nYou can set a stack’s **windowShape** property to the transparent, or *alpha channel* of \nan image that has been imported together with its alpha channel. This allows you to \ncreate a window with \"holes\" or a window with variable translucency. You can apply a \nshape to any type of stack, regardless of the mode it is opened, allowing such a window \nto exhibit modal behavior as a dialog, float as a palette, etc.\n\nYou may use either a GIF or PNG image for irregularly shaped windows. If you want \ntranslucency you must use PNG images.\n\n## Programming Menus & Menu Bars\n\nMenus in LiveCode are not a separate object type. Instead, you create a menu from either \na button or a stack, then use special commands to display the menu or to include it in a \nmenu bar.\n\nThis topic discusses menu bars, menus that are not in the menu bar (such as contextual \nmenus, popup menus, and option menus), how to make menus with special features such as \ncheckmarks and submenus, and how to use a stack window as a menu for total control over \nmenu appearance.\n\nTo easily create menu bars that work cross-platform, choose **Tools -\\> Menu Builder**. \nSee the section on the *Menu Builder* in the chapter on *Building a User interface* for \nmore details. The details about menu bars in this topic are needed only if you want edit \nmenu bars by script, for example if you want to include specific features not supported \nby the Menu Builder.\n\n### Menu Types\n\nLiveCode supports several menu types: *pulldown* menus, *option* menus (usually called \npopup menus on Mac OS X), *popup* menus (usually called contextual menus on Mac OS X), \nand *combo boxes*.\n\nEach of these menu types is implemented by creating a button. If the button's **style** \nproperty is set to \"menu\", clicking it causes a menu to appear. The button's **menuMode** \nproperty determines what kind of menu is displayed.\n\nEven menu bars are created by making a pulldown-menu button for each menu, then grouping \nthe buttons to create a single menu bar. The menu bar can be moved to the top of the \nstack window (on Unix and Windows systems). To display the menu bar in the standard \nlocation at the top of the screen on Mac OS X systems, you set the stack's \n**menubar** property to the group's name. The name of each button is displayed in the \nmenu bar as a menu, and pulling down a menu displays the contents of the button as a list \nof menu items.\n\n### Button Menus\n\nYou can create a button menu by dragging out one of the menu controls from the tools \npalette. However, if you want to create one by script, the easiest is to create a button \nand set the **style** of the button to \"menu\". Next, you can set the **menuMode** of the \nbutton to the appropriate menu type. You can either set the **menuMode** in a handler, or \nuse the Type menu in the button's property inspector to set the menu type.\n\nTo create the individual menu items that will appear in the menu, set the button's \n**text** property to the menu's contents, one menu item per line. You can either set this \nproperty in a handler, or fill in the box labeled \"Menu items\" on the Basic Properties \npane of the property inspector.\n\nWhen you click the button, the specified menu type appears, with the text you entered \ndisplayed as the individual menu items in the menu.\n\n> **Tip:** To dynamically change the menu's contents at the time it's displayed, put a \n**mouseDown** handler in the button's script that puts the desired menu items into the \nbutton. When the menu appears, it displays the new menu items.\n\nFor menus that retain a state (such as option menus and combo boxes), the button's \n**label** property holds the text of the currently chosen menu item.\n\n**Handling the menuPick message**\n\nWhen the user chooses an item from the menu, LiveCode sends the **menuPick** message to \nthe button. The message parameter is the name of the menu item chosen. If you want to \nperform an action when the user chooses a menu item, place a **menuPick** handler like \nthis one into the button's script:\n\n```\non menuPick theMenuItem\n\tswitch theMenuItem\n\tcase \"Name of First Item\"\n\t\t-- do stuff here for first item\n\tbreak\n\tcase \"Name of Second Item\"\n\t\t-- do stuff here for second item\n\tbreak\n\tcase \"Name of Third Item\"\n\t\t-- do stuff here for third item\n\tbreak\n\tend switch\nend menuPick\n```\n\n**Changing the currently-chosen menu item**\n\nFor menus that retain a state (such as option menus and combo boxes), you can change the \ncurrently-chosen menu item by changing the button's **label** property to the text of the \nnewly chosen item\n\nIf you change the currently-chosen menu item in option menus, also set the button's \n**menuHistory** property to the line number of the newly chosen item. This ensures that \nthe new choice will be the one under the mouse pointer the next time the user clicks the \nmenu.\n\n### Creating Cascading Menus\n\nTo create a cascading menu (also called a submenu, pull-right menu, or hierarchical menu), \nadd a tab character to the start of menu items that you want to place in the submenu.\n\nFor example, the following text, when placed in a menu button, creates two menu items, \nthen a submenu containing two more items, and finally a last menu item:\n\n**First Item**\n\n**Second Item**\n\n**Third Item Is A Submenu**\n\n**First Item In Submenu**\n\n**Second Item In Submenu**\n\n**Last Menu Item Not In Submenu**\n\nThe depth of a submenu item is determined by the number of tab characters before the menu \nitem's name. The submenu item becomes part of the closest line above the submenu item that \nhas one fewer leading tab character.\n\nThis means that the first line of a menu cannot start with a tab character, and any line \nin the button's text can have at most one more tab character than the preceding line.\n\n> **Important:** You cannot create a cascading combo box at all, and cascading option \nmenus do not work properly on all platforms. In general, you should create cascading \nmenus only as a part of a pulldown menu.\n\n**Cascading menus and the menuPick message**\n\nWhen the user chooses a menu item in a cascading menu, the parameter of the **menuPick** \nmessage contains the menu item name and the name of the submenu it's part of, separated \nby a vertical bar (`|`). For example, if the user chooses the \"Second Item In Submenu\" \nfrom the menu described above, the parameter sent with the **menuPick** message is:\n\n```\nThird Item Is A Submenu|Second Item In Submenu\n```\n\n### Ticks, Dashes & Checks in Menus\n\nThere are several special characters that you can put at the start of a line in the \nbutton's contents to change the behavior of the menu item:\n\n- A dash on a line by itself creates a divider line\n!c checks the menu item\n!n unchecks the menu item\n!r places a diamond at the start of the menu item\n!u removes the diamond\n\nIf you include any of the above special characters in a submenu item, the special \ncharacter must be placed at the start of the line – before the tab characters that make \nit a submenu item.\n\n> **Note:** You cannot create divider lines in combo boxes or in option menus on Windows \nsystems.\n\nThere are three other special characters that can appear anywhere in a line:\n\nPutting the `&`character anywhere in a line underlines the next character and makes it \nthe keyboard mnemonic for that menu item on Windows systems. The `&`character does not \nappear in the menu, and is not sent with the parameter to the **menuPick** message when \nyou choose the item from a menu.\n\nPutting the `/`character anywhere in a line makes the next character the keyboard \nequivalent for the menu item. Neither the `/`nor the character following it appear in the \nmenu, nor do they appear in the parameter to the **menuPick** message.\n\nTo put an `&`or / character in the text of a menu, double the characters: &`&`or //.\n\nPutting the `(`character anywhere in a line disables the menu item. To put a `(`character \nin a menu item without disabling it, precede it with a backslash: \\\\(.\n\n> **Note:** You cannot disable lines in combo boxes or in option menus on Windows systems.\n\nAll of the above special characters are filtered out of the parameter sent with the \n**menuPick** message when the user chooses a menu item. The parameter is the same as the \ncharacters that are actually displayed in the menu.\n\n> **Note:** The font and color of a button menu is determined by the button's font and \ncolor properties. However, on Mac OS systems, the font and color of the option menus and \npopup menus is controlled by the operating system's settings if the **lookAndFeel** is \nset to \"Appearance Manager\", rather than by the button's font and color properties.\n\n**Enabling and disabling menu items**\n\nTo enable or disable a menu item in a handler, you can add or remove the \"(\" special \ncharacter, but it is generally easier to use the **enable menu** and **disable menu** \ncommands:\n\n```\nenable menuItem 3 of button \"My Menu\"\ndisable menuItem 4 of me\n```\n\nThese commands simply add or remove the `(`special character at the start of the \ndesignated line of the button's contents.\n\n### Menu Bars on Linux and Windows Systems\n\nA menu bar is made up of a group of menu buttons, with the **menuMode** property of each \nbutton set to \"pulldown\".\n\n> **Tip:** The Menu Builder can automatically create a menu bar for you. To use the Menu \nBuilder, choose **Tools -\\> Menu Builder**.\n\nTo create a menu bar by hand without using the Menu Builder:\n\n**1.** Create a button for each menu, set the **style** of each button to \"menu\", and set \nthe **menuMode** of the button to \"pulldown\". You can either set these properties in a \nhandler, or simply choose **Object -\\> New Control Pulldown Menu** to create each button.\n\n**2.** Put the menu items into each button's contents. In each button's script, create a \n**menuPick** handler to perform whatever actions you want to do when a menu item is \nchosen.\n\n**3.** Select the buttons and form them into a group, then move the group to the \nappropriate position at the top of the window. For Windows systems, set the **textFont** \nof the group to the standard font for Windows menus, \"MS Sans Serif\".\n\n> **Important:** The buttons in your menu bar should not overlap. Overlapping buttons may \ncause unexpected behavior when the user tries to use a menu.\n\n### Menu Bars on Mac OS X Systems\n\nTo create a Mac OS X menu bar, you follow the same steps as for a Linux and Windows menu \nbar above. This places a group of buttons, each of whose **menuMode** property is set to \n\"pulldown\", at the top of your stack window.\n\nNext, you set the **menubar** property of your stack to the name of the group. This does \ntwo things: it displays the menus in the menu bar at the top of the screen, and it \nshortens the stack window and scrolls it up so that the group of menu buttons is not \nvisible in the window. Since the menus are in the menu bar, you don't need to see them in \nthe stack window as well.\n\n> **Important:** If your stack has more than one card, make sure that the group is placed \non all the cards. (To place a group on a card, choose **Object menu Place Group**, or use \nthe **place** command.) This ensures that the menu bar will be accessible on all cards of \nthe stack, and prevents the stack from changing size as you move from card to card (to \naccommodate shortening the stack window for the menu bar group).\n\n**The default menu bar**\n\nIf other stacks in your application don't have their own menu bars, set the \n**defaultMenubar** global property to the name of your menu group, as well as setting the \nstack's **menubar** property. The **defaultMenubar** is used for any stack that doesn't \nhave a menu bar of its own.\n\n> **Tip:** For a custom menu bar to work correctly inside the LiveCode development \nenvironment, you must set the **defaultMenubar** to the name of your menu group. This \noverrides the LiveCode IDE menu bar. You can get the menu bar back by choosing the \npointer tool.\n\n**Button menu references**\n\nIf the button is a button menu that's being displayed in the menu bar, you can use the \nword \"menu\" to refer to it:\n\n```\nget menuItem 2 of menu \"Edit\"\n-- same as 'get line 2 of button \"Edit\"'\n```\n\nBecause menus are also buttons, you can use a button reference to get the same \ninformation. But you may need to specify the group and stack the button is in, to avoid \nambiguity. (For example, if there is a standard button named \"Edit\" on the current card, \nthe expression `button \"Edit\"`refers to that button, not to the one in the menu bar.) An \nunambiguous button reference to a menu might look like this:\n\n```\nget line 2 of button \"Edit\" of group \"Menu\" of stack \"Main\"\n```\n\nThe above statement produces the same information as the form using \"`menu`\", but you \nneed to know the group name and possibly which stack it's in, so the *menuName* form is a \nlittle more convenient.\n\n**The layer of menu buttons**\n\nFor a menu bar to work properly on Mac OS X systems, the menus must be in layer order \nwithin the group. That is, the button for the File menu must be numbered 1, the button \nfor the Edit menu must be 2, and so on. The Menu Builder takes care of this automatically; \nyou only need to worry about layering if you're creating the menu bar by hand.\n\n**Changing menus dynamically**\n\nIf you want to dynamically change a menu's contents with a **mouseDown** handler at the \ntime the menu is displayed, you must place the **mouseDown** handler in the group's \nscript. When a menu button is being displayed in the Mac OS menu bar, it does not receive \n**mouseDown** messages, but its group does.\n\n**The editMenus property**\n\nWhen you set the **menubar** property of a stack to the name of a group, the stack is \nresized and scrolled up so the part of the window that holds the menus is not visible. To \nreverse this action so you can see, select and edit the buttons that make up your menu \nbar, set the **editMenus** property to true. This resizes the stack window so the button \nmenus are again visible, and you can use the tools in the LiveCode development environment \nto make changes to them.\n\nTo scroll the stack window again so that the menus are hidden, set the **editMenus** \nproperty back to false.\n\n**Special menu items**\n\nA few menu items on Mac OS X are handled directly by the operating system. To accommodate \nthese special menu items while allowing you to create a fully cross-platform menu bar,\nLiveCode treats the last two menu items of the Help menu, the File menu, and the Edit menu \ndifferently.\n\nBy following these guidelines, you can make sure your menus will appear properly on all \noperating systems without having to write special code or create platform-specific menu \nbars.\n\n**The Help menu and the \"About This Application\" menu item**\n\nWhen LiveCode sets up the Mac OS X menu bar, it automatically makes the last button the \nHelp menu (regardless of the button's name). The standard Help menu items, such as the \n\"Search\" bar are included for you automatically; you don't need to include them in your \nHelp menu button, and you can't eliminate them from the Help menu.\n\nLiveCode moves the last menu item in the Help menu to the \"About This Application\" \nposition. On Mac OS X systems, it's the first menu item in the Application menu. \nTherefore, the last menu item in your Help menu button should be an appropriate \"About\" \nitem. The menu item above it must be a divider line (a dash), and above that must be at \nleast one menu item to be placed in the Help menu.\n\n**The File menu and the \"Quit\" menu item**\n\nOn Mac OS X systems, the \"Quit\" menu item is normally placed in the Application menu \n(which is maintained by the operating system) rather than in the File menu, as is \nstandard on other platforms. To accommodate this user-interface standard, LiveCode \nremoves the last two menu items of the File menu when a standalone application is running \non an OS X system. Therefore, the last menu item in your File menu button should be \n\"Quit\". The menu item above it should be a divider line (a dash).\n\n**The Edit menu and the \"Preferences\" menu item**\n\nOn OS X systems, the \"Preferences\" menu item is also normally placed in the Application \nmenu. To accommodate this user-interface standard, LiveCode removes the last two menu \nitems of the Edit menu when a standalone application is running on an OS X system. \nTherefore, the last menu item in your Edit menu button should be \"Preferences\". The menu \nitem above it should be a divider line (a dash).\n\n> **Note:** The Preferences menu item is treated in this special way only if its name \nstarts with the string \"Preferences\".\n\n> **Tip:** If your application's user interface is presented in a language other than \nEnglish, set the **name** of the Edit menu button to \"Edit\", and set its **label** to the \ncorrect translation. This ensures that the engine can find the Edit menu, while making \nsure that the menu is shown in the correct language.\n\n**Choosing the special menu items**\n\nWhen the user chooses any of these special menu items, a **menuPick** message is sent \nto the button that the menu item is contained in. This ensures that your button scripts \nwill work on all platforms, even if LiveCode displays a menu item in a different menu to \ncomply with user-interface guidelines.\n\n### Stack Menus\n\nButton menus can be used for most kinds of standard menus. However, if you want to create \na menu with a feature that is not supported by button menus--for example, if you want a \npopup menu that provides pictures, rather than text, as the choices--you can create a menu \nfrom a stack.\n\n**Creating a stack menu**\n\nTo create a stack menu, you create a stack with a control for each menu item. Since the \nstack menu is a stack and each menu item is an object, the menu items receive mouse \nmessages such as **mouseEnter**,**mouseLeave**, and **mouseUp**.\n\nWhen the user chooses an item from the stack menu, a **mouseUp** message is sent to that \ncontrol. To respond to a menu item choice, instead of handling the **menuPick** message, \nyou can place a **mouseUp** handler in the script of the object.\n\nTo create a stack menu that looks like a standard menu, create a button in the stack for \neach menu item. The button's **autoArm** and **armBorder** properties should be set to \ntrue. Or you can choose \"Menu Item\" item in the \"New Control\" submenu of the Object menu \nto create a button with its properties set to the appropriate values.\n\nBe sure to set the **rectangle** of the stack to the appropriate size for the menu. \nRemember, when you open the menu, the stack will be displayed exactly as it looks in an \neditable window.\n\nFinally, either set the **menuName** property of a button to a reference to the stack, or \nplace a **mouseDown** handler containing a **pulldown**, **popup**, or **option** command \nin the script of an object. When you click the button or object, the stack menu appears.\n\n**Displaying a stack menu**\n\nStack menus can be associated with a button, just like button menus. But when you click \nthe button, instead of displaying a menu with the button's contents, LiveCode displays a \nstack with the behavior of a menu.\n\nYou can also display a stack menu without associating it with a button, by using the \n**pulldown**, **popup**, or **option** command. Normally, you use these commands in a \n**mouseDown** handler, so that the menu appears under the mouse pointer:\n\n```\non mouseDown -- in card script\n\tpopup stack \"My Menu Panel\"\nend mouseDown\n```\n\n### Displaying Context Sensitive Menus\n\nThere are also several commands to display a context menu. Usually, you use these \ncommands in a **mouseDown** handler – normally either in your card or stack script:\n\n**popup** command: opens a stack as a popup menu\n\n**pulldown** command: opens a stack as a pulldown menu\n\n**option** command: opens a stack as an option menu\n\n> **Note:** If you set a button's **menuName** property to the name of a stack, the stack \nmenu is displayed automatically when the user clicks the button. You need the **popup**, \n**pulldown**, and **option** commands only if you want to display a stack menu in some \nway other than when a button is clicked.\n\n## Searching and Navigating Cards using the Find Command\n\nThe find command in LiveCode allows you to search the fields of the current stack, then \nnavigate to and highlight the results of the search automatically. While it is possible \nto build such a command using the comparison features detailed in the \n*Processing Text and Data* guide, for most purposes the find command provides a complete, \npre-built solution.\n\nfind [*form*] textToFind [*in field*]\n\nThe *form* can be one of the following:\n\n*normal*\n\n*characters* or character (or chars or char)\n\n*words* or *word*\n\n*string*\n\n*whole*\n\nIf no *form* is specified, the find normal form is used.\n\nThe *textToFind* is any expression that evaluates to a string.\n\nThe *field* is any expression that evaluates to a field reference. If the *field* is not \nspecified, the **find** command searches all the fields in the current stack (except \nfields whose dontSearch property is set to true).\n\n```\nfind \"heart\"\nfind string \"beat must go on\" in field \"Quotes\"\n```\n\nWhen the find command finds a match, it highlights the match on the screen – if necessary \nnavigating to the card that contains the match and scrolling the field so the text is in \nview.\n\nThe find command can also be used to return the location of the text that was found.\n\nTo reset the find command so that it starts searching at the beginning again:\n\n```\nfind empty\n```\n\nFor more details on the find command and associated options, see the *find command* in \nthe *LiveCode Dictionary*.\n\n## Using Drag and Drop\n\nLiveCode allows you complete control over drag and drop – both within LiveCode windows and \nbetween LiveCode and other applications.\n\n### Initiating a Drag Drop\n\nTo begin a drag and drop operation, the user clicks and holds the mouse pointer. This \nsends a `mouseDown`message to the object.\n\nIf you drag from within a field, a **dragStart** message is sent. To allow drags from a \nlocked field or from another object type, in the object's **mouseDown** handler, set the \n**dragData** property to the data you want to drag. When there is a value in the \n**dragData**, a drag and drop is initiated when the mouse is clicked and then moved.\n\n```\nset the dragData[\"text\"] to \"text being dragged\"\n```\n\nYou can set the **dragData** to contain any of the following types of data:\n\n| &nbsp;| &nbsp;|\n|---------|------------------------------------------------------------------------|\n| text    | The plain text being dragged.                                          |\n| HTML    | The styled text being dragged, in the same format as the **htmlText**  |\n| RTF     | The styled text being dragged, in the same format as the **RTFText**   |\n| Unicode | The text being dragged, in the same format as the **unicodeText**      |\n| image   | The data of an image (in PNG format)                                   |\n| files   | The name and location of the file or files being dragged, one per line |\n\n> **Note:** LiveCode automatically handles the mechanics of dragging and dropping text \nbetween and within unlocked fields. To support this type of drag and drop operation, you \ndon't need to do any scripting.\n\nFor more details, see the entries for *dragStart* and *dragData* in the \n*LiveCode Dictionary*.\n\n### Tracking During a Drag Drop Operation\n\nYou can use the **dragEnter** message to show an outline around an object or change the \ncursor when the mouse moves into it during a drag operation.\n\n```\non dragEnter -- show a green outline around the drop target\n\tset the borderColor of the target to \"green\"\nend dragEnter\n```\n\nYou can use the **dragMove** message to update the screen whenever the cursor moves \nduring a drag and drop operation.\n\n```\non dragMove -- in a field script\n\t-- set the cursor so it shows you can only drop onto a link\n\tif the textStyle of the mouseChunk contains \"link\"\n\tthen set the cursor to the ID of image \"Drop Here\"\n\telse set the cursor to the ID of image \"Dont Drop\"\nend dragMove\n```\n\nYou can use the **dragLeave** message to remove any outline around an object or change \nthe cursor when the mouse moves out of an object during a drag operation.\n\n```\non dragLeave\n\t-- remove any outline around the drop no-longer-target\n\tset the borderColor of the target to empty\nend dragLeave\n```\n\nFor more details, see the entries for *dragEnter*, *dragMove* and *dragLeave* in the \n*LiveCode Dictionary*.\n\n### Responding to a Drag and Drop\n\nTo perform an action when the user drops data onto a locked field or another object type, \nyou handle the **dragDrop** message.\n\nThe **dragDrop** message is sent when the user drops data on an object.\n\n```\non dragDrop -- check whether a file is being dropped\n\tif the dragData[\"files\"] is empty then beep 2\n\tpass dragDrop\nend dragDrop\n```\n\nYou must set the **acceptDrop** property to true before a drop will be allowed. Usually, \nyou set this property to true in a **dragEnter** handler.\n\nYou can use the **dragDestination** function to retrieve the long id of the object that \nthe dragged data was dropped on. You can use the **dragSource** function to retrieve the \nlong id of the object that was the source of the drag.\n\nWhen a drag drop has been completed, a **dragEnd** message is sent to the object the drag \nand drop started from.\n\n```\non dragEnd -- remove data being dragged\nd\telete the dragSource\nend dragEnd\n```\n\nYou can use the **dropChunk** function to retrieve the location of the text that was \ndropped in a field. For example, you could select the text that was dropped by doing the \nfollowing:\n\n```\nselect the dropChunk\n```\n\nFor more details, see the entries for *dragDrop*, *dragEnter*, *dragDestination*, \n*dragEnd*, *dragSource* , *dropChunk* and *acceptDrop* in the *LiveCode Dictionary*.\n\n### Prevent Dragging and Dropping to a Field\n\nYou prevent dropping data into a field during a drag and drop by setting the \n**acceptDrop** property to false when the mouse pointer enters the field.\n\nIf the **acceptDrop** is set to false, when you drop data, no **dragDrop** message is \nsent to the field. Since the drop is automatically processed only when LiveCode receives \na **dragDrop** message, this prevents the usual automatic drop behavior.\n\nUsually, you should set the **acceptDrop** in a **dragEnter** handler, as in the \nfollowing example:\n\n```\non dragEnter -- in a field script\n\tset the acceptDrop to false\nend dragEnter\n```\n\nIf you want to prevent dragging text within a field, intercept the dragStart message:\n\n```\non dragStart\n\t-- do nothing\nend dragStart\n```\n\nFor more details, see the entries for *acceptDrop*, *dragDrop* and *dragEnter* in the \n*LiveCode Dictionary*."
	},	{
	"name":"error_handling_and_debugging",
	"display name":"Error Handling And Debugging",
	"location":"ide",
	"group":"Intermediate",
	"data":"# Error Handling & Debugging\n\n## Introduction\n\nIn an ideal world everyone would write perfect code and there would never be any need to \ndebug. However in reality, virtually every project is going to require some degree of \ndebugging. The more complex the project the more like this is to be true. Fortunately \nLiveCode includes a full plethora of debugging tools and techniques that make it quick and \neasy to track down errors. The live run-edit cycle allows you to see the effect of \ncorrections as soon as you make them. And, unlike working in a lower-level language, when \nyou make a mistake you will receive a human-friendly error message pointing you to where \nthe error occurred, instead of the application unexpectedly quitting.\n\nAs well as the set of built-in error reporting and debugging tools, LiveCode also allows \nyou complete flexibility over error handling, allowing you to provide a customized \nexperience to the end user of your application.\n\n## Common Techniques for Solving Problems\n\nIf you encounter a problem with your code, there are a number of methods available to \nhelp you track it down. In this section we detail some of the main techniques you may \nfind useful.\n\n### Errors During Execution\n\nOften the first thing that will alert you to a problem is an error dialog.\n\n![](images/image113.png)\n\nFigure 80 – The Error Dialog\n\nThe *Execution Error* dialog is displayed when your script is running and encounters an \nerror, if Script Debug Mode is turned off (under the Development menu).\n\nIn the example above, the script was attempting to access field 100. This field does not \nexist. When LiveCode encounters a problem like this, execution will *halt* and the dialog \nabove will be displayed.\n\nIf you know what the error is from looking at it, use the *Script* button to go directly \nto the script and edit it. The line that generated the error will be highlighted in the \nscript window.\n\nIf Script Debug Mode is on, the script editor will automatically open up on execution\nerror and display the line which caused the error.\n\n### Errors During Compiling\n\nA *Script Error* occurs when your script cannot be compiled because of a syntax error. \nThis is flagged up in the script editor when you attempt to compile a change to a script \nby pressing the Apply button in the Code Editor. Correct the error then press the Apply \nbutton to compile the script again.\n\n> **Caution:** If a compile error is generated then the entire script to which it applies \nwill not be compiled, not just the line or handler that contains the error. If other \nscripts are attempting to call commands or functions in this script they will not be able \nto run until you correct the problem and compile the script again.\n\nBecause LiveCode compiles all the scripts within a stack when it loads them, a \n*Script Error* dialog can be generated when you load a stack from disk for the first time \n– if you saved a stack that contained a script that could not compile.\n\n> **Important:** Do not confuse the *Execution Error* and *Script Error* dialogs. \nThe *Execution Error* dialog occurs when a script is running and cannot continue due to \nan error. The error dialog will start with the words \"executing at [time]\". The \n*Script Error* dialog appears when you attempt to compile a script that contains a syntax \nerror. The error dialog will start with the words \"executing at [time]\".\n\n> **Tip:** If you turn on the Variable Checking option in the Code Editor, LiveCode will \nrequire that you declare all variables and enclose all literal strings in quotes. It will \nreport a script compile error if you attempt to use an unquoted literal or do not declare \na variable. This can be useful in catching mistakes before you run a script. Note that if \nyou turn this option on and attempt to compile an existing script that has not been \nwritten in this way, it will typically generate a large number of errors that need to be \ncorrected before you can compile it.\n\n### Suppressing Errors and Messages\n\nIf your stack gets into an unstable state where it is generating a large number of errors,\n you may want to temporarily turn off sending messages to the stack or displaying error \n messages. This can enable you to edit the stack to make the appropriate changes.\n\nTo suppress messages, press the Messages button on the toolbar or choose Suppress Messages \nfrom the Development menu. Normal system event messages will stop being sent to the stack \n(for example clicking a button will no longer trigger a mouseUp handler, changing card \nwill no longer trigger an openCard handler). You can still send custom messages directly \nto objects within the stack.\n\nTo suppress errors, press the Errors button on the toolbar or choose Suppress Errors from \nthe Development menu. This will prevent any errors from triggering an error display window.\n\n> **Caution:** Be sure to turn messages and errors back on when you have finished editing. \nOtherwise your stack will not work, or any error that comes up during stack operation will \ncause execution to halt but will not display an error message.\n\nYou can execute a single navigation command in the message box with a similar effect as \nSuppress Messages by including the statement `lock messages;` before it. For example, to \ngo to the next card `lock messages; go next` or to exit LiveCode (without displaying \ntriggering any close messages or asking to save changes) `lock messages; quit`.\n\n### Outputting information as your script executes\n\nIf you want to know about the state of a particular variable or condition during execution, \nyou can use the *Variable Watcher*, detailed below. However sometimes you may want to run \na script without opening the debugger, outputting information along the way. You can use \nthe **put** command to output information to the Message Box, a field or a text file, the \n**write** command to output to the Console, or the **answer** command to display a dialog.\n\n**Output to the Message Box**\n\nThe Message Box is a convenient way to output information while a script is running. It \nallows you to display the information you want within the IDE without having to create a \nfield or stack to display the information. Using a put command without specifying a \ndestination outputs to the Message Box:\n\n```\nput tVar\n```\n\nIn the example above, substitute tVar with the name of the variable in your script that \nyou want to see the contents of. You can also output information only if a certain \ncondition is met:\n\n```\nif tVar is true then put tData\n```\n\nWhenever you display something in the message box, a special global variable called \n**message** (often abbreviated to **msg**) is updated. This allows you to check the \ncontents of the message box easily, as well as add or append information rather than \nreplacing it.\n\n```\n-- puts tInformation and a return after the data\n-- already in the message box\nput tInformation & return after msg\n```\n\nFor more information, see the section on the *Message Box*, above.\n\n**Output to Standard Out (stdout or the Console on Mac)**\n\nStandard Output (stdout) is a useful place to log messages. Unlike the Message Box, it is \neasy to log a sequence of events which you can then scroll back to review later on. It \nalso has the advantage of being external to LiveCode so using it does not interfere with \nyour application window layering or focus in any way. On Mac, it can be accessed by \nopening the Console application, located in the Utilities folder within Applications.\n\nThe syntax to write something to stdout or the Console is:\n\n```\nwrite tMessage & return to stdout\n```\n\n> **Tip:** If you are writing a lot of data out to the console, it can be useful to append \nthe time to each one to make it easier to debug. \n`write tMessage && the long time & return to stdOut`. If you need more granularity than \nseconds, use the milliseconds instead of the long time.\n\nIf you are inserting debugging output statements into your code, consider making them \nconditional on a global variable. This allows you to turn on debugging by setting the \nvariable without making changes to code. Even better it prevents forgotten debugging code \nin your application inadvertently filling the console with messages on an end user's \nsystem.\n\n```\nif gDebugging then write tMessage & return to stdOut\n```\n\n**Output to a field**\n\nYou can create a stack that contains fields used for debugging:\n\n```\nput tVar & return after field \"debugging info\" of stack \"my debug stack\"\n```\n\n> **Tip:** You may want to create a set of tools that makes it easy to debug a specific \napplication you are working on. Create this stack then save it into your plug-ins folder \nso it is available from the Development menu in the IDE.\n\n**Output to a dialog**\n\nTo display a dialog with the contents of a statement, use the answer command. This method \nis suitable if you want to output something quickly, but is usually unsuitable for larger \ndebugging tasks as it pauses execution to display a dialog each time.\n\n```\nif tVar is true then answer tVar\n```\n\n**Output to a text file**\n\nIf you want to log information more permanently, you can use a text file. You may want to \nstore the file path in a global variable so you can change it easily. See the Transferring\nInformation guide for more information.\n\n```\nput tVar & return after URL \"file:debug.txt\"\n```\n\n### Interrupting Execution\n\nIf you need to interrupt a script while it is running, press control-period (or \ncommand-period on Mac OS). Note that interrupting a script will only work if the global \n**allowInterrupts** property is set to true.\n\n> **Tip:** On Mac OS X systems, if your application has got into an unstable state and you \nare unable to interrupt it with command-period you may be able to interrupt it and regain \ncontrol by sending it a signal. Open the Terminal utility and then use *top -o cpu* or \n*ps ax* to retrieve the process ID for LiveCode. Then run *kill -sighup [processID]* \nwhere [processID] is the ID of the LiveCode process.\n\n## The Debugger\n\nTypically when you want to track down a problem with your script, you will want to use the \ndebugger. The debugger provides a simple interface that allows you to step through your \nscript line by line as it executes. You can see the results of each statement as it \nhappens. If you load the Variable Watcher from within the debugger, it will show you the \ncontents of all of the variables used in a particular handler. These values will be \nupdated as you step through. You can even edit these values while your script is running. \nThis can be useful if you spot a problem in a given area or want to test a section of code \nwith a different set of data as it runs.\n\nTo activate the debugger, first ensure that Script Debug Mode is turned on in the \nDevelopment menu. Then open up the script you want to debug and click in the gray bar to \nthe left of the line where you want to open the debugger. Alternatively you can write the \ncommand **breakPoint** into the script. Using the **breakPoint** command allows you to \nbreak conditionally – `if tVar is true then breakPoint`.\n\nNext run your script as normal. When LiveCode reaches a breakpoint it will pause execution\nand load up the debugger.\n\n> **Important:** To see the contents of variables while your script is running, wait for \nthe debugger to open then open the *Variables* pane (or select *Variables* from the \n*Debug* menu).\n\n![](images/image114.png)\n\nFigure 81 – The Debugger\n\nFor a table describing each of the buttons in the debugger together with their keyboard \nshortcuts, see the section on The Debug Menu in the LiveCode IDE guide.\n\nPress the Step Into button to execute the current line and move to the next line. Step \nOver performs the same action, except that if the current line calls a function it will \nrun that entire function without opening it in the debugger.\n\nOnce you have found the cause of the problem, press the Run button to exit the debugger \nand run the script at full speed. Alternatively press the Abort button to halt execution \non the current line and edit the script.\n\n> **Tip:** To improve the performance when debugging a complex script, set a breakpoint \nfurther down in the script during the debugging process and press the Run button instead \nof pressing Step Over. The debugger is temporarily deactivated until the new breakpoint \nis reached, which means the script runs at full speed. When using Step Over, the debugger \nis still active even though it does not display a routine as it runs, which is slower.\n\n## Custom Error handling\n\nIf you are creating an application that is going to be distributed, you may want to \ninclude a method for catching and handling errors. LiveCode provides two such methods. \nThe first is the **try**/**catch** control structure. This control structure can be \ninserted around any routine that you know may encounter problems when in use. For example, \nyou may wish to include this around a routine that reads in a file from disk to handle the \ncase where a corrupted file has been selected. The second method is to write a custom \n**errorDialog** routine. Unlike a **try**/**catch** control structure, an **errorDialog** \nhandler is global to your application (or card or stack within an application) and does \nnot provide a mechanism to allow a script that encounters an error to continue. Use this \nmethod to display a custom error dialog when an error occurs that you are unable to \npredict and report using try/catch.\n\n**Using try/catch**\n\nEnclose code that may be error prone within a **try** control structure. The following \nexample shows a routine that opens and reads from a file enclosed in a try statement. If \nan execution error occurs in any of the statements after the start of the try control \nstructure, the catch clause will be triggered with the details of the error. In the \nexample below we declare a variable `someError`to contain details of the error.\n\n```\ntry\n\topen file tFile\n\tread from file tFile until eof\n\tclose file\ncatch someError\n\tanswer \"An error occurred reading a file\" && someError\nend try\n```\n\n> **Tip:** The data returned to the error routine is returned in the internal format that \nLiveCode uses to display execution errors. To look up the human friendly string associated \nwith a particular error, look at the first item returned against the list of execution \nerrors stored in the LiveCode IDE.\n```\nput line (item 1 of someError) of the cErrorsList of \\\ncard 1 of stack \"revErrorDisplay\"\n```\nThis will only work in the IDE.\n\nIf you want to include statements that will be run regardless of whether there has been an \nerror or not, include the statements as part of a **finally** clause.\n\nTo create readable error messages for cases where you anticipate there may be an error, \nuse the **throw** keyword. For example, if we want to display an error message when the \nresult for opening a file returns something:\n\n```\nopen file tFile\nif the result is not empty then throw the result\n```\n\nIn the example above, if the file cannot be opened and the result is set, the value of the \nresult will be passed to the catch statement in the `someError`variable.\n\n**Writing a custom errorDialog routine**\n\nWhen an execution error occurs, an **errorDialog** message is sent. The IDE uses this \nmessage to display the execution error dialog. However you can write and include your own \ncustom **errorDialog** routine. This is useful if you are planning to distribute your \napplication. For example, you could create a stack that transmits the error information \ndirectly to your technical support department or displays a custom message on screen. A \nbasic **errorDialog** routine is shown below:\n\n```\non errorDialog pError\nanswer \"There was an error\" && pError\nend errorDialog\n```\n\nThis routine will also be activated if you use the throw keyword to throw an error \n(outside of a **try**/**catch** control structure).\n\n## The Message Watcher\n\nThe Message Watcher lets you see what messages are sent during a particular operation. it \ncan be useful if you want to create a log of the sequences of messages generated during a \nparticular operation. It also logs how long each message takes to run. This makes it \nuseful when you are looking for bottlenecks in your code. The Message Watcher is located \nin the Development menu, \n\n![](images/image116.png)\n\nFigure 82 – The Message Watcher Window\n\n| &nbsp;| &nbsp;|\n|-----------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **Message list area** | Lists messages as they happen. The format is *the name* of the message, *the time* the message was sent and the number of *milliseconds* since the last message. Click to select a message, double click to open it in the Code Editor. In the example above we can see that the user was inactive for 4.7 seconds before moving the mouse over an object that triggered a *mouseEnter* message. 599 milliseconds later they clicked the mouse triggering a *mouseUp* message. The *mouseUp* handler called *calculateResult* 0 milliseconds later, then *formatData* was called 147 milliseconds later. Because there were no user-generated messages in the sequence, we know that the *calculateResult* handler took 147 milliseconds to run.  |\n| **Object field**      | Shows the object that the message was sent to. Click on a line in the Message List to update this field.                                                                                                                                                                                                                                                                                                                                                                                                 |\n| **Message type**      | Shows the type for the selected message – *command*, *function*, *getProp* or *setProp*                                                                                                                                                                                                                                                                                                                                                                                                                  |\n| **Active**            | Check this box to activate the Message Watcher. Deactivate the Message Watcher when you have captured information about the sequence of events you are interested in and want to stop the logging of additional messages.                                                                                                                                                                                                                                                                                |\n| **Clear**             | Clears the message list field.                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n| **Suppress**          | Allows you to set what messages you want displayed and which ones you want to suppress. Use this option to narrow down the messages that are logged so you can see information about the sequence you are interested in. See below for more information.                                                                                                                                                                                                                                                 |\n\n![](images/image117.png)\n\nFigure 83 – Suppress Messages Option Screen\n\n| &nbsp;| &nbsp;|\n|--------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **Action – Handled**     | Don't log any message that causes a handler to run when it is sent.                                                                                                                                                        |\n| **Action – Not Handled** | Don't log any message that does not cause a handler to run when it is sent. This is the default option and prevents the log from filling up with messages that do not cause any scripts to run.                            |\n| **IDE Messages**         | Do not log LiveCode IDE messages. The LiveCode IDE generates lots of messages as it is written in LiveCode. This is the default option but you may wish to display these messages if you are customizing the LiveCode IDE. |\n| **Handler Type**         | Do not log the selected type of handler. For example, to prevent displaying all function calls, check the function box.                                                                                                    |\n| **Message list**         | A list of messages not to log. By default *mouseMove* is listed as otherwise *mouseMove* messages may flood the display whenever you move the mouse.                                                                       |\n| **Add**                  | Add a message name to prevent it from being logged.                                                                                                                                                                        |\n| **Delete**               | Delete a message name to cause it to be logged in the future.                                                                                                                                                              |\n\n## Tracking Down Problems in Standalone Applications\n\nWe recommend that you debug your application as fully as possible in the IDE, so that you \ncan use the Debugger and other tools. However occasionally you may need to track down a \nproblem that only occurs in a standalone application. If this happens, use the techniques \ndescribed above for writing information out to the stdOut or a text file. You can also \ninclude an error display dialog using the *Bug Reports* tab within the Standalone Settings \nscreen. Be sure to check either the *Allow user to save report to file* or \n*Allow user to email report* buttons so that you can view the error generated. For more \ninformation, see the guide on *Deploying your Application*."
	},	{
	"name":"livecode_data_grid",
	"display name":"LiveCode Data Grid",
	"location":"ide",
	"group":"Intermediate",
	"data":"# LiveCode Data Grid\n\n## Introduction\n\n### What is the Data Grid?\n\nThe LiveCode Data Grid enables you to integrate powerful tables and\nforms into your projects. Data grids combine LiveCode groups and\nbehaviors to provide you with a simple, yet flexible means of displaying\nyour data in just about any way you want.\n\n\n#### A Data Grid Table\n\n![](images/datagrid-table.gif)\n\nThe table style of a data grid allows you to display your data in a\nmodern looking table complete with headers, sorting, column alignment\nand more. By default a data grid table will use a LiveCode field to\neach column of each row. If you need to customize a column with graphics\nyou can define your own templates for each column. A custom template can\nbe any LiveCode control such as a graphic or group.\n\n#### A Data Grid Form\n\n![](images/datagrid-form.gif)\n\nThe form style of a data grid (1) is similar to a list field (2) in\nLiveCode in that it allows you to display records from a data source\n(text file, database, XML, etc.) that the user can select.\n\nThe difference is that the data grid uses a group as a template for each\nrecord. This means that for each record you display you can create rich\nuser interfaces using menus, images, etc.\n\nThe data grid form is also very fast as it only draws the records that\nare currently visible on the screen. This means you can display large\nrecords sets without slow performance.\n\nBecause the data grid form is so easy to use it is not only limited to\ndisplaying lots of records. Any list where you want a rich UI and\ncomplete control over layout and processing of engine events can benefit\nfrom being displayed using a data grid form.\n\n### Can You Show Me Some Examples?\n\nOf course we can! The areas of the screenshots highlighted in blue are \ninstances of the data grid control.\n\n#### Data Grid Table\n\n![](images/datagrid-table-display-1.png)\n\n#### Data Grid Forms\n\n![](images/datagrid-form-display-1.png)\n\n![](images/datagrid-form-display-2.png)\n\n![](images/datagrid-form-display-3.png)\n\n![](images/datagrid-form-display-4.png)\n\n![](images/datagrid-form-display-5.png)\n\n![](images/datagrid-form-display-6.png)\n\n### How Do I Create My First Data Grid Table?\n\nThis lesson will show you how to create a bare bones data grid table.\nData grid tables are useful when you need to display rows of data in\nstructured columns.\n\n#### Locate Data Grid on Tools Palette\n\n![](images/datagrid-tools-palette.png)\n\n#### Drag Data Grid Onto Card\n\n![](images/datagrid-drag-onto-card.png)\n\n#### Populate Data Grid Using The Property Inspector\n\nData Grid tables display data in columns that you can customize the look\nof. You don't have to worry about customization right now though because\na Data Grid table can display plain text just fine. Let's test it out.\n\nAs with all controls in LiveCode you can open the Data Grid's **Property Inspector** \nthree ways.\n\nSelect the data grid in question and then:\n\n1. Go to the **Object** menu and select the **Object Inspector** item\n2. Right (central) click on the data grid and select **Property Inspector** from \nthe popup\n3. Double click on the data grid itself.\n\nSo, open the **Property Inspector** for the data grid you have just dragged onto \nthe card.\n\n1. Switch to the **Contents** pane of the **Property Inspector**. \n2. Type or paste some tab delimited text into the field. Click out of \nthe field or press ***cntrl-return*** to save the text you entered.\n\n![](images/datagrid-table-inspector-text.png)\n\nThe tab delimited text you entered in the field will appear as columns\nin the data grid (1). The **Property Inspector** automatically creates a\ncolumn in the Data Grid for each column in the text you provide (2).\n\n![](images/datagrid-table-inspector-columns-1.png)\n\n#### Customizing Columns\n\nNow that you've populated a Data Grid Table with some data let's look at\nthe columns in the Data Grid.\n\n![](images/datagrid-table-inspector-columns-2.png)\n\nNormally when you work with a Data Grid Table you will create columns in\nthe **Property Inspector** in advance using the \"+\" button (1). Seeing as\nthe columns needed already exist you can go through and rename \n*Col 1* to *state* and *Col 2* to *code* (2).\n\nNote that a label for the columns (3) has also been assigned . Labels are useful\nfor customizing the column labels in the Data Grid Table.\n\n#### Populate Data Grid Using dgText Property\n\nNow that you have defined your columns let's look at how to populate a\nData Grid Table by setting the **dgText** property. Here is an example\nhandler (with comments) that you can place in a button.\n\n>**Note:** Verify that the name of your data grid matches the name used \n> in the code below otherwise an error will occur when you try to run \n> it.\n\n    on mouseUp\n      ### Create tab delimited data.\n      ### Note that first line has name of columns.\n      ### Providing names tells Data Grid how to map\n      ### data to appropriate columns.\n      put \"state\" & tab & \"code\" & cr & \\\n      \"ALABAMA\" & tab & \"AL\" & cr & \\\n      \"ALASKA\" & tab & \"AK\" into theText\n      ### Let Data Grid know that first line has column names\n      put true into firstLineContainsColumnNames\n      set the dgText [ firstLineContainsColumnNames ] of group \"DataGrid\" to theText\n    end mouseUp\n\nExecuting the above code would give you the following result in the Data \nGrid table.\n\n![](images/datagrid-table-with-dgtext.png)\n\n#### Populating the Data Grid Using dgData Property\n\nHere is an example of populating the Data Grid Table by setting the\n**dgData** property to an array. The end result is the same as the previous\nstep.\n\n>**Note:** Verify that the name of your data grid matches the name used \n> in the code below otherwise an error will occur when you try to run \n> it.\n\n    on mouseup\n      ### Create a nested array.\n      ### Array key names in the 2nd dimension\n      ### dictate values for individual columns\n      put \"ALABAMA\" into theDataA[1][\"state\"]\n      put \"AL\" into theDataA[1][\"code\"]\n      put \"ALASKA\" into theDataA[2][\"state\"]\n      put \"AK\" into theDataA[2][\"code\"]\n      set the dgData of group \"DataGrid\" to theDataA\n    end mouseUp\n    \n### How Do I Create My First Data Grid Form?\n\nThis lesson will show you how to create a bare bones data grid form.\nData grid forms are useful when you need a less rigid layout than\ncolumns in a table provide. A data grid form gives you complete control\nover the look and feel of each record you display.\n\n#### Locate Data Grid on Tools Palette\n\n![](images/datagrid-tools-palette.png)\n\n#### Drag Data Grid Onto Card\n\n![](images/datagrid-drag-onto-card.png)\n\n#### Change Style to \"Form\"\n\nSelect the Data Grid and open the LiveCode **Property Inspector**. Change\nthe style to **form**.\n\n![](images/datagrid-form-inspector-style.png)\n\n#### Add Some Text\n\nNow you can assign some text to the data grid. By default a data grid\nwill render some basic data without you having to customize the row\ntemplate. To assign some text:\n\n![](images/datagrid-form-inspector-text.png)\n\n1. Switch to the Contents pane of the **Property Inspector**. (1)\n\n2. Type or paste some line delimited text into the field. (2)\n\n#### Result\n\nThat's it! The data you entered in the field will appear in the data\ngrid. Now you are ready to customize the look and feel of your records\nby modifying the row template.\n\n![](images/datagrid-form-with-text.png)\n\nYou should note that while you can assign line delimited text to a data\ngrid form, the data grid really works with multi-dimensional arrays\nunder the hood. By using arrays you can store and display all different\nkinds of data in a data grid. Being able to assign the **Contents** property is\nmerely a convenience.\n\n### Example: Creating a List of People\n\nThis lesson provides a low level detail, step-by-step example of creating a\ncustom data grid form. Download the attached sample stack to see\nthe scripts.\n\n#### Attached Files\n\n[datagrid_sampler.zip](http://lessons.livecode.com/s/lessons/files/13?lesson_id=7305)\n\n#### What You Will Create\n\n![](images/media_1278008632464_display.png)\n\nThis is the data grid that you will create. Each row displays a name, a\ntitle and an image.\n\n#### Add Data Grid to Card\n\n![](images/datagrid-drag-onto-card.png)\n\nTo begin, drag a data grid from the **Tools palette** onto your card.\n\n#### Change Data Grid Style\n\n![](images/media_1278011173914_display.png)\n\nSelect the data grid and from the **Basic Properties** pane of the\n**Property Inspector** change the style of the data grid to **Form.**\n\n#### The Data That Is Going to Be Displayed in Each Row\n\nNow you are going to design the row template for the data grid form. The\nrow template dictates how each record in the data grid will be\ndisplayed.\n\n![](images/media_1278009398991_display.png)\n\nBefore you start editing the row template you need to know about the\ndata that will be displayed each row. This screenshot shows an excerpt\nfrom the code that populates the data grid using a multi-dimensional\narray (look in the card script of the example stack). Each row will have\naccess to the data stored in the *FirstName*, *LastName*, *Title* and\n*ImageURL* keys of the array.\n\nYou are now going to add UI controls to the row template in order to\ndisplay the data for each of these keys.\n\n#### Edit the Row Template\n\nWith the data grid selected, click on the **Row Template** button in the\n**Property Inspector** to open the card containing row template controls.\n\n![](images/media_1278011265770_display.png)\n\n#### Edit the Row Template Group\n\nIn order to customize the look you need to edit the contents of the\ntemplate group.\n\n![](images/media_1278009877026_display.png)\n\n1. Make sure the **Edit** tool is selected.\n2. Make sure that **Select Grouped** IS NOT active.\n3. Select the row template group.\n4. Click **Edit Group** in the LiveCode toolbar.\n\n\n#### Rename Label Field\n\nThe default template group has a field named *Label*. Click on the left\nside of the gray rectangle to select it.(1)\n\n![](images/media_1278010330080_display.png)\n\nOpen the **Property Inspector** for this field and from the **Basic** pane (2) change\nthe name of the field to *Name* (2). Switch to the **Contents** pane and assign \n*Name* as the content (3).\n\n![](images/media_1278010330080_display_1.png)\n\n\n#### Make Name Field Bold\n\nWith the *Name* field still selected go the **Text Formatting** pane of the \n**Property Inspector** (1) and  change the **Style** to **Bold**(2).\n\n![](images/media_1278010452322_display.png)\n\n#### Add Title Field\n\n\nDrag a label field from the Tools palette (1).\n\n![](images/media_1278010622403_display.png)\n \nName it *Title* (2) and assign *Title* to the content (3).\n\n![](images/media_1278010622403_display_1.png)\n\n#### Change Text Alignment\n\nChange the text alignment of the field to the left side using the **Text\nFormatting** pane of the **Property Inspector**.\n\n![](images/media_1278010671679_display.png)\n\n#### Add an Image and Resize the Background Graphic\n\n![](images/Add_An_Image_and_Resize_The_Background_Graphic_display.png)\n\nNow drag an image object into the group using the **Tools palette** (1).\nWith the image selected, select the **Position** pane on the **Property Inspector** \n(2) and set the **width** and **height** of the image to 48 pixels (3). \nAlso check the **Lock size and position** checkbox (4) so that any image is scaled to \nfit within these bounds.\n\nFinally, select the **Background** graphic (5) and resize it so that it frames the other \ncontrols. In the example stack the **width** of the graphic is 214 and the **height** is 56.\n\n#### Stop Editing the Row Template Group\n\n![](images/media_1278011030380_display.png)\n\nYou are now done adding the UI objects to the row template group. From\nthe **Object** menu (1), select **Stop Editing Group**. You can then **Close** and \n**Save** the **row template**\n\n#### Edit the Row Behavior\n\nNow that you have designed the controls for each row you need to write\nthe script that will move data into the controls and position them on\nthe screen.\n\n![](images/media_1278011291637_display.png)\n\nClick on the **Edit Script** button in the **Property Inspector** under **Row Behavior**\nto begin editing the row behavior script.\n\n#### The FillInData Message\n\nIn the script that opens when you click the Row Behavior button you will\nfind a command named **FillInData**. This is where you move data from\nthe pDataArray parameter into the controls you created.\n\n![](images/media_1278011422961_display.png)\n\n*pDataArray* is an array with the keys *FirstName*, *LastName*, *Name* and\n*Title*. The code that moves the values from the array into the UI\ncontrols is pretty straightforward.\n\n1. Assign the values of the *FirstName* and *LastName* keys to the *Name* field.\n2. Assign the value of the *Title* key to the *Title* field.\n3. Assign the value of the *Image URL* key to the **filename** property of the image control.\n\nYou don't need to worry about positioning any of your controls in the\n**FillInData** command. You just need to write the code that assigns the\ndata to the UI controls.\n\n***Copy & Paste***\n\n\ton FillInData pDataArray\n\t--This message is sent when the Data Grid needs to populate\n\t-- this template with the data from a record. pDataArray is an\n\t-- an array containing the records data.\n\t-- You do not need to resize any of your template's controls in\n\t-- this message. All resizing should be handled in resizeControl.\n\t-- Example:\n\tset the text of field \"Name\" of me to pDataArray[\"LastName\"] & \\\n\t    comma & space & pDataArray[\"FirstName\"]\n\tset the text of field \"Title\" of me to pDataArray[\"Title\"]\n\tset the filename of image \"image\" of me to pDataArray[\"Image URL\"]\n\tend FillInData\n\n#### The LayoutControl Message\n\nThe **LayoutControl** message is where you position all of your\ncontrols. For this template you begin by positioning the image (1). Next\nyou extend the *Name* and *Title* fields to the edge of the image (2).\nFinally you resize the *Background* graphic to fill the entire row\nrectangle.\n\n![](images/media_1278011761854_display.png)\n\n***Copy & Paste***\n\n    on LayoutControl pControlRect\n      local theFieldRect,theRect\n      -- This message is sent when you should layout your template's controls.\n      -- This is where you resize the 'Background' graphic, resize fields and\n      -- position objects.\n      -- The first thing you should do is capture 'the rect of me'.\n      -- For fixed height data grid forms you can use items 1 through 4 of the rect as\n      -- boundaries for laying out your controls.\n      -- For variable height data grid forms you can use items 1 through 3 of the rect as\n      -- boundaries.\n      -- Example:\n      set the right of image \"image\" of me to item 3 of pControlRect - 5\n      put the left of image \"image\" of me into theLeft\n      put the rect of field \"name\" of me into theRect\n      put theLeft - 10 into item 3 of theRect\n      set the rect of field \"Name\" of me to theRect\n      put the rect of field \"title\" of me into theRect\n      put theLeft - 10 into item 3 of theRect\n      set the rect of field \"Title\" of me to theRect\n      set the rect of graphic \"Background\" of me to pControlRect\n    end LayoutControl\n\n#### Set the Data of the Control\n\nThis is an example of a handler that populates the data grid with data\nby setting the **dgData** property. The **dgData** property accepts a\nmulti-dimensional array. The first dimensions is an integer representing\nthe row. The second dimension are the key/values you want to pass to\neach row.\n\nYou can find this handler in the card script of the example stack.\n\n***Copy & Paste***\n\n    command uiPopulatePeople\n      put \"images/\" into theImageFolder\n      put \"Lucky\" into theDataA[1][\"FirstName\"]\n      put \"Day\" into theDataA[1][\"LastName\"]\n      put \"Three Amigo\" into theDataA[1][\"Title\"]\n      put theImageFolder & \"monkey.jpg\" into theDataA[1][\"Image URL\"]\n      put \"Dusty\" into theDataA[2][\"FirstName\"]\n      put \"Bottoms\" into theDataA[2][\"LastName\"]\n      put \"Three Amigo\" into theDataA[2][\"Title\"]\n      put theImageFolder & \"monkey.jpg\" into theDataA[2][\"Image URL\"]\n      put \"Ned\" into theDataA[3][\"FirstName\"]\n      put \"Nederlander\" into theDataA[3][\"LastName\"]\n      put \"Three Amigo\" into theDataA[3][\"Title\"]\n      put theImageFolder & \"monkey.jpg\" into theDataA[3][\"Image URL\"]\n      put \"Jane\" into theDataA[4][\"FirstName\"]\n      put \"Blue\" into theDataA[4][\"LastName\"]\n      put \"Secret Agent\" into theDataA[4][\"Title\"]\n      put theImageFolder & \"monkey.jpg\" into theDataA[4][\"Image URL\"]\n      put \"Jefferson\" into theDataA[5][\"FirstName\"]\n      put \"Blue\" into theDataA[5][\"LastName\"]\n      put \"Secret Agent\" into theDataA[5][\"Title\"]\n      put theImageFolder & \"monkey.jpg\" into theDataA[5][\"Image URL\"]\n      lock screen\n      set the dgData of group \"DataGrid 1\" to theDataA\n      ### Hilite first row\n      set the dgHilitedLines of group \"DataGrid 1\" to 1\n      unlock screen\n    end uiPopulatePeople\n   \nIt is called by a button placed on the card **Populate Data Grid** with script\n\n    on Mouseup\n      uiPopulatePeople\n    end Mouseup\n    \n\n#### The Result\n\nAfter calling the **uiPopulatePeople** command the Data Grid should look\nsomething like this (1).\n\n![](images/media_1278012099805_display.png)\n\nOnce you have set the **dgData** property you can refresh the data grid to\nsee any of the changes made to the row template. You can send the\n**ResetList** message to the data grid, or press the **Refresh Data\nGrid** button on the Basic Properties pane of the **Property Inspector** (2)\nto redraw the data using the updated template.\n\n#### Troubleshooting: Row Height\n\nBy default a data grid uses a fixed height for each row. If you have not\nset the row height the first time you populate the data grid with data\nthen the value that is current for the data grid may not be suitable. \n\n![](images/media_1237547039021_display.png)\n\nYou can change the height of the row template by updating the \n**row height** in the **Property Inspector**.(1)\n\n![](images/media_1237547039021_display_1.png)\n\nAlternatively you could also simply uncheck the **Empty row height** property.(2)\n\n![](images/media_1237547039021_display_2.png)\n\n## Data Grid Fundamentals\n\n### What Is This \"Data Grid Templates\" Stack That Appeared in My Project?\n\nA data grid relies on record templates (forms) and column templates\n(tables) to display data. These templates are merely LiveCode controls\nthat will be used to visualize your data. In order to manage these\ncontrols the LiveCode IDE creates a stack named Data Grid Templates the\nfirst time you add a data grid to a card in your stack.\n\n#### Data Grid Templates Stack\n\nOpen the **Project Browser** (from the **Tools** menu) and expand your stack by \nclicking on the \"+\" sign. Here you will see the newly created **Data Grid \nTemplates** stack.\n \n![](images/Data_Grid_Templates_Stack_display.png)\n\nThis stack (1) contains a single card (2) for each data grid you add to a stack.\nEach card contains the template(s) and behaviors that the data grid will\nuse to display the data.\n\n#### Data Grid Templates Card Contents\n\nThis screenshot shows some controls that might appear on a Data Grid\nTemplates card. The **Row Template** (1) is the group that contains either\nall of the controls for a form or the **column templates** for a\ntable. The IDE assigns the **Row Template** group to the **dgProps\n[\"row template\"]** property of the data grid.\n\n![](images/Data_Grid_Templates_Card_Contents_display.png)\n\nThe **Behavior Script** button is assigned as the behavior to the **Row\nTemplate** group and is used for data grid forms. This script controls\nhow data is inserted into the **Row Template** controls and how those\ncontrols are positioned.\n\n#### Opening the Data Grid Templates Stack\n\n\nThe LiveCode IDE makes it easy to locate your templates in the Data Grid\nTemplates stack. Simply select the data grid control and click the **Row\nTemplate...** button (1) in the **Data Grid** (2) pane of the\ninspector.\n![](images/Opening_The_Data_Grid_Templates_Stack_display.png)\n\nThe card containing the template(s) for the selected data grid will open.\n\n![](images/media_1236056276168_display.png)\n\n### What Is a Row Template?\n\nThe reason a data grid can be customized is because it uses \"templates\"\nto represent data. A template is merely a Livecode group that will be\ncopied and used to draw your data on the screen. When working with data\ngrid forms we refer to this group as a \"Row Template\".  \n\n#### Row Template\n\n![](images/Row_Template_display.png)\n\nThe **Row Template** is a Livecode group control. This group represents\na single record in the data that you are displaying in a data grid form.\nThis group can contain any Livecode control and the look and layout are\nentirely controlled by you.\n\n#### How a Record Template Is Used\n\n![](images/How_A_Record_Template_Is_Used_display.png)\n\nWhen the data grid form displays your data it copies the **Row\nTemplate** into itself. It makes just enough copies to cover the visible\narea and then inserts data into these copies of the **Row Template**. As\nthe user uses the scrollbar to scroll through the data the same copies\nare used but new data is inserted. This means that the data grid form is\nnever drawing more records than the user can actually see which means\nthe data grid is fast.\n\n### What Is a Column Template?\n\nLike data grid forms, data grid tables also use templates. The\ndifference is that when working with a table you create a template to\nrepresent each column rather than a template to represent each row. We\nrefer to these templates as **Column Templates**. A **column template** is\nsimilar to a **row template**. One difference is that a **column template**\nis not limited to being a group. You can use a field for a template, a\ngraphic, a button, etc.\n\n#### How a Column Template Is Used\n\n![](images/How_A_Column_Template_Is_Used_display.png)\n\nWhen your data is drawn into a data grid table each **column template** is\ncopied into the data grid as many times as necessary in order to fill\nthe visible area. Data is then inserted into these templates as the user\nscrolls.\n\n### How Do I Populate a Data Grid With Data?\n\nThere are a couple of ways you can assign data to a data grid. This lesson\nwill show you how.\n\n#### Use The Property Inspector\n\n![](images/datagrid-form-inspector-text.png)\n\nYou can use the Contents pane of the **Property Inspector** to quickly\nassign data to a data grid. This does not provide as many options as\nsetting the properties mentioned below but it will get you up and\nrunning quickly.\n\n1. Switch to the **Contents** pane of the **Property Inspector**.\n2. Enter some tab delimited text into the field.\n\nWhen you use the **Property Inspector** to assign data to the data grid the\n**Property Inspector** sets the **dgText** property of the data grid.\n\n#### Set the dgText Property\n\n![](images/media_1239244946023_display.png)\n\nThe data grid works with arrays behind the scenes but in the interest of\nmaking life easier there is a **dgText** property. The syntax is as follows:\n\n    set the dgText [ pFirstLineContainsHeaders ] of group \"Data Grid\" to pText\n\n*pText* is assumed to be a collection of data where each row is\ndelimited by the return character and each item is delimited by a tab.\nYou can map each item of each line in *pText* to a particular key in an\narray (and thus a table column) by passing in true for\n**pFirstLineContainsHeaders**. If true then the data grid will extract the\nfirst line of *pText* and match the values for existing internal key/column\nnames. The default value for **pFirstLineContainsHeaders** is false.\n\nIf you set the **dgText** of a **data grid table** then all data will be\nimported and assigned to the appropriate column depending on the value\nof **pFirstLineContainsHeaders**. Normally you should set this property to\n**true** and provide the header that maps each item of each line to a\nspecific column. \n\n>**Note:** that if **pFirstLineContainsHeaders** is true then the named columns \n>must ***already*** exist in your data grid table in order to be displayed. Setting \n>**pFirstLineContainsHeaders** to **true** does not create the headers for you.\n\nIf **pFirstLineContainsHeaders** is false then the **columns** property of the\ndata grid is used for mapping. For example, the first item of a line of\n*pText* would be assigned to the column that appears on the first line\nin the **columns** property of the data grid. If line 1 of *pText*\ncontains more items than there are columns in the table then new columns\nare added. Any new columns are named \"Col 1\", \"Col 2\", etc.\n\nIf you set the **dgText** property of a **data grid form** then the data\nwill be imported but it is up to you to modify your **Row Template\nBehavior** to display the imported data correctly. If\n**pFirstLineContainsHeaders** is **false** then each item of each line in\n*pText* will be named \"Label X\" (where X is the item number) in the\narray that is passed to **FillInData**.\n\n#### Set the dgData Property\n\n![](images/media_1238000479771_display.png)\n\nThe **dgData** property of a data grid is a multi-dimensional array and is\nthe actual format that the data grid works with under the hood. The data\ngrid expects the first dimension of the array to be integers. The number\nof keys in the first dimension represents the number of records being\ndisplayed in the data grid. Here is an example with five records:\n\n\ttheDataA[1]\n\n\ttheDataA[2]\n\n\ttheDataA[3]\n\n\ttheDataA[4]\n\n\ttheDataA[5]\n\nYou then store all of your custom data in the second dimension. The\nfollowing is how you would display five records, each with a **Name**\nproperty:\n\n\ttheDataA[1][\"Name\"]\n\n\ttheDataA[2][\"Name\"]\n\n\ttheDataA[3][\"Name\"]\n\n\ttheDataA[4][\"Name\"]\n\n\ttheDataA[5][\"Name\"]\n\nIn the example code above there are 5 records, each with a **FirstName**,\n**LastName** and **Title** property. Your templates will have access to\nthese properties when the time comes to draw the data on the screen.\n\n>**Important:** if you are using a data grid table then a key in the\n> array must match the name of a column in the table in order for that variable (column)\n>to be displayed. So if you have a column named *Image URL* in your table you\n> must have a corresponding key named *Image URL*:\n\n\ttheDataA[1][\"Image URL\"]\n\n### How Do I Customize a Form's Row Template?\n\nWhen you drop a data grid from the **Tools palette** onto a card a record\ntemplate is created for you automatically.  This template will display\nline delimited text but you will most likely want to customize the\ntemplate. This lesson will show you how to begin customizing the\ntemplate to meet your needs.\n\n#### Reveal the Row Template\n\n![](images/media_1238098827623_display.png)\n\nSelect the data grid (1) and open the **Property Inspector** (2). Click on the **Row\nTemplate...** button (3) to open the card that the data grid's template is\non.\n\n![](images/media_1238098894025_display.png)\n\nThe template for the data grid will open. You can now edit the controls\nwithin the **Row Template** group in order to customize the look and\nfeel according to your needs.\n\n#### Example of a Customized Template\n\n![](images/media_1238098972256_display.png)\n\nHere is an example of a customized template. A *Name* (1) and *Title*\nfield (2) have been added as well as a control for displaying a picture of the person\n(3).\n\n#### Edit Behavior\n\n![](images/media_1278011291637_display.png)\n\nAfter customizing the controls in your template you need to update the\n**behavior** associated with the template. The behavior script is where\nyou tell the data grid what data goes in which controls as well as how\nto position the controls.\n\nClick the **Edit Script...** button to open the behavior script.\n\n#### Edit the Behavior Script\n\n![](images/media_1238099074165_display.png)\n\nThe default behavior script contains comments explaining what to do in\neach handler. The **FillInData** message is where you will move data from a\nrecord into a LiveCode control. To do this you assign keys of *pDataArray*\n(1) to a control (2).\n\nNote that the first parameter passed to **FillInData** is an array\nrepresenting the current row being displayed. Also note how this is\ndifferent than the first parameter passed to **FillInData** for a\n**column template** which is the value of the column.\n\n>**Important:** Make sure that you always refer to controls in the\n> template using ***of me*** (3). Since multiple copies of the template will\n> be made you will have multiple controls with the same names. Using ***of me*** \n>removes any ambiguity and ensures that data is displayed in the\n> correct control.\n\n#### An Example of a Customized Behavior\n\n![](images/media_1238100174053_display.png)\n\nThis is an example of a behavior that has been customized. The **dgData** of\nthe data grid this template is associated with looks like this:\n\n\ttheDataA[1][\"FirstName\"]\n\n\ttheDataA[1][\"LastName\"]\n\n\ttheDataA[1][\"Title\"]\n\n\ttheDataA[2][\"FirstName\"]\n\n\ttheDataA[2][\"LastName\"]\n\n\ttheDataA[2][\"Title\"]\n\nWhen filling in the data the *FirstName* and *LastName* values are \nplaced into a *Name* field (1) and the *Title* value into a *Title* field (2).\n\nThis example also shows how to use **LayoutControl** to layout your **row\ntemplate**. Notice how the rectangle of the **row template** is captured at the\nbeginning (3) and then used to position all of the other elements (4).\n\n### How Do I Customize a Table's Columns?\n\nA **column template** is nothing more than a LiveCode control that is named\nafter a column in your table. This control is located in the **row\ntemplate** group for your data grid. This lesson will discuss how to\ncreate templates for columns in a data grid table.\n\n#### Use Property Inspector to Create a Column Template\n\n![](images/media_1238002014733_display.png)\n\nIn the **Property Inspector**, select the column you would like to customize\n(1). Click the \"+\" button at the bottom of the pane to create a **column\ntemplate** (2).\n\n![](images/media_1238002031307_display.png)\n\n#### Edit the Row Template Group\n\n![](images/media_1238002170294_display.png)\n\nIn order to customize the look you need to edit the contents of the\ntemplate group. Select it (1) and click **Edit Group** (2) in the LiveCode\ntoolbar.\n\n#### Edit Column Group\n\n![](images/media_1238002156173_display.png)\n\nNow select the column group (1) and click **Edit Group** again (2). At\nthis point you can customize what controls appear in the column template.\n\n#### A Column Template\n\n![](images/media_1236271024680_display.png)\n\nIn this example there are three controls for three different\ncolumns in the data grid table.\n\n** A field named *Time* that formats data into a time format (1) (Just rename the field that \nis included in the row template by default).\n** A group named *My Rating*. This group has some widgets that display images of a star. (2)\n** A button named *Genre* that offers different Genre selections. (3)\n\nHere is what those controls look like in the **Project Browser**. Notice\nhow all of the controls are located in the **Row Template** group.\n\n#### Supporting Controls\n\n![](images/media_1238002344589_display.png)\n\nThe controls created (*Time* field, *Genre* button and *My Rating*\ngroup) each have behaviors associated with them. These were created automatically \nand are stored in appropriately named buttons.\n\n#### Behavior Example\n\n![](images/media_1238002391039_display.png)\n\nHere is what the **FillInData** handler looks like for the *My Rating* column (as \nstored in the **My Rating Behaviour** button). *pData* (1) contains the value of the *My \nRating* column for the row being displayed. \n\nNote how this parameter differs than the parameter sent to **FillInData** for a \n**row template**. For a **row template** the parameter passed in is an array.\n\nYou then use that value to determine how many stars to display (2).\n\n#### Result\n\n![](images/media_1236272022940_display.png)\n\nHere is what the table looks like now that the custom column templates have been \ndefined. The table found controls named *Genre*, *Time* and *My\nRating* in the record template group so those were used to render the\ndata for those three columns.\n\n## Working With Data Grids (Forms & Tables)\n\n### How Do I Determine the Selected Line?\n\n#### The dgHilitedLines Property\n\n![](images/media_1238000737113_display.png)\n\nYou can get the selected line or lines of a data grid using the **dgHilitedLines**\n property.\n\n#### Determining the Line in a Row's Behavior\n\nIf we need to determine the line number of a row's behavior script we\ncan access the **dgLine** property of the row template. The data grid\nautomatically assigns the **dgLine** and the **dgIndex** property when\ndisplaying the row.\n\n![](images/media_1238000671040_display.png)\n\n>**Note:** that the use of ***of me*** (1) can be used because the **mouseDown**\nhandler is in the **row template** group behavior script (which is as if the\nscript were in the **row template** group itself). If you were to put the\n**mouseDown** handler in the script of a button that was located in the row\ntemplate group then you would have to use ***of the dgControl of me***\ninstead.\n\n### How Do I Get Data Associated With a Row or Column?\n\nThis lesson will show you how to get the array of data associated with a\nrow in a Data Grid form as well as how to get the data associated with a\nrow's column in a Data Grid table.\n\nTo get the array of data from a Data Grid you can use one of the\nfollowing properties:\n\n• the **dgDataOfIndex**\n\n• the **dgDataOfLine**\n\nBoth properties return the array associated with a row in the Data Grid,\nthey just allow you to target the row differently. **dgDataOfLine** allows\nyou to target the row in the order it appears visually in the Data Grid.\n**dgDataOfIndex** allows you to target a row based on the internal index\nnumber that the Data Grid uses to identify the row. This value does not\nchange, even if you change the sort order for the Data Grid.\n\nIf you just need a particular column from a row then you can use one of\nthe following functions:\n\n• **GetDataOfIndex**()\n\n• **GetDataOfLine**()\n\nBoth of these functions return the value associated with a particular\nkey, or column, for a row.\n\nLet's look at some examples of how to use these properties and\nfunctions.\n\n#### Getting Data Associated With the Selected Row\n\n![](images/media_1247571008922_display.png)\n\nIf you want to get the data associated with the selected row use the\n**dgHilitedLines** property. The value of that property can be used in\nconjunction with the **dgDataOfLine** property. Here is an example of a\nscript that could be placed in a button. The Data Grid group script is\nNOT in the message path for this example:\n\n    on mouseUp pBtnNum\n      if pBtnNum is 1 then\n        put the dgHilitedLines of group \"DataGrid 1\" into theLine\n        put the dgDataOfLine[theLine] of group \"DataGrid 1\" into theDataA\n        ## theDataA is now an array variable.\n        ## In the case of the Data Grid pictured above the keys of the \n        ## array are id, FirstName, LastName and Title.\n        ## This answer dialog will display: Dusty Bottoms\n        answer theDataA[\"FirstName\"] && theDataA[\"LastName\"]\n      end if\n    end mouseUp\n\nNow let's assume that you only want to get the **id** value for the\nselected row without fetching the entire array. You can use\n**GetDataOfLine** to accomplish this. You need to keep in mind that\n**GetDataOfLine** (and **GetDataOfIndex**) is a function defined for a Data\nGrid. That means that the Data Grid group ***MUST*** be in the message path.\nIf the Data Grid group is not in the message path you would need to use\nthe **call** command.\n\nTo illustrate how to use **GetDataOfLine** let's look at how you could\ndefine your own custom property for a Data Grid. The following code\ndefines a **uSelectedID** custom property that returns the **id** of the\nselected row. This code would be placed in the Data Grid group script.\n\n    getProp uSelectedID\n      put the dgHilitedLines of me into theLine\n      return GetDataOfLine(theLine, \"id\")\n    end uSelectedID\n\nYou can now access this custom property from any script in your\napplication:\n\n    put the uSelectedID of group \"DataGrid\" into theSelectedID\n\n#### Getting Data When the Selection Changes\n\nWhen the user makes a new selection in a Data Grid the **selectionChanged**\nmessage is sent to the Data Grid. The following **selectionChanged** message\ncould appear in the script of your Data Grid group:\n\n    -- example that would be placed in the data grid script.\n    on selectionChanged pHilitedIndex, pPrevHilitedIndex\n      put the dgDataOfIndex [ pHilitedIndex ] of me into theDataA\n      ## Now call handler in card script that loads info for selected person.\n      uiViewRecordOfID theDataA[\"id\"]\n    end selectionChanged\n\n#### Getting Data in a Row Behavior\n\n![](images/media_1237839849843_display.png)\n\nIf you want to get the data in a **row behavior** script you can use the\n**dgIndex** or **dgLine** custom properties of the row control. Here is an\nexample that could be used in a Data Grid's **form** behavior script:\n\n    ##Data Grid Row behavior script\n    \n    on mouseUp pMouseBtnNum\n      if pMouseBtnNum is 1 then\n        ## the dgIndex is a custom property of this row.\n        ## the dgControl is a custom property of the data grid itself.\n        put the dgDataOfIndex[ the dgIndex of me] of the dgControl of me into theDataA\n        uiViewRecordOfID theDataA[\"id\"]\n      end if\n    end mouseUp\n\nIf you wanted to move this same **mouseUp** code into the Data Grid script\nitself then you would change the ***me*** references to ***target*** and add a\ncheck to ensure that the user clicked on a row. This example also uses\n**GetDataOfIndex** rather than **dgDataOfIndex** to show an alternative.\n\n    ##Data Grid Form Example: Data Grid Script\n    \n    on mouseUp pMouseBtnNum\n      if pMouseBtnNum is 1 then\n        ## the dgIndex is a custom property of the row.\n        put the dgIndex of the target into theIndexThatWasClickedOn\n        if theIndexThatWasClickedOn is not empty then\n          put GetDataOfIndex(theIndexThatWasClickedOn, \"id\") into theID\n          uiViewRecordOfID theID\n        end if\n      end if\n    end mouseUp\n\n#### Getting Data in a Column Behavior\n\n![](images/media_1262102060634_display.png)\n\nIf you want to get the data in a column behavior script you can use the\n**dgIndex** or **dgLine** and **dgColumn** custom properties of the column control.\nHere is an example that could be used in a Data Grid column behavior\nscript:\n\n***Data Grid Table Example: Column Behavior***\n\n    on mouseUp pMouseBtnNum\n      if pMouseBtnNum is 1 then\n      ## the dgIndex is a custom property of the row.\n      ## the dgColumn is a custom property of the column.\n        put GetDataOfIndex(the dgIndex of me, the dgColumn of me) into theColumnValue\n        ## Do something with column value..\n      end if\n    end mouseUp\n\nIf you wanted to move this same **mouseUp** code into the Data Grid script\nitself then you would change the ***me*** references to ***target*** and add a\ncheck to ensure that the user clicked on a column:\n\n***Data Grid Table Example: Data Grid Script***\n\n    on mouseUp pMouseBtnNum\n      if pMouseBtnNum is 1 then\n        ## the dgIndex is a custom property of the row.\n        ## the dgColumn is a custom property of the column.\n        put the dgColumn of the target into theColumn\n        if theColumn is not empty then ## User clicked on a column\n          put GetDataOfIndex(the dgIndex of the target, theColumn) into theColumnValue\n          ## Do something with column value..\n        end if\n      end if\n    end mouseUp\n\n### How Do I Add a Row of Data to an Existing Data Grid?\n\nSometimes you may want to add a row of data to a Data Grid without\nhaving to set the **dgData** or **dgText** property. You can add a single row of\ndata by calling the **AddData** or **AddLine** commands of a Data Grid.\n\n#### Using AddData\n\nTo use **AddData** you create an array containing the values for the new\nrow. Here is an example of how to add a new row and have it appear as\nline 1 in a Data Grid. \n\n>**Note:** This example script resides outside of the Data\n>Grid group script so **AddData** is not in the message path. This is why the\n>dispatch command is used.\n\n    put \"First Name\" into theDataA[\"FirstName\"]\n    put \"Last Name\" into theDataA[\"LastName\"]\n    put \"Title\" into theDataA[\"Title\"]\n    put  1 into theLineNo\n    dispatch \"AddData\" to group \"DataGrid\" with theDataA, theLineNo\n    put the result into theNewIndex -- integer if successful, error string otherwise\n\n![](images/media_1256565520707_display.png)\n\n#### Using AddLine\n\nTo use **AddLine** you create a tab delimited string of text containing\nthe values for the new row. You also need to tell the Data Grid the\nnames of the columns that the data should map to. Here is an example of\nhow to add a new row and have it appear as the last line in a Data Grid.\n\n    put \"First Name\" & tab & \"Last Name\" & tab & \"Title\" into theRowData\n    put \"FirstName\" & cr & \"LastName\" & cr & \"Title\" into theDataColumns\n    put the dgNumberOfLines of me + 1 into theLineNo\n    AddLine theRowData, theDataColumns, theLineNo\n\n>**Note:** This example script resides inside the Data Grid group script so \n>**AddLine** is in the message path.\n\n![](images/using_addLine_display.png)\n\n#### Scrolling Data Into View and Getting the Data Control\n\nAfter you add the data to the Data Grid you may want to scroll the new\nrow into view. You can call **ScrollIndexIntoView** or\n**ScrollLineIntoView** to do this.\n\n    ScrollIndexIntoView theNewIndex\n\nor\n\n    ScrollLineIntoView theLineNo\n\n### How Do I Update Data in a Row?\n\nThis lesson will show you how to update data in a row.\n\n#### Updating a Row's Data and Refresh Data Grid Automatically\n\nYou can update data in a row by setting the **dgDataOfIndex** or\n**dgDataOfLine** properties. You can set either property to an array\ncontaining the values for the row.\n\n    put \"New First Name\" into theDataA[\"FirstName\"]\n    put \"New Last Name\" into theDataA[\"LastName\"]\n    put \"New Title\" into theDataA[\"Title\"]\n    set the dgDataOfIndex[ the dgHilitedIndex of group \"DataGrid\" ] \\\n         of group \"DataGrid\" to theDataA\n\n![](images/datagrid_row_update_display.png)\n\nThe data grid will now refresh with the new data you assigned to the\nhighlighted index.\n\n#### Updating a Row's Data Without Refreshing the Data Grid\n\nIf you want to update the data in a row without automatically refreshing\nthe data grid then you can use **SetDataOfIndex**. You can then use the\n**RefreshList** command to redraw the data grid.\n\nExample that sets all values at once:\n\n    put \"New First Name\" into theDataA[\"FirstName\"]\n    put \"New Last Name\" into theDataA[\"LastName\"]\n    put \"New Title\" into theDataA[\"Title\"]\n    dispatch \"SetDataOfIndex\" to group \"DataGrid\" \\\n    with the dgHilitedIndex of group \"DataGrid\", empty, theDataA\n    dispatch \"RefreshIndex\" to group \"DataGrid\" with the \\\n        dgHilitedIndex of group \"DataGrid\"\n\nExample that sets individual keys of the row one at a time:\n\n    dispatch \"SetDataOfIndex\" to group \"DataGrid\" with the \\\n        dgHilitedIndex of group \"DataGrid\", \"FirstName\", \"New First Name\"\n    dispatch \"SetDataOfIndex\" to group \"DataGrid\" with the \\\n        dgHilitedIndex of group \"DataGrid\", \"LastName\", \"New Last Name\"\n    dispatch \"SetDataOfIndex\" to group \"DataGrid\" with the \\\n        dgHilitedIndex of group \"DataGrid\", \"Title\", \"New Title\"\n    dispatch \"RefreshIndex\" to group \"DataGrid\" with the \\\n        dgHilitedIndex of group \"DataGrid\"\n\n### How Do I Clear Data From a Data Grid?\n\nClearing the data out of a Data Grid is as easy as setting the **dgData**\n(or **dgText**) of the Data Grid to **empty**.\n\n    set the dgData of group \"DataGrid\" to empty\n\n### How Do I Add a mouseDown Event to the Data Grid Without Breaking It?\n\nThis lesson will show you how you to write your own **mouseDown** event in a\nData Grid without breaking the default Data Grid behavior. You need to\nknow how to do this when showing a contextual menu or if during the\n**mouseDown** event you want to use the data in the row the user clicked on.\n\nWhen you add a **mouseDown** handler to a Data Grid you are intercepting a\nmessage that the Data Grid normally handles. Doing so changes the\nbehavior of the Data Grid and you need to take that into account when\ncoding your **mouseDown** handler.\n\n#### What Doesn't Work\n\nIf you were to place the following code in your Data Grid script you\nwould not get the result you were expecting. The reason is that the\nline that was clicked on would not be selected until after your popup\nmenu was displayed. Why? Because the Data Grid behavior script processes\n**mouseDown** AFTER the **mouseDown** handler you have defined in the Data Grid \nscript itself.\n\n    on mouseDown pMouseBtnNum\n      if pMouseBtnNum is 3 then\n        ## Oops! Line that user clicked on has not been selected since\n        ## Data Grid has not processed mouseDown yet. Contextual\n        ## menu won't target proper line.\n        popup button \"MyContextualMenu\"\n      end if\n      pass mouseDown\n    end mouseDown\n\n#### What Does Work: dgMouseDown\n\nIn order to work around this the Data Grid wraps all **mouseDown**\nfunctionality in a handler named **dgMouseDown**. You can call this\nhandler in your code in order to get the expected results.\n\nThe following examples show how you can define a **mouseDown** handler in a\nData Grid script.  In the examples the line the user clicks on will be\nselected before the custom **mouseDown** code executes. Note that the **mouseDown** \nmessage is not passed after calling **dgMouseDown**. This would only repeat the\ncall to **dgMouseDown** which is not the desired behavior.\n\n***Example: Contextual Menu***\n\n    on mouseDown pMouseBtnNum\n      ## Let Data Grid process mouseDown and select row that was clicked on\n      dgMouseDown pMouseBtnNum\n      ## Now contextual menu will act on the proper line.\n      if pMouseBtnNum is 3 then\n        popup button \"MyContextualMenu\"\n      end if\n      ## Don't pass mouseDown\n    end mouseDown\n\n***Example: Getting Value From Cell Clicked On (Data Grid table)***\n\n    on mouseDown pMouseBtnNum\n      ## Let Data Grid process mouseDown and select row that was clicked on\n      dgMouseDown pMouseBtnNum\n      ## Get value of column clicked on. The column name can be accessed in the\n      ## dgColumn custom property of the column control (the target).\n      put GetDataOfIndex(the dgHilitedIndexes of me, the dgColumn of the target) into \\\n          theColumnValue\n      ## Don't pass mouseDown\n    end mouseDown\n\n### How Can I Store an Option Menu Value When the User Makes a Selection?\n\nThis lesson will demonstrate how to update the data associated with a\nrow in a data grid when the user makes a selection from an option menu.\n\n#### Example Data Grid\n\n![](images/media_1239422115316_display.png)\n\nHere is the data grid we will be working with. *Col 2* has been given the name *Rating* \nand has been customized with an **option menu**. What we are going to do is update the\ndata associated with a row to reflect the selection the user makes in\nthe **option menu**.\n\n#### Edit Column Behavior\n\n![](images/media_1239422153707_display.png)\n\nWe need to customize the column behavior. From the **Columns** pane (1)\nin the **Property Inspector** select the *Rating* column (2) and then click the **Column\nBehavior** button (3).\n\n#### FillInData\n\n![](images/media_1239422182841_display.png)\n\nIn the **FillInData** handler we are setting the **menuhistory** based on\nthe value of *pData* that is passed in. As there is only a single button in the \n*Rating* column template, it can be referreed to as ***button 1 of me***.\n\n#### menuPick\n\n![](images/media_1239422596775_display.png)\n\nA **menuPick** handler needs to be added to the column behavior script in\norder to accomplish the goal. When the user makes a selection from the\noption menu the **menuPick** message is sent by the engine. The **SetDataOfIndex** \ncommand to can then update the value for the column.\nThe parameters for **SetDataOfIndex** are the **index**, the **column name** and\nthe **new value**. Since the above script is in a column behavior we can use\nthe **dgIndex of me** (1) for the **index** and the **dgColumn of me** (2) for the\n**column name**.\n\n#### The Behavior in Action\n\nHere is what the data grid's internal array looks like before making a\nmenu selection.\n\n![](images/media_1239422249334_display.png)\n\nAfter making a selection for row 2 (1) the internal value was updated (2).\n\n![](images/media_1239422260513_display.png)\n\n### How Do I Refresh a Data Grid After Making Changes to a Template Through Script?\n\nThe command **ResetList** redraws a data grid after having copied in fresh copies of any \ntemplates. Here is an example of how you might use it.\n\n    ## Get reference to group that serves as row template for data grid\n    put the dgProps[\"row template\"] of group \"DataGrid\" into theRowTemplate\n    \n    ## For tables get reference to custom template for column\n    put the long id of group \"My Column\" of theRowTemplate into theColTemplate\n    \n    ## Make any updates to template\n    set the text of button 1 of theColTemplate to \"New Option1\" & cr & \"New Option 2\"\n    \n    ## Refresh the data grid\n    dispatch \"ResetList\" to group \"DataGrid\"\n\nOr you can simply issue it from the message box.\n\n![](images/datagrid_send_refresh_list.png)\n\n### How Do I Use a Template in Multiple Data Grids?\n\nIf your application needs to use the same style of data grid in multiple\nplaces in your project then you can easily share the same row template\nbetween multiple data grids. This lesson will show you how.\n\n#### Create First Data Grid\n\n![](images/media_1240455722959_display.png)\n\nThe first step is to create your first data grid and customize the\ntemplate (1). The data grid property that determines the **Row\nTemplate** that is used to draw the data grid is **dgProps[\"row\ntemplate\"]**. The message box shows a query for this property\nin order to get a reference to the data grids row template (2).\n\n#### Create Other Data Grids\n\nNow you can add other data grids to your project. Here the second data grid is added to \nthe same stack as the first. After adding the data grid you can set the **dgProps[\"row \ntemplate\"]** property to the **long id** of the first data grid's **row template**. \n\n![](images/media_1240455973755_display.png)\n\n>You can also see that the **Row Behavior** for *datagrid 2* is listed as coming \n>from the same template card as for the original *DataGrid 1* which was \n>obtained in the previous step.\n\nAlternatively you could also do the following: (here we are setting the properties \nof a data grid in a second stack)\n\n    set the dgProps[\"row template\"] of group \"DataGrid 1\" of stack \"Untitled 1\"\\\n     to the dgProps[\"row template\"] of group \"DataGrid 1\" of stack \"my program\"\n    \n\n>**Note:** The LiveCode IDE creates a card in the **Data Grid Template XXX**\n> stack with a **row template** every time you drag a data grid on to a card.\n> You may want to delete this card if you aren't going to be using that\n> template.\n\n#### Result\n\n![](images/datagrid_setprops_two_stacks_1.png)\n\nSee how the **Row Behavior** script (1) correctly identifies the template from the first \nstack (**Data Grid Sampler**) and how this indeed does contain the **Row Template** (2) \nbeing used in the second stack.\n\n![](images/datagrid_setprops_two_stacks_2.png)\n\n### How Can I See What the Data Grid's Internal Array Currently Looks Like?\n\n#### Using PrintKeys\n\n![](images/media_1239422249334_display.png)\n\nA data grid has a helper command that will print off the first line of\neach key in the internal data array. If you need to quickly see what the\ninternal array looks like just send **PrintKeys** to the data grid.\nThis will print the array in the message box.\n\n>**Note:** You should not rely on **PrintKeys** for anything other than taking \n> a quick peek at the array. It only prints the first line of each key so \n> it is not a 100% accurate view of the data.\n\n### How Do I Get Aggregate Values for Columns?\n\nThis lesson will show you how to add a custom property to a data grid\nthat returns the aggregate value of a column. Usually this would be used\nwith data grid tables but works equally as well with data grid forms.\n\n#### Add a getProp to Your Data Grid Script\n\n![](images/Add_A_getProp_To_Your_Data_Grid_Script_display.png)\n\nThe simplest way to calculate aggregate values is to add a **getProp**\nhandler to your data grid script. In this example a custom\nproperty called **uSumOfColumn** (1) has been defined. Passing it a column name (2)\nreturns the sum of all rows of that column (3).\n\n#### Using the Custom Property\n\n![](images/Using_the_Custom_Property_display.png)\n\nHere is an example of using the custom property. When clicking on the\nbutton (1) the text of another field (in this case \"sum\") is set to the **uSumOfColumn**\ncustom property (2).\n\n#### The Result\n\n![](images/The_Result_display.png)\n\nHere the result has been put into the *Sum* field.\n\n### How Do I Determine if the Data Grid Has Focus?\n\nYou can determine if the data grid has focus by performing the following\ncheck:\n\n    if the long id of group \"DataGrid\" is in the long id of the focusedobject then\n    ## Data grid has focus\n    end if\n\n### How Do I Export Data From a Data Grid?\n\nThis lesson will show you how to get data out of a data grid.\n\n#### The Example Data Grid\n\n![](images/DataGrid_Sampler_Stack.png)\n\nThe data will be exported from a data grid that looks like this.\n\n#### The Handler for Populating Data Grid\n\n    command uiPopulatePeople\n       put \"images/\" into theImageFolder\n       \n       put \"Lucky\" into theDataA[1][\"FirstName\"]\n       put \"Day\" into theDataA[1][\"LastName\"]\n       put \"Three Amigo\" into theDataA[1][\"Title\"]\n       put theImageFolder & \"monkey.jpg\" into theDataA[1][\"Image URL\"]\n       \n       put \"Dusty\" into theDataA[2][\"FirstName\"]\n       put \"Bottoms\" into theDataA[2][\"LastName\"]\n       put \"Three Amigo\" into theDataA[2][\"Title\"]\n       put theImageFolder & \"monkey.jpg\" into theDataA[2][\"Image URL\"]\n       \n       put \"Ned\" into theDataA[3][\"FirstName\"]\n       put \"Nederlander\" into theDataA[3][\"LastName\"]\n       put \"Three Amigo\" into theDataA[3][\"Title\"]\n       put theImageFolder & \"monkey.jpg\" into theDataA[3][\"Image URL\"]\n       \n       put \"Jane\" into theDataA[4][\"FirstName\"]\n       put \"Blue\" into theDataA[4][\"LastName\"]\n       put \"Secret Agent\" into theDataA[4][\"Title\"]\n       put theImageFolder & \"monkey.jpg\" into theDataA[4][\"Image URL\"]\n       \n       put \"Jefferson\" into theDataA[5][\"FirstName\"]\n       put \"Blue\" into theDataA[5][\"LastName\"]\n       put \"Secret Agent\" into theDataA[5][\"Title\"]\n       put theImageFolder & \"monkey.jpg\" into theDataA[5][\"Image URL\"]\n       \n      lock screen\n      set the dgData of group \"DataGrid 1\" to theData\n      \n      ## Hilite first row\n      set the dgHilitedLines of group \"DataGrid 1\" to 1\n      unlock screen\n    end uiPopulatePeople\n    \nThis is the code that was used to populate the data grid. This shows you\nthe keys that each record has (*FirstName*, *LastName*, *Title* and *Image URL*).\n\n#### Export Handler\n\n     command uiExportData\n       ## Export data to XML\n       \n       ## Get Data Grid Array\n       put the dgData of group \"DataGrid 1\" into theDataA\n       \n       ## Get indexes in proper order\n       put the dgIndexes of group \"DataGrid 1\" into theIndexes\n       \n       ## Prefix XML\n       put \"<people>\" & cr into theXML\n       \n       ## Loop through data, putting into XML format\n       repeat for each item theIndex in theIndexes\n          put \"<person>\" & cr after theXML\n          put \"<first_name>\" & theDataA[theIndex][\"FirstName\"] & \"</first_name>\" & cr after theXML\n          put \"<last_name>\" & theDataA[theIndex][\"LastName\"] & \"</last_name>\" & cr after theXML\n          put \"<title>\" & theDataA[theIndex][\"Title\"] & \"</title>\" & cr after theXML\n          put \"</person>\" & cr after theXML\n        end repeat\n       \n        ## Close root XML tag\n        put \"</people>\" after theXML\n        \n        put theXML\n     end uiExportData\n\nThis is an example of how to get data out of a data grid. Begin by\ngetting the **dgData** array and the **dgIndexes**. The indexes are a comma\ndelimited list of the keys of the **dgData** in the proper order.\n\nAfter you have the array and the ordered list of indexes you can loop\nthrough each record in the array. In this example the data is just wrapped in XML tags.\n\n#### Example Output\n\nThis is what the output for this example looks like in the message box.\n\n![](images/media_1247315800246_display.png)\n\n### How Do I Work With Checkboxes in a Data Grid?\n\nThis lesson will demonstrate how to associate the hilite state of a\ncheckbox in a data grid with a row value in the data grid.\n\n***Attached Files***\n\n[Checkbox_Example.livecode](http://lessons.livecode.com/s/lessons/files/303?lesson_id=26382)\n\n#### Adding a Checkbox to a Form\n\n![](images/media_1278011173914_display.png)\n\nBefore you begin, drag a data grid onto a stack and set the style to \n**Form** using the **Property Inspector**.\n\nClick the **Row Template** button to open the template for the data grid.\n\n#### Edit Row Template Group\n\nNow that the card with the data grid row template is visible, open the\n**Project Browser** selecting the **Tools > Project Browser**\nmenu option.\n\nSelect the card with your template (it should be the second card under\nthe Data Grid Templates stack) (1). Next, double-click  the **Row Template**\ngroup on the card (2). Doing so will select the group on the card (3).\n\n![](images/media_1296743464605_display.png)\n\nNow select the **Object > Edit Group** menu option. This will put the\ngroup in edit mode which will allow you to drag controls from the tools\npalette into the group.\n\n![](images/media_1296743472921_display.png)\n\n#### Add a Checkbox\n\nFrom the **tools palette**, drag a **checkbox** onto the card and place it in\nthe upper-left corner. The button will appear in the list of controls in\nthe **Project Browser**.\n\n![](images/media_1296743517047_display.png)\n\n#### Edit Checkbox Properties\n\nOpen the button's Property Inspector, select the **Position** pane and change the \n**height** to 21. Set the **left** and **top** properties to 0.\n\n![](images/media_1296743535342_display.png)\n\n#### Delete the Label Field\n \nNow that you have added the checkbox button you no longer need the\n*Label* field in the row template. We will do this using the **Project Browser**\n\n>**Note:** You need to stop editing the group before returning to the **Project \n>Browser** in order for it to correctly update. Click on the card area under the \n>**checkbox** and then click the **Stop Editing** button on the **Toolbar**. \n\n![](images/datagrid_stop_editing_btn.png)\n\n>You may also need to **collapse** the card **tree** in the **Project Browser** \n>window and reopen it to force the update to the **Project Browser** display.\n\nIn the **Project Browser** select the *Label* field and delete it by pressing the \n***delete***  key on the keyboard.\n\n![](images/media_1296743546298_display.png)\n\nYou will be asked to confirm you wish to delete this object. Check that it is identifying \nthe correct object to delete, and then click **OK**.\n\n![](images/media_1296743555165_display_0.png)\n\nAfter deleting the field you should have only the *Background* graphic and the\n*Check* checkbox in the **Row Template** group.\n\n![](images/media_1296743555165_display.png)\n\n\n#### Edit Row Behavior\n\nNext you need to edit the **Row Behavior** in order to take into account\nthe new checkbox control.\n \n![](images/media_1278011291637_display.png)\n\nClick the **Edit Script** button.\n\n#### Edit the FillInData Handler\n \n![](images/media_1296825944670_display.png)\n\nIn the **FillInData** Handler you need to remove references to the *Label*\nfield and add code for the *Check* button. The code will set the\n**label** of the checkbox to the **label** property of the data grid row.\nIt will set the **hilited** property to the **checked** property of the\nrow.\n\n***Copy & Paste***\n\n    on FillInData pDataArray\n      -- This message is sent when the Data Grid needs to populate\n      -- this template with the data from a record. pDataArray is an\n      -- an array containing the records data.\n      -- You do not need to resize any of your template's controls in\n      -- this message. All resizing should be handled in resizeControl.\n      set the label of button \"Check\" of me to pDataArray[\"label\"]\n      set the hilited of button \"Check\" of me to pDataArray[\"checked\"]\n    end FillInData\n\n#### Update LayoutControl and ResetData\n\nThe **LayoutControl** and **ResetData** handlers also have references to the *Label* field \nwhich no longer exists. Update both of those handlers with references to the *Check* button.\n\n***Copy & Paste***\n\n    on LayoutControl pControlRect\n      local theFieldRect\n      -- This message is sent when you should layout your \n      -- template's controls.\n      -- This is where you resize the 'Background' graphic, \n      -- resize fields and position objects.\n      -- For fixed height data grid forms you can use items 1 \n      -- through 4 of pControlRect as boundaries for laying \n      -- out your controls.\n      -- For variable height data grid forms you can use \n      -- items 1 through 3 of pControlRect as boundaries,\n      -- expanding the height of your control as needed.\n      -- Example:\n      put the rect of button \"Check\" of me into theFieldRect\n      put item 3 of pControlRect - 5 into item 3 of theFieldRect\n      set the rect of button \"Check\" of me to theFieldRect\n      set the rect of graphic \"Background\" of me to pControlRect\n    end LayoutControl\n    \n    on ResetData\n      -- Sent when data is being emptied because the control is \n      -- no longer being used to display data\n      set the text of button \"Check\" of me to empty\n      set the hilite of button \"Check\" of me to false\n    end ResetData\n\n#### Update Data Grid Row Value When User Changes Checkbox State\n\nWhen the user clicks on the checkbox the hilited state will change. You\nneed to update the row data in the data grid when this happens so that\nthe **dgData** array properly represents what is being seen in the\ninterface. You can do this in the **mouseUp** handler of the behavior\nscript.\n\n![](images/media_1296762637136_display.png)\n\nDuring **mouseUp** the hilited state of the checkbox has been changed and so\nit is safe to save the value. You just need to call **SetDataOfLine** and\npass in **the hilite of the target** (the target being the checkbox\nbutton).\n\nAdd the following to the behavior script. Make sure and compile the\nscript afterwards.\n\n***Copy & Paste***\n\n    on mouseUp pMouseBtnNum\n      if pMouseBtnNum is 1 then\n      ## did they click on the checkbox?\n        if the short name of the target is \"Check\" then\n          ## Update internal value in data grid\n          SetDataOfLine the dgLine of me, \"checked\", the hilite \\\n               of the target\n        end if\n      end if\n    end mouseUp\n\n#### Populate the Data Grid\n\nYou have now finished configuring the Data Grid so it is time to test.\nAdd a button to the stack and name it **Populate grid**.\n\n![](images/media_1296743746869_display.png)\n\nWith the **Edit tool** active, ***right-click*** on the button and select **Edit\nScript.**\n\n![](images/media_1296743753028_display.png)\n\nAdd a simple script that will populate the data grid with two rows. Each\nhas the **label** and **checked** properties that were referenced in the\nbehavior script earlier.\n\n![](images/media_1296743812938_display.png)\n\nPaste this script to the button script.\n\n***Copy & Paste***\n\n    on mouseUp\n      put \"Line 1\" into theDataA[1][\"label\"]\n      put \"true\" into theDataA[1][\"checked\"]\n      put \"Line 2\" into theDataA[2][\"label\"]\n      put \"false\" into theDataA[2][\"checked\"]\n      set the dgData of group \"DataGrid 1\" to theDataA\n    end mouseUp\n\n#### Test\n\nAfter compiling the script, click on the **Populate Grid** button. The\ncard should now look similar to this.\n\n![](images/media_1296743823448_display.png)\n\nTry it out. If you click on a checkbox in line 1 it should uncheck. Click on it again \nto check it.\n\n#### Checking/Unchecking All Checkboxes in a Data Grid\n \nWhen working with lists that have checkboxes it is nice to include the\noption to check or uncheck all of the items in the list. Let's look at\nhow to do that.\n\nAdd a button to the card and name it **Check/Uncheck**.\n\n![](images/media_1296744299512_display.png)\n\nEdit the script of the button.\n\n![](images/media_1296745339768_display.png)\n\nThe code for checking/unchecking all items in the list isn't too\ncomplicated. Here is how the logic is broken up:\n\n1. Use the *checked* value of row 1 to decide what to set all of the other rows \nto. Get the current value of row 1 and toggle it.\n2. Loop through all lines of the data grid, setting the value of the **checked** property \nof each row to the new value. Use **SetDataOfLine** as this command will not \nredraw the data grid each time it is called.\n3. Finally refresh the data grid so that the new row values are used to display each row.\n\n***Copy & Paste***\n\n    on mouseUp\n    ## Get Checked Value for 1st Row ##\n      dispatch function \"GetDataOfLine\" to group \"DataGrid 1\" with \\\n          1,\"checked\"\n      put the result into theCheckedValue\n      \n    ## Get inverse value of 1st row\n      put not theCheckedValue into theCheckedValue\n      \n    ## Update all rows\n    ## SetDataOfLine does not redraw data grid\n      repeat with theLineNo = 1 to the dgNumberOfLines of \\\n          group \"DataGrid 1\"\n        dispatch \"SetDataOfLine\" to group \"DataGrid 1\" with \\\n              theLineNo, \"checked\", theCheckedValue\n      end repeat\n      \n    ## Update datagrid display\n      dispatch \"RefreshList\" to group \"DataGrid 1\"\n    end mouseUp\n   \n\n#### Test\n\nClick the **Check/Uncheck** button to test. You should see the\ncheckboxes toggle between the checked and unchecked state.\n\n![](images/media_1296745349667_display.png)\n\nIf you get the **dgData** or **dgText** property of the data grid then you will\nsee the proper values for the *checked* state of each row.\n\n![](images/media_1296745354985_display.png)\n\n## Working With Data Grid Tables\n \n### How Do I Change Column Alignment?\n \n#### Using the Property Inspector\n \nSelect the data grid and open the **Property Inspector**. Navigate to the\n**Columns** pane (1), select the column you want to modify (2), and\nchange the **alignment** (3).\n\n![](images/Using_the_Property_Inspector_display.png)\n\n#### Using Script\n \n![](images/media_1238000788633_display.png)\n\nYou can change the **alignment** by setting the **dgColumnAlignment** for a \ncolumn.\n\n    set the dgColumnAlignment[\"Name\"] of group \"DataGrid\" to \"left\"\n\n### How Do I Sort by a Column?\n\n#### Using the Property Inspector\n\nSelect the data grid and open the **Property Inspector**. Navigate to the\n**Columns** pane (1), select the column you want to modify (2), and\ncheck the **Sort by column** checkbox (3). You can then adjust the sort \noptions as you see fit.\n\n![](images/media_1236355926146_display.png)\n\n#### Using Script\n\nYou can sort by column setting the **dgProp[\"sort by column\"]** property of\nthe data grid to the name of the column you want to sort by.\n\n    set the dgProps[\"sort by column\"] of group \"DataGrid\" to \"Name\"\n \n![](images/media_1238000827781_display.png)\n\nSimilarly you can change other properties related to the sort by script too.\n\n![](images/media_1238000827781_display_0.png)\n\n![](images/media_1238000827781_display_1.png)\n\n\n### How Do I Resize Columns?\n\n#### Using the Property Inspector\n\n![](images/media_1236356044111_display.png)\n\nSelect the data grid and open the **Property Inspector**. Navigate to the\n**Columns** pane (1), select the column you want to modify (2), and set the\n**width** of the column using the **Width** text entry field (3).\n\n#### Using Script\n \nYou can set the size of a column by setting the **dgColumnWidth** property\nfor the column to an integer.\n\n    set the dgColumnWidth[\"Name\"] of group \"DataGrid\" to 150\n\n![](images/media_1238000855537_display.png)\n\n### How Do I Override the Default Behavior for Rendering Data to a Cell?\n\nBy default, a data grid table uses a single field object for each cell\nin a table and assigns the **text** property of that field to the cell's\ndata. This lesson will show you how to quickly create your own script\nthat determines how data is rendered in the default table cell. This can\nbe useful for rendering HTML and unicode text, trailing off text that is\ntoo wide for a column or for coloring particular cells.\n\n#### Begin With a Data Grid Table\n \n![](images/media_1239940153040_display.png)\n\n#### Create a Button\n\nThe **default column behavior** property can be set to a button. The\nscript of the button will be used to fill in each cell in the table.\n\nDrag a button onto the card and name it **My Default Column Behavior.**\n\n![](images/My_Default_Column_Behavior.png)\n\n#### Set the Script of the Button\n \n![](images/media_1239940350693_display.png)\n\nWhen creating your own **default column behavior** it is a good idea to\nstart with the script that the data grid itself uses as the default. You can copy\nthe data grid default script easily enough by selecting the button (1)\nand executing the following statement in the **Message Box** (2):\n\n>Careful of continuation character \" \\\\\"\n\n    set the script of selobj() to the script of button \"Default Column\" \\\n        of stack \"revDataGridLibrary\"\n\n#### Customize Behavior\n\n![](images/media_1239940253589_display.png)\n\nNow this behavior can be customized. Here is what the default behavior looks like.\n\n>**Important:** If you decide to write a default behaviour script from scratch make \n>sure to include the **dgDataControl** getProp handler. This is required in order for the \n>data grid to work properly.\n\n    getprop dgDataControl\n       -- Required by library so that it can locate the control.\n       return the long ID of me\n    end dgDataControl\n\n#### Set 'Default Column Behavior' Property\n \n![](images/media_1239945029745_display.png)\n\nNow you can set the **default column behavior** property of the data\ngrid. Select the button (1) and execute the following in the **Message Box**\n(2):\n>**Note:** Careful of continuation character \" \\\\\"\n\n    set the dgProps[\"default column behavior\"] of group \"DataGrid 1\" \\\n       to the long id of selobj()\n\nNow it is time to customize your script!\n\n#### Example: Truncate Tail\n \n![](images/media_1240836642399_display.png)\n\nThe following example will show you how to truncate the tail end of every\ncell whose content is too wide to fit. The data grid provides a helper\ncommand named **TruncateTail** that takes the **short id** of a field and a\nstring that signifies the text is being truncated. A call to\n**TruncateTail** has been added to the **FillInData** and **LayoutControl** handlers so\nthat cell contents are truncated when drawn or when a column is resized.\n\n>**Note:** **TruncateTail** works fairly well for most cases but can cause\n>visual lag if there are lots of cells being displayed that use\n>**TruncateTail**. You should test your data and table to make sure it\n>performs adequately for your needs.\n\n>**Quick Tip:** You can determine the name of the column that is being\n>rendered by checking the **dgColumn** property. You could use this\n>property if you only wanted to truncate the text in certain columns:\n\n    switch the dgColumn of me\n      case \"Col 1\"\n      case \"Col 2\"\n      TruncateTail the short id of me, \"...\"\n      break\n    end switch\n\n#### Refresh\n\nTo see the results, click the **Refresh Data Grid** button in the\nProperty Inspector (1). Notice how cell contents are no truncated as\nneeded (2).\n\n![](images/media_1239945061329_display.png)\n\n#### Example: Coloring Cells\n \n![](images/media_1240836750153_display.png)\n\nThis example will dim any cell that is empty. Since the\ndefault cell consists of a single field object this can be accomplished by setting the \nfield's **opaque** to **true**, setting the **backgroundcolor** and changing the **blendlevel**.\n\n#### Result\n\nDeleting some entries in the data and click on the **Refresh Data Grid** \nbutton to see the result\n\n![](images/media_1240836803830_display.png)\n\n### How Do I Determine if a User Clicks in the Table Header?\n \nThis lesson will show you how to determine if the user clicked in the\nheader of a Data Grid table by showing you how to use the\n**dgHeaderControl** and **dgHeader** properties of the target control that was\nclicked on.\n\n#### The Table Header\n \n![](images/media_1262013649551_display.png)\n\nA Data Grid table has a header where the column names are displayed (1).\nWhen a user clicks in the header with the mouse the **dgHeader** of the\ntarget returns the **long id** of the group control that contains all of the\nheader controls.\n\nWhen the user clicks on a column header (2) the **dgHeaderControl** of the\ntarget returns the **long id** of the group control that contains all of the\ncolumn header controls.\n\n####Example\n\n![](images/media_1262013897208_display.png)\n\nHere is some sample code that prints off the **dgHeaderControl** and\n**dgHeader** properties when the user clicks on a Data Grid. Place\nthis script in the Data Grid script.\n\n***Copy & Paste***\n\n    on mouseDown pBtnNum\n      put \"Column header control:\" && the dgHeaderControl of the target \\\n      & cr & cr & \"Header control:\" && the dgHeader of the target\n    end mouseDown\n\nAfter adding the script to the Data Grid the value of the\n**dgHeaderControl** and **dgHeader** properties are displayed in the **Message\nbox**. In this example both properties return the **long id** of a control (1)\nbecause the click was on a column header (2) (*State* in this case.)\n\n![](images/media_1262013913672_display.png)\n\nIn the following example only the **dgHeader** property returns the **long id** of a\ncontrol (1) because even though the click was in the table header it was not on a column\nheader (2).\n\n![](images/media_1262013925910_display.png)\n\n### How Do I Display a Contextual Menu When the User Clicks on a Column Header?\n \n####Overview\n\n![](images/media_1262014965604_display.png)\n\nThis lesson will show you how to display a contextual menu (1) when the\nuser clicks on a column header in a Data Grid table (2).\n\n####The Code\n\n![](images/media_1262015011787_display.png)\n\nHere is some LiveScript code that will display a contextual menu.\nThe code is located in the Data Grid's script.\n\nA contextual menu is displayed when during the **mouseDown** message when\nthe user clicks with the right mouse button (1).\n\nTo determine if the user clicked on a column header you can check\nwhether or not the **dgHeaderControl** property of the control that was\nclicked on (**the target**) is empty (2). If the property is not empty then\nyou know that the user clicked on a column header.\n\nOnce you know that the user clicked on a column header you can display\nthe contextual menu. In this example the name of the column that\nwas clicked on (3) is appended to \"Popup\" in order to get the name (*State Popup*) of\nthe popup button to display (4).\n\n***Copy & Paste***\n\n    on mouseDown pBtnNum\n      ## Let Data Grid process mouseDown\n      dgMouseDown pBtnNum\n      if pBtnNum is 3 then\n        if the dgHeaderControl of the target is not empty then\n          ## the user clicked on a column header\n          ## Get column name\n          put the dgColumn of the target into theColumn\n          ## Get name of contextual button to use\n          put theColumn && \"Popup\" into theContextualButtonName\n          ## Display contextual if exists\n          if there is a button theContextualButtonName then\n            popup button theContextualButtonName\n          end if\n        end if\n      end if\n    end mouseDown\n    \n\n####The Result\n\n![](images/media_1262015029410_display.png)\n\nNow when a ***right-click*** occurs on the State column the *State Popup* popup\nbutton is displayed as a contextual menu.\n\n### What if I Need to Work With htmlText or rtfText?\n \nBy default all table columns will have their **text** property assigned. If\nyou need to work with htmltext or rtftext then you need to provide your own\nbehavior for the table columns.\n\n#### Option 1: Set the dgProp[\"Default Column Behavior\"] Property\n \nThe simplest way to change the default behavior of table columns is to\nset the **dgProp[\"default column behavior\"]** property of the data grid. You\nset this property to a **button id** whose script contains the behavior you\nwould like the columns to have. Doing this overrides the default\nbehavior provided by a button on the **revDataGridLibrary** stack.\n\n    set the dgProp[\"default column behavior\"] of group \"DataGrid\" to the long id\\\n     of button \"My Custom Column Behavior\" of stack \"MyStack\"\n\nHere is an example of a **FillInData** command that takes a column value\nencoded as UTF-8 and sets the **unicodetext** of the column field.\n   \n![](images/media_1236355544113_display.png)\n\n>**Important:** If you decide to write your own default behaviour script make \nsure to include the **dgDataControl** getProp handler. This is required in order for the \ndata grid to work properly.\n\n    getprop dgDataControl\n       -- Required by library so that it can locate the control.\n       return the long ID of me\n    end dgDataControl\n\nTo see the default column script the data grid uses enter the following\nin the **Message box**:\n\n    edit script of button \"Default Column\" of stack \"revDataGridLibrary\"\n\n#### Option 2: Create a Custom Column Template\n \nAlternatively you can create your own custom column template for a\nparticular column. This allows you complete control over the look and\nfeel of the column. See section [How Do I Customize A Table's Columns?](#how-do-i-customize-a-table's-columns)\n\n### How Do I Display Line Numbers in a Table?\n \nThis lesson will show you how to dynamically display line numbers in\nyour data grid table.\n\n####The Table\n\n![](images/media_1236794497421_display.png)\n\nHere is the table to display line numbers in.\n\n####Add Line Number Column\n\n![](images/media_1237998926249_display.png)\n\nSelect the data grid and open its **Property Inspector**. Select the **Columns**\npane (1) and add a column using the \"+\" button (2). Rename the column\n**Line Number** (3).\n\n####Reorder and Create Column Template\n\n![](images/media_1237999008350_display.png)\n\nUse the up arrow (1) to move the **Line Number** column to the top of the\nlist.\n\nCreate a template for this column by clicking on the \"+\" button at the\nbottom of the **Property Inspector** (2).\n\n####Edit Line Number Group\n\n![](images/media_1237999096660_display.png)\n\nAfter creating the column template the card with the template group will\nopen. As you can see a group called **Line Number**, corresponding to the column's name, \nhas been created and within that group is a single field object.\n\nWe do not need to actually do anything to the template so simply **close** and **save** it when \nprompted.\n\n####Edit Column Behavior\n\nNow all that is left is to define the behavior for this column. Go back to\nthe **Columns** pane of the data grid's **Property Inspector** and click the \n**Column Behavior...** button (1) to open its script editor.\n\n![](images/media_1237998709031_display.png)\n\n\n####Edit Behavior Script\n\n![](images/media_1239247015389_display.png)\n\nThere isn't much to do here. In **FillInData** you just want to (1):\n\n    set the text of field 1 of me to the dgLine of me . \n\nThe **dgLine** is a property of a **row template** and this will display the line number \nfor the current line. In **LayoutControl** you just need to ensure the rect of the field \nfills the entire cell (2).\n\n####Refresh Data Grid\n\n![](images/media_1237998627031_display.png)\n\nIn the **Property Inspector** click the Refresh Data Grid button.\n\n####The Result\n\n![](images/media_1236795107846_display.png)\n\nNow the line numbers appear in the table.\n\n####But How Do I Set the dgText Then?\n\nYou may be wondering how you would set the **dgText** property of this data\ngrid since we have added a **Line Number** column as the first column in\nthe table.\n\nWhen you set the **dgText** of a data grid you can pass a parameter\nspecifying whether or not the first line of text contains the names of\nthe columns that the data should map to. Just pass in true and prepend\nthe column names to your data like this:\n\n    put \"State\" & tab & \"State Code\" into theColNames\n    set the dgText [true] of group \"Data Grid\" to theColNames & cr & theData\n\n### How Do I Customize Column Sorting?\n\nThis lesson will demonstrate how to customize sorting for columns by\nhandling the **SortDataGridColumn** message that is sent when the user\nclicks on a column.\n\n####A Data Grid Table\n\n![](images/media_1239310236534_display.png)\n\nThe goal is to customize when happens when this table is sorted by the\n**Line Number** column.\n\n####The Data Grid Group Script\n\nA Data Grid calls a built in handler **SortDataGridColumn** whenever the **dgProps\n[\"sort by column\"]** property is set. This includes when the user clicks on a column header\nto sort that column. By placing a modified version of the **SortDataGridColumn** in the \ndata grid's script this message can be captured and the behavior modified.\n\nPlace the following in the script for the data grid.\n\n***Copy & Paste***\n\n    on SortDataGridColumn pColumn\n      switch pColumn\n      case \"Line Number\"\n         ## ReverseSort is a helper provided by the Data Grid.\n         ## It merely reverses the current sort.\n         ReverseSort pColumn ## pass in column so header is hilited\n         break\n      case \"State Code\"\n         ## Just provided as an example of how to prevent the user\n         ## sorting on a column. In this case the \"State Code\" column.\n         ## We accomplish this by NOT passing the message.\n         break\n      default\n         ## For all other cases, pass the message  so that the data grid\n         ## will be sorted based on column settings.\n         pass sortDataGridColumn\n      end switch\n    end SortDataGridColumn\n\nThe way the custom **SortDataGridColumn** handler works is simple. Passing the message will\ncause the data grid to use its default column sorting routines. (1) Set this as \nthe **Default** case.\n\nNot passing the message prevents the data grid from performing it own sorting\n(2) and (3).\n\nIn this example, clicking on the **Line Number** column will just reverse whatever \ncurrent sort exists. This is done by calling **ReverseSort**, a built-in data grid helper \nthat reverses whatever the current sort order is. (2)\n\n![](images/media_1239647097509_display.png)\n\n####The Result\n\nClicking on the **Line Number** column (1) now reverses the sort.\n\n![](images/media_1239310720274_display.png)\n\n####Custom Sort Example\n\nHere is another example of a custom sort. Try it out and see if you can determine \nwhat it does.\n\n    ## Place in Data Grid script.\n    ## This example shows how to perform a custom sort of data. This is similar\n    ## to the internal routine that the data grid uses.\n    on SortDataGridColumn pColumn\n      ## Begin by building a list of lines with two items (tab delimited)\n      ## The first item is the index of each record stored in the data grid.\n      ## The second item is the key you are going to sort on.\n      put the dgData of me into theDataA\n      repeat for each key theIndex in theDataA\n        put theIndex & tab & theDataA[theIndex][pColumn] & cr after theData\n      end repeat\n      delete the last char of theData\n      set the itemdelimiter to tab\n      ## perform sort. Lookup the current sort direction for this column\n      ## and use that as sort direction\n      put the dgColumnSortDirection[pColumn] of me into theSortDirection\n      if theSortDirection is \"ascending\" then\n        sort lines of theData ascending by item 2 to -1 of each\t#\n      else\n        sort lines of theData descending by item 2 to -1 of each\n      end if\n      ## Rebuild the order of indexes in the data grid\n      put empty into theIndexSequencing\n      repeat for each line theLine in theData\n        put item 1 of theLine & comma after theIndexSequencing\n      end repeat\n      delete the last char of theIndexSequencing\n      ## Set the dgIndexes property to new order\n      set the dgIndexes of me to theIndexSequencing\n      ## Tell data grid to hilite column\n      HiliteAndStoreSortByColumn pColumn\n    end SortDataGridColumn\n\n### How Do I Disable Column Sorting?\n\nThis lesson will show you how to disable column sorting in a Data Grid\ntable.\n\n####Sort By No Column\n\nNotice in our example, the **State** column header is hilighted and there is a sorting \narrow indicating an ascending sort.\n\n![](images/media_1264520254003_display.png)\n\nTo begin, set the **sort by column** property to empty.\nThis will remove any column sorting that might be active.\n\n    set the dgProp[\"sort by column\"] of group \"DataGrid 1\" to empty\n\nJust copy and paste the above into the **Message box** to execute it.\n\n![](images/media_1264520291468_display.png)\n\nYour table headers should now appear the same, with no highlights or\nsorting arrow.\n\n####Edit Data Grid Script\n\nEdit the Data Grid group script by ***right clicking*** on the Data Grid and\nselecting **Edit Script.**\n\n![](images/media_1264520303976_display.png)\n\n####Add SortDataGridColumn Handler\n\n![](images/media_1264520327900_display.png)\n\nWhen the user clicks on a table column header the **SortDataGridColumn**\nmessage is sent to the Data Grid. Intercepting this message and not\npassing it effectively disables sorting. For more information\nabout how **SortDataGridColumn** works see [How Do I Customize Column Sorting?](#how-do-i-customize-column-sorting).\n\nAdd the following code to your Data Grid group script and compile.\n\n***Copy & Paste***\n\n    on SortDataGridColumn pColumn\n    end SortDataGridColumn\n\nNow when you click on the table header the data will not be sorted.\n\n![](images/media_1264520358754_display.png)\n\n>**Note:** Once you add the **SortDataGridColumn** handler to a Data Grid setting\n>the **dgProp[\"sort by column\"]** property will no longer do anything. If you\n>need to set the **sort by column** property later on you would need to\n>remove the **SortDataGridColumn** handler from the script, or at least **pass**\n>the message.\n\n### How Do I Perform an Action After the User Sorts a Data Grid?\n \nThis lesson will show you how to modify a data grid script so that you\ncan perform an action whenever a data grid is sorted.\n\n####Add SortDataGridColumn To Data Grid Group Script\n\nYou can customize what happens when a data grid is sort by adding a\n**SortDataGridColumn** handler to your data grid's script. For more\ninformation about howSortDataGridColum works please see the lesson\n[How Do I Customize Column Sorting?](#how-do-i-customize-column-sorting).\n\nIn order to perform an action AFTER the sort has been applied you simply\nneed to call the handler the Data Grid behavior uses to sort but NOT\npass the **SortDataGridColumn** handler. Doing so sorts the data just like\nthe Data Grid would and then perform any additional actions you would\nlike.\n\n    ## Place in Data Grid script. \n      on SortDataGridColumn pColumn\n    ## Call Data Grid sort routine by hand\n      SortByColumn pColumn\n       ## Now data has been sorted, do whatever you need to do.\n        -- my code\n        .....\n        .....\n        \n       ## DON'T PASS the \"SortDataGridColumn\" message!\n    end SortDataGridColumn\n\n### How Do I Align Decimals in a Column?\n\nThis lesson will show you how to create a custom column template that\nprovides decimal alignment. You can \n[download the stack]([http://www.bluemangolearning.com/download/revolution/tools/datagrid_decimal_align.zip]) \nused to create this lesson.\n\n####Create a Data Grid Table\n\n![](images/media_1240457118727_display.png)\n\n####Add Some Data\n\n![](images/media_1240457166121_display.png)\n\nHere a couple of rows of decimal numbers have been added to experiment with.\n\n####Create Column Template\n\nSelect the **Columns** pane (1) in the **Property Inspector** and click the\n**Add custom column behavior** button (2). This will create a custom\ncolumn template and behavior script.\n\n![](images/media_1240457183522_display.png)\n\nNotice how the **Column Behavior...** button has become enabled.\n\n![](images/media_1240457183522_display_0.png)\n\n####Edit Column Template\n\nWhen you create a custom template for a column a new group, named after\nthe column, is added to the data grid's **row template**.\n\n![](images/media_1240457365695_display.png)\n\nHere you see the **Project Browser** with the template for the Data Grid expanded\nshowing the group for this column (*Col 1*) with a field *\\_ColumnData_* to hold the \ncolumn's data.\n\n####Edit Column Template Group\n\nDouble-click on the column group in the **Project Browser** (1). This will select it on the \ntemplate card (2) and then click the **Edit Group** button (3) to edit the contents of the \ncolumn group.\n\n![](images/media_1240457393171_display.png)\n\nBe sure to double-click on the **group** icon and not the group's name. Double-clicking on \nthe object's name will simply allow you to edit the name, which is not what is wanted.\n\n####Create 3 Fields\n\nA column that aligns decimals in the center of the column, and is\neditable if the user double-clicks on the cell, is achieved by creating\nthree fields.\n\n![](images/media_1240457498750_display.png)\n\nSince the column template group already had a field named\n*\\_ColumnData_* double-click this name (in the **Project Browser**) and rename \nit to *Leftvalue* (1). Open the **Property Inspector** for this field and set its \n**textalign** to **right**. **Duplicate** the *Leftvalue* field and name it *Rightvalue* (2). \nSet the its **textalign** to **right** too. Finally **Duplicate** this\nfield and **rename** the duplicate to **ForEditing** (3). The text of\nthis field should be empty. Make sure that the **ForEditing** field has a\nhigher layer than *Leftvalue* or *Rightvalue*.\n\nDon't worry too much about positioning as the fields will be resized and\nrepositioned when drawn in the data grid.\n\nClick on the card background of the editing template and then the **Stop Editing** button \nand **close** and **save** the window.\n\n####Edit Column Behavior\n\n![](images/media_1240457537950_display.png)\n\nNow that the objects we need to display the column data have been created \nits time to tell the column what to do when it is drawn. Return to the\n**Property Inspector** for the data grid and from the **Columns** pane (1) \nclick the **Column Behavior   ** button (2). This will open the behavior \nscript for the column.\n\n####Update FillInData\n\n![](images/media_1240457590402_display.png)\n\nThe decimal number is going to be displayed by assigning the left side\nof the decimal to the *Leftvalue* field and the right side of the\ndecimal to the *Rightvalue* field.\n\n    set the itemdelimiter to \".\"   \n    set the text of field \"Leftvalue\" of me to max(0, item 1 of pData)&\".\"\n    set the text of field \"Rightvalue\" of me to max(0, item 2 of pData)\n\n####Update LayoutControl\n\n![](images/media_1240457650342_display.png)\n\nThe left and right fields are now resized so that each takes up half of the available\nwidth to align the decimal in the center of the cell(1). Finally we resize the \n**ForEditing** field to take up the entire cell width(2). This is the field that the user \ncan double-click on to edit the cell contents.\n\n    put the rect of field \"Leftvalue\" of me into theRect   \n    put item 1 of pControlRect into item 1 of theRect\n    put item 1 of pControlRect + \\\n      round((item 3 of pcontrolRect - item 1 of pControlRect) / 2) \\\n      into item 3 of theRect\n    set the rect of field \"Leftvalue\" of me to theRect\n    \n    put the rect of field \"Rightvalue\" of me into theRect2\n    put item 3 of theRect into item 1 of theRect2\n    put item 3 of pControlRect into item 3 of theRect2\n    set the rect of field \"Rightvalue\" of me to theRect2\n    \n    set the rect of field \"ForEditing\" of me to pControlRect\n\n####Update EditValue\n\n**EditValue** is the handler that is called by the data grid to edit\na cell value. Usually this is because the user double-clicked on the\ncell or tabbed into the cell.\n\n![](images/media_1240457831245_display.png)\n\n**EditFieldText** displays, by default, the **htmltext** of the field you are editing. This \ndefault can be overriden by setting the **dgTemplateFieldEditor[text\n|htmltext|rtftext|unicodetext|utf8text]** of the data grid. Here\n the dgTemplateFieldEditor[\"text\"] of the data grid is set to **text**(1). Of course the \n*ForEditing* field has no text in it by default and the \n\"left\" and \"right\" field values need to be combined as documented in the handler.\n\nAlso, if the user double-clicks on this cell they actually double-click \non the **ForEditing** field (as it has the higher layer) and it is thus \n***the target*** (2)\n\n    command EditValue\n      ## Assign text the the editor will have when it opens\n      ## We combine the left and right field values. \n      Set the dgTemplateFieldEditor[\"text\"] of the dgControl of me to \\\n         the text of field \"Leftvalue\" of me & the text of field \"Rightvalue\" of me\n      ## The \"ForEditing\" field is what the user actually clicked on. \n      ## This is the \"target\"\n      EditFieldText the long ID of field 1 of the target, the \\\n          dgIndex of me, the dgColumn of me\n    end EditValue\n\n\n####Refresh Data Grid\n\n![](images/media_1240457946816_display.png)\n\nNow that the necessary changes have been made \nrefresh the data grid so that it redraws with the new template controls. \nFrom the **Basic Properties** pane of the inspector palette\nclick the **Refresh Data Grid** button. Alternatively you can send\n**ResetList** to the data grid.\n\n    send \"resetList\" to group \"datagrid 1\"\n\n####Test\n\n![](images/media_1240458424026_display.png)\n\nThe decimals all appear in the center of the cell.\nDouble-clicking brings up an editing field as shown here.\nFinally the decimal remains in the center of the cell if the column is resized.\n\n### How Can I Colorize Individual Lines in a Table?\n \nThis lesson will show you how to change the color of individual lines in\na Data Grid table. Before you begin this lesson you will need to read\nthe lesson [How Do I Override the Default Behavior for Rendering Data\nto a Cell?](#how-do-i-override-the-default-behavior-for-rendering-data-to-a-cell)\n\n####Attached Files\n\n[Color_Individual_Line_in_Table.rev](http://lessons.livecode.com/s/lessons/files/101?lesson_id=7332)\n\n#### Coloring a Single Line\n \n![](images/media_1249058487860_display.png)\n\nIn this example we are going to modify the basic example created in the lesson mentioned \nabove so that it colors a row red if the row's **line has error property** is **true**.\n\n![](images/media_1249058497115_display.png)\n\nBy clicking on the **Toggle Line 3 Color** button the color of line 3\nturns red. The code in the button extracts the data for line 3 from the\ndata grid, toggles the **line has error** property and reassigns the new\ndata to line 3.\n\n    on mouseUp pMouseBtnNo\n      put the dgDataOfLine[3] of group \"DataGrid 1\" into theDataA\n      put not theDataA[\"line has error\"] into theDataA[\"line has error\"]\n      set the dgDataOfLine[3] of group \"DataGrid 1\" to theDataA\n    end mouseUp\n\nNow let's look at what the default custom column behavior looks like for\nthis data grid.\n\n####The Default Custom Column Behavior\n\n![](images/media_1249059040297_display.png)\n\nHere is the relevant code from the default custom column behavior for this\ndata grid. The key addition to the code is the **SetForeGroundColor**\nhandler. This handler checks the value of the  **line has error** column\nfor this row (using **GetDataOfIndex**) and if it is true then changes the\ncell to red. Since each cell in this row has the same value for **line\nhas error** the entire row appears red.\n\n    on FillInData pData\n      -- This message is sent when the Data Grid needs to populate\n      -- this template with the column data. pData is the value to be displayed.\n      set the text of me to pData\n      SetForeGroundColor\n    end FillInData\n    \n    on LayoutControl pControlRect\n      -- A default column is just a field.\n    end LayoutControl\n    \n    setprop dgHilite pBoolean\n      -- This custom property is set when the highlight of your column template has\n      -- changed. You only add script here if you want to customize the highlight.\n      if pBoolean then\n        set the foregroundcolor of me to the dgProp[\"hilited text color\"] of the dgControl of me\n      else\n        SetForeGroundColor\n      end if\n    end dgHilite\n    \n    private command SetForeGroundColor\n      if GetDataOfIndex(the dgIndex of me, \"line has error\") then\n        set the textcolor of me to red\n      else\n        set the textcolor of me to black\n      end if\n    end SetForeGroundColor\n\n## Working With Data Grid Forms\n\n### How Do I Create a Form With Variable Line Heights?\n\nThis lesson will show you how to create a data grid form with variable\nheight lines by modifying the default data grid **Row Template** and\n**Row Behavior**.\n\n#### Turn Off \"Empty row height\"\n \n![](images/media_1239376378384_display.png)\n\nTo begin, turn off **Empty row height** for your data grid form in\nthe **Property Inspector**.\n\n####Edit Row Template\n\n![](images/media_1239375695284_display.png)\n\nOpen the card that has the row template group by clicking the **Row\nTemplate** button.\n\n####Turn Off dontWrap Property\n\n![](images/media_1239375899522_display.png)\n\nThe default row template for a data grid has a single field that\ndisplays data. With **Select Grouped** turned on (1) select the field\n(2). Using the **Property Inspector** turn off **dontWrap** (3). You can now\nclose the stack.\n\n####Edit Row Behavior\n\n![](images/media_1239375899522_display_x.png)\n\nReturn to the Property Inspector for your data grid. Edit the **Row\nBehavior** by clicking on **Edit Script** button.\n\n####Script Field to Resize to Fit Height\n\nOnly a few modifications are needed to make to the default\n**LayoutControl** handler resize the field to fit the height.\n\n![](images/media_1239376187810_display.png)\n\nThe default **LayoutControl** handler resizes the field to fill the\navailable width (1). After that is done you then need to resize the\nfield to fill the **formattedHeight** (2). Finally, adjust the rect\nof the Background graphic to take into account the new field height (3).\n\n\n     on LayoutControl pControlRect\n      local theFieldRect\n       ## Expand the field to fill the available width\n       put the rect of field \"Label\" of me into theFieldRect\n       put item 3 of pControlRect - 5 into item 3 of theFieldRect\n       set the rect of field \"Label\" of me to theFieldRect\n    \n       ## Now resize the field to fit its content\n       put item 2 of theFieldRect \\\n            + the formattedheight of field \"Label\" of me - \\\n            the bottommargin  of field \"Label\" of me \\\n            into item 4 of theFieldRect\n       set the rect of field \"Label\" of me to theFieldRect\n    \n       ## Now update the bounding rect to match total the height\n       ## you want this row to have (note there is an additional 4\n       ## pixels added to the bottom\n       put item 4 of theFieldRect + 4 into item 4 of pControlRect\n    \n      set the rect of graphic \"Background\" of me to pControlRect\n    end LayoutControl\n\n\n####Refresh Data Grid Contents\n\nYou can now refresh the data grid contents to see the new behavior.\n\n![](images/media_1239375593026_display.png)\n\nNotice how each line is resized to fit all of the text.\n\n### How Do I Sort Records by a Specific Key's Values?\n \nYou can sort the rows of a data grid form using the **SortDataByKey** command. \n\nLet's look at an example.\n\n####Example\n\n![](images/media_1242529496945_display.png)\n\nThis card has a data grid and an option menu. The option menu contains\nthree values that you can sort by: *First Name*, *Last Name* and\n*Title*.\n\n####Option Menu Code\n\nThe code to perform the sort is pretty straight forward.\n\n![](images/media_1242529389673_display.png)\n\n1. Determine which array key of the data grid form to sort by. This will be one the \nkeys created when the data was assigned to the **dgData**. If you used the **dgText** \nproperty then the key will be \"Label 1\" or \"Label 2\", etc.\n2. Determine the sort type, direction and whether or not the sort is case sensitive.\n3. Call the **SortDataByKey** command.\n\n***Copy & Paste***\n\n     on menuPick pItemName\n      switch pItemName\n        case \"First Name\"\n          put  \"FirstName\" into theKey\n          break\n        case \"Last Name\"\n          put  \"LastName\" into theKey\n          break\n        case \"Title\"\n          put  \"Title\" into theKey\n          break\n      end switch\n      \n      put \"international\" into theSortType\n      put \"ascending\" into theDirection\n      put \"false\" into isCaseSensitive\n      dispatch \"SortDataByKey\" to group \"Datagrid 1\" with \\\n           theKey, theSortType, theDirection, isCaseSensitive\n    end menuPick\n\n\n####The Result\n\n![](images/media_1242529778033_display.png)\n\nHere is what the sort looks like after selecting *First Name* and after selecting \n*Last Name*.\n\n### How Do I Create Rows That Can Expand/Contract?\n \nThis lesson will show you how to make a Data Grid form with rows that\nexpand and contract when clicking on an arrow.\n\n#### Attached Files\n\n[ExpandingRow.rev](http://lessons.livecode.com/s/lessons/files/45?lesson_id=9850)\n\n####Expanding and Contracting Rows\n\n![](images/media_1265663660291_display.png)\n\nThis is what the example stack looks like. By default all of the rows\nare contracted and only show names.\n\n![](images/media_1265663682253_display.png)\n\nClicking on the arrow next to a name expands the row to show the\ndescription of the person.\n\n####Setting the Data Grid Properties\n\nTo create a Data Grid form with rows that expand/contact you need to\nturn off **fixed control height** in the data grid's **Property Inspector**.\n\n![](images/media_1265663694402_display.png)\n\n>**Note**: To turn off the property using script you set the\n>**dgProp[\"fixed row height\"]** property to **false**.\n\n####Updating the Row Behavior Script\n\nIn order to get expanding rows working a couple of\nthings need to be taken into account in the **Row Behavior Script.**\n\n![](images/media_1265663721696_display.png)\n\nThe **FillInData** handler should show or hide controls as\nnecessary. The example stack stores the expanded state of each row in\nthe **expanded** key.\n\n![](images/media_1265663726190_display.png)\n\nIn the **LayoutControl** handler the position of\nthe controls and background graphic based on whether or not the row is\nexpanded or contracted are adjusted . Since the **fixed row height** property is set to\n**false** the Data Grid computes the total height of the data based on the\nheight of each row after calling **LayoutControl**.\n\n![](images/media_1265663745407_display.png)\n\nWhen the user clicks on the arrow the example stack updates the\n**expanded** key in the row's data and then redraws the row. Using \n**SetDataOfIndex** in conjunction with **RefreshIndex** is the most efficient\nway to do this.\n\n**pDataArray[\"expanded\"]** is a boolean which determines the state of the row.\n\n    the short name of the target is \"ArrowContracted\"\n\nis an expression that evaluates to **true** or **false** depending on the target. \nIf the *ArrowContracted* graphic is visible \nand thus clicked on, the expression evaluates to **true** which in turn sets the row to \nbe in its **expanded** state as per the **FillnData** handler.\n\nThus this little snippet effectively toggles the state of the row.\n\n### How Can I Speed Up Drawing When \"Fixed Row Height\" Is False?\n \nWhen you set the **dgProp[\"fixed row height\"]** property of a Data Grid to\n**false** the Data Grid must draw all records in order to determine the\ntotal height. That means that **FillInData** and **LayoutControl** are called\nfor every record in the Data Grid. This can be time intensive depending\non the amount of data.\n\nThis lesson will show you a technique that can speed up the calculation\nof the total height of the data in situations where the rows can only\nhave heights of ***known*** values.\n\n#### CalculateFormattedHeight\n \nWhen the Data Grid loops through the data to calculate the height the\nmessage **CalculateFormattedHeight** will be sent to the **Row Template**.\nIf your Row Behavior handles this message then the Data Grid will use\nthe integer value that you return rather than calling **FillInData** and\n**LayoutControl**.\n\nHere is an example that uses **CalculateFormattedHeight** to return the\nheight of a row based on whether or not the row is expanded. Just place\nthe **CalculateFormattedHeight** handler in your Row Behavior script.\n\n    on CalculateFormattedHeight pDataArray\n      if pDataArray[\"expanded\"] then\n        return 74\n      else\n        return 20\n      end if\n    end CalculateFormattedHeight\n    \n    on FillInData pDataArray\n    ...\n    end FillInData\n\n## Using the Built-in Field Editor\n\n### How Do I Open a Table Cell for Editing?\n\nBy default a table cell can be edited if the user double-clicks on the\ncell. This tutorial explains what goes on in the default column behavior\nso you can customize behavior if you would like.\n\n>**Note:** The default column behavior is stored in button \"Default Column\"\n>of stack \"**revDataGridLibrary**\". \n>See [How Do I Override the Default Behavior for Rendering Data to a Cell?](#how-do-i-override-the-default-behavior-for-rendering-data-to-a-cell)\n\n#### What You Need to Know\n \nIn order to edit the columns of a data grid table you need to know about\nthe following:\n\n1. The **EditFieldText** command\n2. The **EditValue** message\n3. The **EditKey** and **EditKeyOfIndex** commands\n4. The **CloseFieldEditor** command which can be sent as a result of calling **EditFieldText**.\n\nRead up on the entries for **EditFieldText**, **EditValue**,\n**EditCell**/**EditCellOfIndex** in the API section of the Dictionary.\n\n####EditFieldText\n\nThe **EditFieldText** command will create an editor for a field that you\nspecify. The default column behavior calls this command with three\nparameters so that data is automatically saved after the user finishes\nediting.\n\n####EditValue\n\n**EditValue** is the message that is sent to a row when a request to edit a\nfield's contents has been made. The default column behavior calls\n**EditFieldText** when this message is received.\n\n####EditCell and EditCellOfIndex\n\nThere are two commands that will open a cell for editing. They are\n**EditCell** and **EditCellOfIndex**. Each takes the name of the column\nyou want to edit and the line or index you want to edit. Here are two\nexample scripts showing how you could use these commands in the script\nof a data grid.\n\n    put \"FirstName\" into theColumn\n    put the dgHilitedLine of me into theLineNo\n    EditCell theColumn, theLineNo\n    \n    put \"FirstName\" into theColumn\n    put the dgHilitedIndex of me into theIndex\n    EditCellOfIndex theColumn, theIndex\n\nEither of the above calls will trigger the **EditValue** message.\n    \n    on EditValue\n      ## Example of opening a field editor for the targeted column.\n      ## Since I'm passing in parameters 2 and 3 any changes will \n      ## automatically be saved to the dgData.\n      EditFieldText the long id of me, the dgIndex of me, the dgColumn of me\n    end EditValue\n \n\n#### CloseFieldEditor\n\nIf the user changes any content in the field editor this message will be\nsent to the field targeted in the first parameter sent to **EditFieldText**.\nRead the API docs for **EditFieldText** which discusses this message.\n\nExample of storing value in **dgData** in **CloseFieldEditor**. This would be\nrequired if you only passed in one parameter to **EditFieldText**.\n\n    on CloseFieldEditor pFieldEditor\n      put the dgIndex of me into theIndex\n      put the dgDataOfIndex[theIndex] of the dgControl of me into theDataA\n      put the text of pFieldEditor into theDataA[the dgColumn of me]\n      set the dgDataOfIndex[theIndex] of the dgControl of me to theDataA\n    end CloseFieldEditor\n\n### How Can the User Edit Field Content in a Data Grid Form?\n\nThe data grid commands for creating an editor for a particular field in\na row template. This lesson will show you how to use them.\n\n####What You Need to Know\n\nIn order to edit field contents in a data grid form you need to know\nabout the following:\n\n1. The **EditFieldText** command\n2. The **EditValue** message\n3. The **EditKey** and **EditKeyOfIndex** commands\n\nRead up on the entries for **EditFieldText**, **EditValue** and\n**EditKey**/**EditKeyOfIndex** in the API documentation.\n\n####EditFieldText\n\nThe **EditFieldText** command will create an editor for a field that you\nspecify. You can use this command to create a field editor for a field in\nyour row template.\n\n####EditValue\n\n**EditValue** is the message that is sent to a row when a request to edit a\nfields contents has been made. You can call **EditFieldText** from within\na handler for this message to begin an editing operation.\n\n####EditKey and EditKeyOfIndex\n\n**EditKey** and **EditKeyOfIndex** will trigger the **EditValue** message in a row.\nEach takes the name of the key you want to edit and the line or index\nyou want to edit. Here are two example scripts showing how you could use\nthese commands in the script of a data grid.\n\nPlaced in script of row template behavior\n\n    on mouseDown pBtnNum\n      if pBtnNum is 1 then\n      ## Did the user click on the FirstName field?\n        if the short name of the target is \"FirstName\" then\n          put \"FirstName\" into theKey\n          put the dgHilitedLine of me into theLineNo\n          EditKey theKey, theLineNo\n        end if\n      end if\n    end mouseDown\n    \n    on mouseDown pBtnNum\n      if pBtnNum is 1 then\n      ## Did the user click on the FirstName field?\n        if the short name of the target is \"FirstName\" then\n          put \"FirstName\" into theKey\n          put the dgHilitedIndex of me into theIndex\n          EditKeyOfIndex theKey, theIndex\n        end if\n      end if\n    end mouseDown\n\nEither of the above calls will trigger the **EditValue** message. The\n**EditValue** can be thought of as a central message where you can open a\nfield for editing text. A handler for this message is where you will call\nEditFieldText.\n\n    on EditValue pKey\n      ## Example of opening a field editor for the field displaying \n      ## the value for pKey\n      ## Since we are passing in parameters 2 and 3 any changes \n      ## will automatically be saved to the dgData.\n      ## 'me' is the Data Grid in this case.\n      EditFieldText the long id of field pKey of me, the \\\n         dgHilitedIndex of me, pKey\n    end EditValue\n\n#### CloseFieldEditor\n\nIf the user changes any content in the field editor this message will be\nsent to the field targeted in the first parameter sent to **EditFieldText**.\nRead the API docs for **EditFieldText** which discusses this message.\n\nHere is an example of storing the new value in the **dgData** of the Data\nGrid in the **CloseFieldEditor** handler. Manually storing the value would\nbe required if you only passed in one parameter to **EditFieldText**.\n\nThis example script would be in the **Row Behavior** script as it uses the\n**dgIndex of me** property.\n\n    on CloseFieldEditor pFieldEditor\n      ## 'me' is the row control\n      put the dgIndex of me into theIndex\n      put the dgDataOfIndex[theIndex] of the dgControl of me into theDataA\n      put the text of pFieldEditor into theDataA[the dgColumn] of me\n      set the dgDataOfIndex[theIndex] of the dgControl of me to theDataA\n    end CloseFieldEditor\n\n### How Can I Edit the Text as UTF-8, UTF-16 or HTML?\n\nThe default Data Grid behavior when editing cell contents is to use the\n**text** property of the cell as the default value to be edited. This\nlesson will show you how to provide a specific value for the Data Grid\nto use as the value to edit.\n\nThe technique described requires that you create a custom column\nbehavior as outlined in the lesson [How Do I Override the Default Behavior For Rendering Data to a Cell ](#how-do-i-override-the-default-behavior-for-rendering-data-to-a-cell).\n\n####The Default Behavior\n\nAssume you have a column in your table that displays text with some\nstyling. In this example the last name in column 2 for **some** entries is italic.\n\n![](images/media_1266461595205_display.png)\n\nWe can accomplish this by using the formatting information contained in the data.\n\n![](images/media_1266461595205_display_0.png)\n\nHowever, when you edit the content of the cell the formatting is lost.\nThis is because the Data Grid edits the **text** property of the field by\ndefault.\n\n![](images/media_1266461620275_display.png)\n\n\n####Changing the Default Value For the Editor\n\nYou can change the default value of that the field editor uses by\nsetting a value of the **dgTemplateFieldEditor** property of the Data Grid.\nYou set the property before calling **EditFieldText**.\n\nFor example, if you wanted to display the **italic** text for editing you\ncould set the dgTemplateFieldEditor[\"htmltext\"] property to the htmltext\nof the column being edited:\n\n    set the dgTemplateFieldEditor[\"htmltext\"] of the dgControl of me to the htmltext of me\n\n![](images/media_1266461478465_display.png)\n\nOther properties you can set include **rtftext**, **text**, **unicodetext**\nand **utf8text**.\n\n#### The Result\n \n![](images/media_1266461633668_display.png)\n\nHere is the result of using the example code above in the custom column\nbehavior. Notice how the text being edited is bold.\n\n### How Can I Select the Text in the Edit Field When It Opens?\n \nThe default Data Grid behavior when editing cell contents is to put the\ncursor at the end of the field. This lesson will show how to tell\nthe Data Grid that all of the cell text should be selected.\n\nThe technique described requires a custom column\nbehavior as outlined in the lesson [How Do I Override the Default Behavior For Rendering Data to a Cell ](#how-do-i-override-the-default-behavior-for-rendering-data-to-a-cell).\n\n#### The Default Behavior#### \n \n![](images/media_1266460565476_display.png)\n\nBy default the Data Grid will place the insertion point at the end of the text of a\n cell when you start editing a value.\n\n#### Selecting The Text#### \n \n![](images/media_1266460771838_display.png)\n\nYou can tell the Data Grid to select all of the text by setting a\nspecial custom property called **dgTemplateFieldEditor**. If you set the\n**dgTemplateFieldEditor[\"select text\"]** of the Data Grid to **true** then the\ndata Grid will select the cell text.\n\n#### An Example Script#### \n\n    ## Select all text before opening\n    set the dgTemplateFieldEditor[\"select text\"] of the dgControl of me to true\n\nAdd this line of text to the **EditValue** handler in a custom\ncolumn behavior. Just place the code right before the call to\n**EditFieldText**.\n\n![](images/media_1266460876219_display.png)\n\n### How Do I Save Changes the User Makes in an Editor Field to an External Data Source?\n\n#### When Calling EditFieldText With 3 Parameters (Simpler)\n\nWhen calling **EditFieldText** with all three parameters (which is what a\ndata grid column does by default) the data grid will automatically save\nthe text that the user enters in the **dgData** array. That means that all\nyou need to do is save the text of the editor field to your external\ndata source in the **CloseFieldEditor** handler. Note that if you save\nanything other than the text of **pFieldEditor** then your data source will\nnot match the **dgData** value.\n\nHere is an example script that goes in the Data Grid group script. \n\n    ## An example that saves\n    on CloseFieldEditor pFieldEditor\n      put the dgColumn of the target into theColumnBeingEdited\n      put the text of pFieldEditor into theNewText\n      ## Save data to database using command I defined\n      put \"Person\" into theTable\n      ## Get the unique id of the row in the database we want to edit\n      put GetDataOfIndex(the dgIndex of the target, \"id\") into theRowID\n      SaveDataToDatabase theTable, theRowID, theColumnBeingEdited, theNewText\n    end CloseFieldEditor\n    \n\n#### When Calling EditFieldText With 1 Parameter (More Flexible)\n\nIf you are working with data grid forms or decide to override the\ndefault behavior for data grid columns then you will make the call to\n**EditFieldText** yourself. For complete control over what gets saved\nyou only pass in 1 parameter to **EditFieldText**. By passing in 1\nparameter you are responsible for saving any changes to **dgData**.\n\nAssume you made the following call in a data grid form:\n\n    EditFieldText the long id of field \"Name\" of me\n    \nA **CloseFieldEditor** message would still be sent when the user changes the contents\nof the field but would need to contain code for saving the changes to\nthe **dgData** array.\n\nHere is an example script that goes in the Data Grid group script.\n\n    ## CloseFieldEditor placed in data grid script\n    on CloseFieldEditor pFieldEditor\n      put the dgColumn of the target into theColumnBeingEdited\n      ## Store UTF8 text\n      put unidecode(the unicodetext of pFieldEditor, \"UTF8\") into theNewText\n      ## Save data to database using command I defined\n      put \"Person\" into theTable\n      ## Get the unique id of the row in the database we want to edit\n      put GetDataOfIndex(the dgIndex of the target, \"id\") into theRowID\n      SaveDataToDatabase theTable, theRowID, theColumnBeingEdited, theNewText\n      ## Update dgData.\n      ## Setting dgDataOfIndex will refresh the data grid display as well as update dgData\n      put the dgDataOfIndex[ the dgIndex of the target] of me into theDataA\n      put theNewText into theDataA[theColumnBeingEdited]\n      set the dgDataOfIndex[the dgIndex of the target] of me to theDataA\n    end CloseFieldEditor\n\n### How Can I Customize the Field Editor Behavior?\n\nBy default the Data Grid field editor allows users to enter data and\nsave it back to the Data Grid. If you need data entry to behave\ndifferently you can assign your own behavior script to the field editor\nbefore it opens. This lesson will show you how.\n\n####Create Your Behavior Script\n\n![](images/media_1251992093862_display.png)\n\n1. Create a button (1) to hold the behavior script you want to use with the Data Grid \nfield editor. Here it is placed on the same card as the data grid.\n2. Set the script of the button (2) to the script of button \"Field Editor\" of stack \n\"revDataGridLibrary\". This is the behavior script that Data Grid uses by default and \nis a good place to start when customizing the behavior.\n\n####Customize Your Script\n\nOpen the button's script...\n\n![](images/media_1251992150655_display.png)\n\nMake any customizations you need to make.\n\n####Assign Your Custom Behavior to Field Editor\n\nWhenever the Data Grid displays the field editor (e.g. the user\ndouble-clicks on a cell in a table) a **preOpenFieldEditor** message is\nsent to the Data Grid. The first parameter is a reference to the field\neditor control. This is where a behavior script can be assigned to the\nfield.\n\n![](images/media_1251992186932_display.png)\n\n## Building Standalones With the Data Grid\n \n### What Do I Need to Do to Deploy a Standalone With a Data Grid?\n \nA data grid relies on the stack **revDataGridLibrary** in order to function\nproperly. This lesson will describe how to include this stack in your\nstandalone applications.\n\n####How The Standalone Builder Adds The Necessary Files\nWhen you add a data grid to a stack, a substack is created whose name begins with \n\"Data Grid Templates\".\n\n![](images/media_1237996891751_display.png)\n\nWhen you build a standalone application LiveCode uses the settings you have set for your \napplication. These are on the **General** tab of the **Standalone Applications \nSettings**. By default LiveCode will look for a substack\nwhose name begins with \"Data Grid Templates\". If it finds one then the\n**revDataGridLibrary** stack is added to your standalone application.\n\n![](images/media_1237996920279_display.png)\n\n####But What About Launcher Stacks (Splash Stacks)?\n\nSome developers prefer to use a launcher (or splash) stack technique.\nThis technique builds a standalone using a stack with very little code\nin it that in turn opens the main stack that would contain the data grid templates. \nIn this case the stack used to build the standalone will not have\na substack whose name begins with \"Data Grid Templates\" as no data grids\nhave been added to it.\n\nIn this case you will need to tell LiveCode that you require the inclusion of the \nData Grid Library. As of version LC 8, the DataGrid library **DataGrid** has been \nadded to the list of **Script Libraries** in the **Standalone Settings** dialog. \nYou can now force the inclusion of the **DataGrid** library, to ensure that any stack \nloaded by the standalone can use Data Grids.\n\nOpen the **General** tab of the **Standalone Applications Settings** (1) and select \n**Select inclusions for the standalone application** (2)\n\n ![](images/media_1237996920279_display_0.png)\n\nNow open the **Inclusions** tab (1), locate the **DataGrid** library, and then click the \ncheckbox (2) to include it.\n\n ![](images/media_1237996920279_display_1.png)\n\n##Useful Things to Know\n\n### What Sorts of Things Should I Not Do in Order to Avoid Needless\n### Suffering?\n \nThere are some things that you could do that will cause you to scratch\nyour head when things go wrong. Since knowing is half the battle we will\nshare the issues we are aware of.\n\n#### Don't Call a Handler That Redraws the Data Grid From Within a\n#### Control in the Data Grid\n \nThis will generate an error since you are deleting a control that is\ncurrently executing code. This is a no-no and the LiveCode engine will\ncomplain and stop executing. You can avoid calling a handler that\nrefreshes the data grid from within a control by a) using **send** **in time**\nor b) placing the code in the data grid script itself.\n\n**Example A**\n\n    ## Script that is in the row behavior for a data grid.\n    send \"DeleteIndex theIndex\" to the dgControl of me in 0 seconds\n   \n**Example B**\n\n    ## Script that deletes hilited index on mouseUp.\n    ## Place in the data grid script.\n    on mouseUp pMouseBtnNum\n      if pMouseBtnNum is 1 then\n        put the dgHilitedIndex of me into theIndex\n        DeleteIndex theIndex\n      end if\n    end mouseUp\n    \n\n####Don't try to draw a Data Grid on a card that Is not open\n\nWhen a Data Grid renders, it dynamically creates fields and accesses\ncertain properties. Some of these properties can not be properly\nreported by the LiveCode engine unless the field is on an open card.\n\n####Do not lock messages when accessing data grid properties.\n\nIf messages are **locked** when you try to access a data grid property, for example\n\n    set the dgProps[\"alternate row color\"]** of group \"DataGrid\n\nthe correct value will not be returned/set. \nA Data Grid relies on getProp/setProp handlers to function. \nWhen messages are locked these are not triggered.\n\n####Do not password protect the Data Grid Templates Stack\n\nThe data grid copies the templates from the **Data Grid Templates xxxx**\nstack. If you password protect this stack then the data grid will be\nunable to copy the templates.\n\n####Don't Rename the \"Data Grid Templates\" Stack\n\nIf you rename this stack then all of your data grids with templates\nstored in the stack will stop working. Since the data grid can no longer\nlocate the custom templates they will fail to draw properly.\n\n####Don't Try to Search When Data is Being Loaded From an External Source\n\n####Stop Editing the Template Group Before Drawing Your Data Grid\n\nWhen you **edit** a group in LiveCode the engine no longer knows that the\ngroup exists. If you try to draw a data grid while editing it's template\ngroup then the data grid will fail to draw. Make sure you have selected\n**Stop Editing** from the **Object** menu or clicked on the **Stop Editing** \nicon on the **Toolbar.**\n\n## Advanced Options\n \n### Displaying Large Amounts of Data\n \nSetting the **dgText** property or creating an array and setting the **dgData**\nproperty of a data grid is the easiest way to display your data. But\nwhat about situations where creating an array is too time intensive and\nyou already have the data in another format? A data grid can handle\nthese situations for you as well using a feature called callbacks.\n\nDownload the attached sample stack and database that shows how to use\nthe techniques described in this lesson to display data from a SQLite\ndatabase.\n\n####Attached Files\n\n[datagrid_databases.zip](http://lessons.livecode.com/s/lessons/files/\n1077?lesson_id=7341)\n\n####The dgNumberOfRecords Property\n\nNormally a data grid reports the number of records based on the number\nof numeric indexes in the first dimension of the **dgData** array. If you\nset the **dgNumberOfRecords** property, however, the data grid stops using\nan internal array and issues a callback message whenever it needs to\ndisplay data in a line.\n\n>**Important**: When using this technique properties like **dgData**, **dgText**,\n>**dgDataOfIndex**, etc. will no longer return values. The data grid is just\n>displaying records from your data source. It does not store any of that\n>data internally.\n\n####GetDataForLine Callback\n\n![](images/GetDataForLine_Callback_display.png)\n\nThis diagram demonstrates how this works. If you were to set the\n**dgNumberOfRecords** to 10000 then the data grid would start sending the\n**GetDataForLine** message whenever it needed to display a row. Your\nresponsibility is to fill in the data that the data grid needs by\nhandling the **GetDataForLine** message. To do that you define\n**GetDataForLine** as follows:\n\n    command GetDataForLine pLine, @pDataA\n    end GetDataForLine\n\nYou can define this handler in the data grid script or anywhere else in\nthe message path. Just fill in pDataA with the appropriate data and the\ndata grid will display it.\n\n### Creating a Data Grid by Hand\n \nThis lesson will show you how to create a data grid through script.\n\n####Copy Data Grid From revDataGridLibrary\n\nThe data grid template is stored in the **revDataGridLibrary** stack and can\nbe copied using some code similar to this:\n\n    copy group \"DataGrid\" of group \"Templates\" of stack \"revDataGridLibrary\" \\\n     to card \"MyCard\" of stack \"MyStack\"\n    put it into theDataGridRef\n\n####Set The \"style\" Property\n\n    set the dgProp[\"style\"] of theDataGridRef to \"table\" or \"form\"\n   \n####Assign a Row Template\n\n    set the dgProp[\"row template\"] of theDataGridRef \\\n     to the long id of group \"MyRowTemplate\" of stack \"MyStack\"\n   \nYou should probably create this ahead of time using the IDE. For\nexample, you could create a data grid and then delete it while leaving\nthe row template behind (it will exist on a card in \"Data Grid Templates\nxxx\" stack).\n\n### How Do I Create a Datagrid Dynamically From Tab Delimited Data\n \nMost of the lessons show how to use and change previously created data\ngrids, and assume you want to create them in the IDE. This lesson will\nexplain how to create a table data grid by script.\n\n#### Prepare Your Data\n \nTo make sure that the data grid can accept your tabular data, you should\nprepare it with these points in mind:\n\nThis example works with tab delimited data. The first row of the data\nshould include the names of the columns (this makes it easier to create\ncolumns later on) each name should be unique, no empty names are allowed.\nOne way to create tab delimited data is to choose \"save as...\" in Excel,\nand then select \"text  file (tab delimited)\". It is simple to load data\ninto Livecode from such a file:\n\n    answer file \"\"\n    put url (\"file:\" & it) into theData\n\n#### Create a data grid#### \n\nEach data grid consists of a group with lots of scripts and objects.\nLuckily, you do not need to recreate all that from scratch. Instead you\ncan simply copy a template data grid from the data grid library. Because\nthis library is neccesary for all data grid functionality, it will be\nadded to standalones by the IDE automatically. Please also see \n[What Do I Need to Do To Deploy a Standalone With A Data Grid?](#what-do-i-need-to-do-to-deploy-a-standalone-with-a-data-grid) \nfor an explanation when and how you need to add the library to\nstandalones yourself.\n\nThe code to copy a datagrid:\n\n    --copy the template group\n    copy group \"DataGrid\" of group \"Templates\" of stack \"revDataGridLibrary\" to this card\n    set the name of it to \"my Datagrid\"\n    set the dgProp[\"style\"] of group \"my Datagrid\" to \"table\"\n\n#### Create the Row template#### \n\nIn theory, your data grid is already ready for use. But for the IDE to\ninteract correctly with the new data grid, you also need to add a\nsubstack with the row template, just as the IDE would. On the second\ncard of that stack, you will need to add a group called **Row Template**,\nand you need to point your data grid to that group.\n\nHere is how you could do that:\n\n    --create row template\n    put the name of this stack into theMainstack\n    put \"Data Grid Templates\" && the seconds into theName\n    create invisible stack theName\n    set the mainStack of stack theName to theMainstack\n    go stack theName\n    create card\n    create field \"label\"\n    create graphic \"Background\"\n    group field 1 and graphic 1\n    set the name of last group to \"Row Template\"\n    go stack theMainstack\n    --point datagrid to template\n    set the dgProp[\"Row Template\"] of group \"my Datagrid\" to the \\\n     long id of group \"Row Template\" of stack theName\n\n#### Fill in Your Data\n\nAs a last step, you will want to insert the prepared data into the data\ngrid. Again, this assumes that the first row of your data contains an\nunique description for each column:\n\n    --add data\n    put true into firstLineIsNames\n    set the dgText[firstLineIsNames] of group \"my DataGrid\" to theData\n   \n\n#### Prepare the Columns of the Data Grid\n\nBecause you are creating the datagrid from arbitrary data, you will also\nneed to ***dynamically create*** all necessary columns. To do that you\nneed to set the **dgProp[\"columns\"]**. Note that it accepts the names only\nas a return delimited list.\n\nIf your data includes the column names in it's first row, you can simply\ntake this and replace tab with return:\n\n    --create columns\n    put line 1 of theData into theColumns\n    replace tab with return in theColumns\n    set the dgProp[\"columns\"] of group \"my DataGrid\" to theColumns\n\n#### Everything together#### \n\nTo test out the example scripts, simply copy the following **mouseUp**\nhandler into a button of an empty stack, and click on it with the\n**browse** tool.\n\n    on mouseUp\n      answer file \"tab delimited\" with type \"any file\" or \\\n       type \"tab file|tab|TEXT\" or type \"txt file|txt|TEXT\"\n      --in case the user cancels the file dialogue, the script does not proceed\n      if it = \"\" then\n         exit mouseUp\n      end if\n      put url (\"file:\" & it) into theData\n    \n      lock screen --when doing visual stuff, this helps to speed things up\n      --make sure the group does not exist already\n      if there is a group \"my Datagrid\" then\n           delete group \"my Datagrid\"\n      end if\n      --copy the template group\n      copy group \"DataGrid\" of group \"Templates\" of stack \"revDataGridLibrary\" \\\n       to this card\n      set the name of it to \"my Datagrid\"\n      set the dgProp[\"style\"] of group \"my Datagrid\" to \"table\"\n      --position it nicely\n      set the rectangle of group \"my Datagrid\" to 0,the bottom \\\n       of me + 16,the width of this card, the height of this card\n      \n      --create row template\n      put the name of this stack into theMainstack\n      put \"Data Grid Templates\" && the seconds into theName\n      create invisible stack theName\n      set the mainStack of stack theName to theMainstack\n      go stack theName\n      create card\n      create field \"label\"\n      create graphic \"Background\"\n      group field 1 and graphic 1\n      set the name of last group to \"Row Template\"\n      go stack theMainstack\n      --point datagrid to template\n      set the dgProp[\"Row Template\"] of group \"my Datagrid\" to the \\\n       long id of group \"Row Template\" of stack theName\n    \n      --create columns\n      put line 1 of theData into theColumns\n      --no empty column names are allowed, so insert a space when \\\n       that happens\n      replace tab & tab with tab & \" \" & tab in theColumns\n      replace tab with return in theColumns\n      set the dgProp[\"columns\"] of group \"my DataGrid\" to theColumns\n    \n      --add data\n      put true into firstLineAreNames\n      set the dgText[firstLineAreNames] of group \"my DataGrid\" to theData\n    end mouseUp\n\n## Data Grid Tips & Tricks\n\n### How Do I Scroll a Row to the Top of the Data Grid Form?\n\nThis lesson will show you how to scroll a particular row to the top of the Data Grid form \nusing the **dgRectOfIndex** (or **dgRectOfLine**) property. This technique is useful when your \nrows are not a fixed height.\n\n![](images/media_1245508384568_display.png)\n\nHere is selected row in a data grid (1). \nThe goal is to scroll that row to the top of the data grid (2).\n\n####How To Do It\n\nHere is the code that will scroll the selected line to the top of the data grid.\n\n***Copy & Paste***\n\n    put the dgHilitedIndex of group \"DataGrid\" into theIndex\n    put the dgRectOfIndex [theIndex] of group \"DataGrid\" into theControlRect\n    put the rect of group \"DataGrid\" into theGridRect\n    put item 2 of theGridRect - item 2 of theControlRect into theOffset\n    set the dgVScroll of group \"DataGrid\" to the dgVScroll of group \"DataGrid\" - theOffset\n\n#### The Result\n\n![](images/media_1245509169836_display.png)\n\nAfter executing the code the row will have been moved to the top of the data grid.\n\n### How Do I Find Out Which Line the Mouse Is Over?\n\nEach data grid row has a **dgDataControl** property that returns the **long id** of the \ncontrol. Each control also has a **dgLine** and **dgIndex** property. You can combine \nthe two in order to identify the control the mouse is over.\n\n    put the dgDataControl of the mousecontrol into theControl\n    if theControl is not empty then\n      put the dgLine of theControl into theLineNo \n    end if\n   \n\n### Converting a Database Cursor to a Data Grid Array\n\nThis lesson demonstrates a handler that will convert a database cursor into an array that \nyou can use to set the **dgData** property of a data grid.\n\n####The Handler\n\n    command ConvertSQLCursorToArray pCursor, @pOutArrayA\n      local i,j\n      local theFields\n      local theError\n      \n        put revDatabaseColumnNames(pCursor) into theFields\n        if theFields begins with \"revdberr,\" then\n          put item 2 to -1 of theFields into theError\n        end if\n        \n        if theError is empty then\n          put 0 into i\n          repeat until revQueryIsAtEnd(pCursor)\n            add 1 to i\n        \n            repeat for each item theField in theFields\n              put revDatabaseColumnNamed(pCursor, theField) into \\\n                  pOutArrayA[i][theField]\n            end repeat\n            \n          revMoveToNextRecord pCursor\n        end repeat\n      end if\n      \n      return theError\n    end ConvertSQLCursorToArray\n\nThe Handler first checks that no errors have been returned. If there are any, the \nerror data is returned.\n\nThe handler then steps through the database cursor restructuring the data into an indexed \nmultidimensional array that can be used by the data grid.\n\n\n####How to use\n\nYou can call this command as follows. \n\nIn this example theCursor is a database cursor that you have opened using \nrevQueryDatabase.\n\n    local theDataA\n    ConvertSQLCursorToArray theCursor, theDataA\n    put the result into theError\n\nIf theError is empty then dimension 1 of *theDataA* will contain integers from 1 to the \nnumber of records in the cursor (**revNumberOfRecords**). Each 1st dimension, in turn, \nhas a key for each column in the cursor (**revDatabaseColumnNames**).\n\n####Example\n\nHere is what the array might look like if your cursor had 2 columns (id and name) \nand 3 rows.\n\ntheDataA [1] [\"id\"]\n\ntheDataA [1] [\"name\"]\n\ntheDataA [2] [\"id\"]\n\ntheDataA [2] [\"name\"]\n\ntheDataA [3][\"id\"]\n\ntheDataA [3] [\"name\"]\n\nYou can use this array to set the ***dgData*** property of a data grid.\n\n    set the dgData of group \"DataGrid 1\" to theDataA\n"
	},	{
	"name":"printing_in_livecode",
	"display name":"Printing In LiveCode",
	"location":"ide",
	"group":"Intermediate",
	"data":"\n# Printing In LiveCode\n\n## Introduction\n\nPrinting is a vital aspect of many applications. LiveCode provides a\ncomprehensive set of printing capabilities. Whether you want a simple\nprint out of your stack, want to print labels or produce complex\nreports, LiveCode has the features you need.\n\nLiveCode supports a number of methods of printing. You can use the\n*print card command* and have LiveCode manage the layout of cards on the\npaper. Alternatively you can use the *print into rectangle commands*\nwhich allow you to take full control over the layout of your print out.\nThe former method is most suited to implementing simple print\nfunctionality, while the latter is better suited for more complex layout\nprinting or printing reports. Finally, you can use the built-in field\nprinting script library to print the contents of any text field using a\nsimple command.\n\nLiveCode also includes a full set of features to access and set printer\ndevice options, including options such as margins, page range and number\nof copies. This feature is invaluable if you want to produce a high\nresolution PDF file from your stack.\n\n## Controlling Printer Device Settings\n\nLiveCode gives you full programmatic control over your printer device\nand any available settings.\n\n### Choosing a Printer\n\nUse the **availablePrinters** to list the printers available on the\nuser's system. Printers can include fax modems and networked devices. If\nthe **availablePrinters** is empty, no printer is assigned. For example,\nto place a list of the available printers into a list field:\n\n\tput the availablePrinters into field \"list of printers\"\n\nSet the **printerName** to the printer you want to use to print. You can\nuse any printer listed in the availablePrinters. This property is useful\nwhen producing an in-house utility that needs to print to a specific\nprinter on the corporate network, or for automatically restoring the\nuser's previous printer choice stored in a preferences file.\n\n\tset the printerName to the cSavedPrinter of stack \"My Preferences\"\n\nThe **printerFeatures** provides a list of the features supported by the\ncurrently selected printer. Features will vary widely from device to\ndevice, but typical features may include things such as \"collate\",\n\"color\" and \"duplex\". Use this property to enable and disable output\noptions in any custom printer settings dialog.\n\n### Choosing Output Mode (e.g. Print to File)\n\nThe **printerOutput** global property allows you to choose the output\nmode for subsequent printing commands. This property is set by the\nsystem to the default printer on startup and will be changed if you open\na system print dialog in which the user chooses a different printer. If\nthis property is set to *device* it will output to the physical printer.\nAlternatively, you can set it to a file path to print to a file. On Mac\nyou can set this to *preview* to create a preview.\n\nFor example, to save the current card to a file:\n\n\task file \"Save as:\n\tset the printerOutput to (\"file:\" & it )\n\tprint this card\n\n### Working with Printer Dialogs\n\nIn most applications that need to print, you will want to provide a way\nto bring up the standard OS Print and Page Setup dialogs. Typically you\nwould make these dialogs available from Print and Page Setup items in\nthe File menu of your application. When the user makes changes in these\ndialogs the changes are made accessible to you in global properties. We\ndiscuss how to save and utilize these properties below.\n\n> **Note:** It is not necessary to bring up the standard OS dialogs to\n> alter printer settings. You may set the appropriate printer setting\n> directly by script instead.\n\nOn Linux systems you will need a recent version of GTK installed in\norder to display the OS printer dialog. If you don't have this\ninstalled, LiveCode will display its own printer dialog which has been\nbuilt as a stack and script library. This dialog mimics the standard\nsystem printer dialog and sets the LiveCode printing global properties\ndirectly.\n\n> **Tip:** You may force LiveCode to use its own internal print settings\n> dialog by setting the `systemPrintSelector`global property to false.\n> Advanced users may customize the printer dialog that LiveCode uses by\n> running `toplevel \"print dialog\"`or `toplevel \"page setup\"`in the\n> Message Box. Remember to save a copy of the stack as it will be\n> overwritten each time you upgrade your copy of LiveCode.\n\n> **Important:** The LiveCode print and page setup dialogs must be\n> included in a standalone application if you use them. Ensure that the\n> check box Print Dialog is turned on in the Standalone Application\n> Settings dialog for your application. You do not need to include these\n> dialogs if you only use the OS native print dialogs. For more\n> information on including resources in your standalone application, see\n> the chapter on Building Standalone Applications.\n\nTo bring up the standard OS printer dialog, use the **`answer printer`**\ncommand.\n\n\tanswer printer\n\nIf the user does not press the cancel button then any changes to the\nprinter settings will be reflected in the global printing properties,\ndiscussed below.\n\nTo bring up the standard OS page setup dialog, use the \n**answer page setup** command.\n\n\tanswer page setup\n\n### Saving Printer Settings\n\nTo save or set a complete set of options relating to the current printer\nwhich includes every setting in the OS Page Setup and Print dialogs, use\nthe **printerSettings** global property.\n\nThe **printerSettings** property is a binary string that completely\ndescribes the current settings. The property contains the name of the\nprinter and the settings currently in use.\n\nYou should not attempt to modify the printerSettings but rather get and\nset it in its entirety. To access individual printer properties, use the\nglobal printing properties described below.\n\nWhen you set the **printerSettings** property to a saved value, LiveCode\nwill choose the printer named in the property and set all of its\nsettings to those contained within the property. If the printer cannot\nbe found LiveCode will return the error \"unknown printer\" in the result.\nIf the printer is found but the settings are not valid then LiveCode\nwill choose the printer and reset it to default values.\n\n> **Note:** You must save a separate copy of the printerSettings\n> property for each printer \n>or OS you intend to use. The printerSettings property cannot be\n>transferred between platforms. For example, a printerSettings property\n>generated on a Windows computer cannot be used on Mac – even for the\n>same printer. If you want to alter settings across different platforms\n>and printer types use the global printing properties described below.\n>Use the printerSettings for convenience when you know you will be using\n>the same printer and want to save all the settings, or where you are\n>setting esoteric properties not listed in the global printing\n>properties described below.\n\nTo save the current printer settings into a custom property stored on\nthe current stack:\n\n\tset the cSavedPrinterSettings of this stack to the printerSettings\n\tsave this stack\n\nThen to restore these settings:\n\n\tset the printerSettings to the cSavedPrinterSettings of this stack\n\n## Paper Related Options\n\nThis section discusses how you get and set paper related options – the\nrectangle area of the paper, the paper size, the orientation and the\nscale to use to print onto the paper. These paper options apply to all\ntypes of printing, i.e. card, field and layout printing.\n\nUse the **printRectangle** to get the printable rectangle area within\nthe paper (returned in device co-ordinates). This property takes into\naccount any settings applied by the user in the Page Setup and Printer\ndialogs including the print orientation (e.g. landscape or portrait).\nThe rectangle is represented left,top,right,bottom and is always\nrelative to the top left of the page – thus the top left will always be\n0,0. The printRectangle will always be within the\n**printPaperRectangle** – the rectangular area of the sheet of paper.\n\nThe printRectangle property is read only and cannot be set directly – to\nalter it you must set other options relating to the paper, for example\nthe **printPaperOrientation**(discussed below).\n\nDo not confuse the **printMargins**and other card layout printing\nproperties with paper properties such as the **printRectangle**. The\n**printMargins**only applies to printing cards using LiveCode's automatic\ncard layout capabilities (discussed below). Thus the **printMargins**has\nno effect on **printRectangle**.\n\nUse the **printPaperOrientation** to get and set the orientation of your\nprint out. This property may be set to one of the following values:\n\n*portrait*: rotated 0 degrees.\n\n*landscape*: rotated 90 degrees clockwise.\n\n*reverse portrait*: rotated 180 degrees clockwise.\n\n*reverse landscape*: 270 degrees clockwise.\n\n\tset the printPaperOrientation to \"landscape\"\n\nUse the **printPaperScale** property to apply a scale factor to your\nprint out after all other settings have been taking into account.\n\nThe **printPaperScale** is applied after all other layout and scaling\noptions. For example, if you have used the layout printing features to\nprint a series of cards at 50% scale, then set the **printPaperScale**,\nthis factor will be applied to the entire layout after the card layout\nscaling has been calculated.\n\nTo print a range between 1 and 100% set the **printPaperScale** to a\nnumber between 0 and 1. To print at 200% set the **printPaperScale** to\n2.\n\n\tset the printPaperScale to 0.5 -- 50%\n\n## Job Related Options\n\nThis section discusses how to get and set job related options – the\nnumber of copies, duplex printing, collation, color, title and printable\narea.\n\n> **Important:** The available job options all depend on what the\n> currently selected printer supports (use the\n> **printerFeatures**property, described above, to retrieve a list of\n> features supported by the current printer).\n\nUse the **printCopies** property to get and set the number of copies to\nprint. The printCopies should be set to a value of 1 or more.\n\n\tset the printCopies to 5 -- print 5 copies\n\nUse the **printDuplex** property to tell the printer to print double\nsided. This property may be set to any of the following values:\n\n- *none*: no double-sided printing \n- *short edge*: double-sided printing with tumble (flip the non-facing \npage) \n- *long edge*: double-sided printing without tumble.\n\n\tset the printDuplex to \"short edge\"\n\nUse the **printCollate** property to specify whether to interleave\nmultiple copies of a print job. If a print job has three pages, P1, P2\nand P3, with printCollate set to *true* and **printCopies**set to 2 the\noutput order will be P1, P2, P3, P1, P2, P3. With printCollate set to\n*false* the output will be P1, P1, P2, P2, P3, P3.\n\n\tset the printCollate to true\n\nUse the **printColors** property to specify whether to print in color or\nnot. If \"color\" is not among the lines of the **printerFeatures** then\nthis property will have no effect and all print jobs will be printed in\nmonochrome. This property may be set to either *true* or *false*.\n\nFor example, to check if color printing is supported on the current\nprinter and use it if it is:\n\n\tif \"color\" is among the lines of the printerFeatures then \n\t\tset the printColors to true\n\tend if\n\nUse the **printTitle** property to specify the name of the next print\njob in the system printer queue. Setting this property to match the name\nof the user's document will ensure that the user is able to recognize it\nin the system printer queue utility. If the **printTitle**is empty at\nthe start of a printing loop, the title of the defaultStack will be used.\n\n\tset the printTitle to \"My Report 1\"\n\nUse the **printRectangle** property to determine the printable region of\nthe physical page as returned by the printer. This rectangle will always\nbe contained within the **printPaperRectangle**. Thus you should use the\nprintRectangle and not the **printPaperRectangle** when calculating a\nprint layout. The **printPaperRectangle** is useful if you are\ngenerating a print preview and want to show the entire area of the paper\nincluding any margin areas that cannot be printed on. This property is\nread only and cannot be set directly.\n\n### Printer Font Metrics (Windows)\n\nWindows systems sometimes use different versions of the same font for\ndisplaying text on screen and printing. This can result in layouts and\nline breaks differing between the screen display and the printed output.\nTo prevent this from happening, you can tell LiveCode to use the printer\nfonts for display on screen. To do this, set a stacks\n**formatForPrinting** property to true.\n\n**Do:**                                                                                                                                                                                                                                \n- Set the **formatForPrinting**stack property to true before loading a \nstack in memory. If the stack is already loaded, set this property to \ntrue then save and reload it. (Save then use \n*Close and Remove from Memory* in the File menu).  \n- Create a stack off screen (with **formatForPrinting** set to true) \nwith your print layout template and copy text into it prior to printing.                                                                                                 \n- Set the **formatForPrinting**before doing any print layout related \ncalculations on the stack.                                                                                                                                              \n- Set the **formatForPrinting**to true on any print preview stack being \ndisplayed to the user.\n\n**Don't:** \n- Allow the user to directly edit text in fields whose \n**formatForPrinting** is set to true. Attempting to do this may cause \ndisplay anomalies. Set this property to false and reload the stack \nfirst.                 \n- Generally use stacks with **formatForPrinting**set to true for display \non screen, as this will show text that has been optimized for print \ndisplay (instead of screen display), which is harder to read on screen.  \n- Use this property on other platforms – Windows is the only platform \nthat uses different fonts on screen vs. in a print out.                                                                                      \n- Use the **windowBoundingRect** property to constrain display of a \nstack who's **formatForPrinting**has been set to true – this property \nwill be ignored when the stack is opened or maximized.\n\n## Printing a Card\n\nOnce you have set your printer, paper and job options (above) you are\nnow ready to use one of the print commands to start printing. At its\nsimplest, the **print** card command allows you to print a card. Later\nwe will discuss ways of printing more complex layouts, fields and text.\n\n\tprint this card -- prints the current card\n\tprint card 12 -- prints card 12\n\nFor more details on how to specify which cards to print, see the \n**print** command in the *LiveCode Dictionary*.\n\nTo print a scale between 1 and 100% set the **printScale** to a number\nbetween 0 and 1. To print at 200% set the **printScale** to 2.\n\nThe printScale applies to each card that you print. It is not related to\nthe **printPaperScale** which is applied to the entire print job after\nall other scaling calculations have been applied. Thus you may set the\n**printPaperScale** to 0.5 to print at 50%, then print individual cards\nat different printScale values. With a **printPaperScale** of 0.5, a\nprintScale of 2 would result in that card being printed at 100%.\n\nWhen printing a card, use the **printMargins** to specify the margins\naround the border of the card on the page.\n\n> **Note:** When calculating placement on the printed page, all\n> calculations assume that there are 72 dots per inch – regardless of\n> platform or printer device. LiveCode will automatically adjust the\n> print out for resolution of the actual device. This makes it simple to\n> calculate your printed layout.\n\n\t-- a one-inch margin on each side\n\tset the printMargins is set to 72,72,72,72\n\nThe **printMargins** only applies when using print card directly. It\ndoes not have any effect on printing cards into a layout (described\nbelow).\n\nThe **printCardBorders** property specifies whether or not the bevel\nborder around the edge of a card should appear in the print out.\n\n### Card Layout Options\n\nWhen using the basic print card form of the print command, there are two\nlayout options that allow you to customize the positioning of cards on\nthe printed page. If you require further flexibility, see the section on\nprinting a layout, below.\n\nUse the **printRowsFirst** property to specify whether cards should be\nprinted across and down or down then across.\n\nConsider a simple example of printing multiple cards – this example is\nuseful for printing labels. In this example we have a stack that\ncontains 8 cards, each one containing a mailing label. If you want to\ntry out this example:\n\n- Create a stack and size it to be small – the size of a mailing label\n- Create a single field, and in the field Inspector turn off the \n*Shared Text* property\n- Group the field and in the group property *Inspector* turn on \n*Behave as Background*\n- Turn on *Select Grouped* on the Toolbar and select the field\n- Place the contents of the first mailing label into the *Contents* tab \nof the *Inspector*\n- Create 8 more cards, and in each select the field and place the \ncontents of a different label\n\nThus we have a stack that looks like the figure below.\n\n![Print label stack example](images/printing-label_stack_example.png)\n\nNow we will implement the printing commands. If this was a real\napplication you would probably want to put these in a Print command in\nthe File menu. In this instance you may execute the following in the\nmulti-line message box (open the Message Box then press the second icon\nto get the multi-line pane).\n\n\t-- allow the user to choose printer output options\n\tanswer printer\n\tprint 9 cards\n\nPress enter to execute the commands.\n\nThe resulting print out will look like the figure below.\n\n![Printing 9 label-sized cards with default settings](images/printing-label_sized_cards_default.png)\n\nIf we modify the print commands to include an additional line to turn\noff the printRowsFirst:\n\n\tanswer printer\n\tset the printRowsFirst to false\n\tprint 9 cards\n\nThe resulting print out will look like the figure below.\n\n![Printing 9 label-sized cards with printRowsFirst set to\nfalse](images/printing-label_sized_cards_printRowsFirst_false.png)\n\nUse the **printGutters** property to specify the margin between each\ncard. By default the printGutters are set to 36,36 or one half inch\nhorizontally and vertically.\n\nIn the following example, we print the same label stack but reduce the\nspace between each label to 1/10<sup>th</sup> of an inch. To make it\neasy to see the differente we also turn on printing of card borders\nusing the printCardBorders property.\n\n\tanswer printer\n\tset the printGutters to 7,7\n\tset the printCardBorders to true\n\tprint 9 cards\n\nThe resulting print out will look like the figure below.\n\n![Printing 9 label-sized cards with borders and a narrow\ngutter between each](images/printing-label_sized_cards_gutter.png)\n\n## Printing Fields & Text\n\nTo print a field, use the **revPrintField** command. This command takes\na single parameter, a reference to a field. This command only allows\nprinting a single field. If you need to include a header and footer or\ntext you have constructed programmatically, see the **revPrintText**\ncommand below.\n\n\trevPrintField the long id of field \"text document\"\n\n**revPrintField** is implemented as a script library located in the\nLiveCode IDE. The script library creates an invisible stack, sets the\nrectangle of that stack to the current paper size, sets the\n**formatForPrinting**to true, creates a field, then copies the contents\nof the field you specify into this invisible stack. It then prints the\nfield one page at a time, scrolling the text after each page. Advanced\nusers can locate this library script by going to the *Back Scripts* tab\nin the Message Box, turning on the checkbox for *Show LiveCode UI Back\nScripts*, then editing the script of *stack \"revPrintLibrary\"*. The\n*revPrintField* handler is near the top of the script.\n\nUse the **revShowPrintDialog** command to control whether the system\nprinter and page setups dialogs should be shown by **revPrintField** or\n**revPrintText**.\n\n\t-- show the system printer dialog, but not page setup\n\trevShowPrintDialog true, false\n\trevPrintField the long id of field \"text document\"\n\nUse the **revPrintText** command to print plain or styled text together\nwith an optional header and footer.\n\n\trevPrintText textToPrint [,headerText [,footerText [,fieldTemplate]]]\n\nThe *textToPrint* is anything which evaluates to a string. If you want\nto printed styled text, pass HTML instead of plain text. (To convert a\nfield containing styled text to a HTML use the **htmlText** property.)\n\nThe *headerText* and *footerText* contains the text to use as a header\nand footer. You may include an expression that is computed for each\npage. For more details on using expressions, see the \n*LiveCode Dictionary* entry for **revPrintText**.\n\nThe *fieldTemplate* parameter allows you to specify a field reference to\nuse. Fonts in the print out will be inherited from this field.\n\n## Printing a Layout\n\nIf you need to print a more complex layout than allowed with the basic\nprint card command or text printing commands (described above), you can\nuse the **print card into rect** syntax to create any sort of layout you\nchoose.\n\n\tprint card from topLeft to rightBottom into pageRect\n\nThe *topLeft* is the top left coordinate of the current card to start\nprinting at.\n\nThe *rightBottom* is the bottom right coordinate of the current card to\nstop printing at.\n\nThe *pageRect* is therectangular area on the paper to print into.\n\nprintMargins only applies when using print card directly. It does not\nhave any effect on printing cards into a layout. Use the\n**printRectangle** to get the printable area when working with layout\nprinting.\n\nFor example, lets say that we want to print the text field from the\nmiddle of the stack in the figure below. (You can load the stack shown in\nthe picture by going to your LiveCode installation folder then opening\nResources-\\> Examples-\\> SQLite Sampler.rev.) We want the output to\nscale to take up the entire width of the paper and half the height.\n\n![Stack with text field to print into a layout](images/printing-stack_with_text_field.png)\n\n\tlocal tRect\n\tput 0,0,item 3 of the printRectangle, \\\n\t\tround(item 4 of the printRectangle / 2) into tRect\n\tprint this card from the topleft of field \"theText\" \\\n\t\tto the bottomRight of field \"theText\" \\\n\t\tinto tRect\n\nThis results in the print out shown in the figure below.\n\n![Result of layout printing command](images/printing-stack_with_text_field_print.png)\n\nYou can construct a complex layout taking components from multiple\nstacks by printing a sequence of rectangles onto the same page. For\nexample, you may have a stack that contains a standard header and\nfooter, another that contains a logo, and a layout that contains text.\nUse the **open printing** command to start a print job, then print each\nelement into the appropriate rectangle on the paper. The use then\n**close printing** command to send the print job to the printer. The\nexample in the figure below shows two stacks with printable regions that\nwe want to combine onto a single sheet of paper.\n\n![Separate header and body stacks to print into a layout](images/printing-separate_header_body_stacks.png)\n\nTo print these onto a single sheet:\n\n\tanswer printer -- show the system print settings dialog\n\topen printing -- start a print job\n\t-- work with the header stack\n\tset the defaultStack to \"header\"\n\t-- print the header field onto the top left of the paper\n\tprint this card from the topLeft of field \"header\" \\\n\t\tto the bottomRight of field \"header\" \\\n\t\tinto the rect of field \"header\"\n\t-- save the bottom of the header\n\tput the bottom of field \"header\" into tHeaderBottom\n\tset the defaultStack to \"report editor\"\n\t-- print the table field below the header\n\tprint this card from the `topLeft`of field \"report table\" \\\n\t\tto the bottomRight of field \"report table\" \\\n\t\tinto 0,tHeaderBottom,the`right of field \"report table\", \\\n\t\tthe bottom of field \"report table\" + tHeaderBottom\n\t-- send `the`job to `the`printer\n\tclose`printing\n\n\n![Result of layout printing command with multiple stacks](images/printing-layout_multiple_stacks.png)\n\n### Printing a complex layout\n\nTo print a more complicated layout, create a stack and set its rectangle\nto the current **printRectangle**. Add rectangular areas for each\ncomponent you will be printing. Then set *Geometry* properties (see the\nsection on the *Geometry Manager*, in the **LiveCode Script** guide for\nmore information) on each of these rectangles so they resize correctly\nwhen the stack is scaled. Set up your print routine so that you open\nthis stack invisibly then resize it to the **printRectangle**. This will\ntrigger the geometry routines and scale the rectangular areas correctly.\nThen run your sequence of print commands to print into each rectangle.\n\nIn the figure below, we have set the size of the stack to the\n**printRectangle** then added 4 rectangle graphics. We have named each\ngraphic and turned on the *Show Name* property for each so you can see\nthe name.\n\n![Stack template for printing a layout](images/printing-stack_template.png)\n\nNext, we set Geometry properties for each of the rectangle graphics. The\nheader graphic is set to scale relative to the right and bottom, with a\nminimum size limit of 100 pixels (see the figure below). The body graphic\nis set to link the top edge to the header graphic, the right and bottom\nto the stack (see the figure below). The footer 1 graphic is set to scale\nthe right edge and position the bottom edge. And footer 2 is set to\nposition both the right and bottom.\n\n![Example geometry properties for print layout stack](images/printing-example_geometry_property1.png)![Example geometry properties for print layout stack](images/printing-example_geometry_property2.png)\n\nTo make the printing template stack take on the size of the paper, we\ncan add the following handler to the stack script:\n\n\ton preOpenStack\n\t\tset the width of this stack to (item 3 of the printRectangle - item 1 of the printRectangle)\n\t\tset the height of this stack to (item 4 of the printRectangle - item 2 of the printRectangle)\n\tend preOpenStack\n\nWe now have a working print template stack. All that remains is to write the script that \nprints into the rectangles:\n\n\t-- prepare to load this stack off screen\n\thide stack \"print layout\"\n\n\t-- this will trigger the stack to resize, which run the geometry \n\t-- routines, giving us the correct values for each rectangle\n\tgo stack \"print layout\"\n\n\t-- now we store these rectangle coordinates in variables\n\tput the rect of graphic \"header\" into tHeaderRect\n\tput the rect of graphic \"body\" into tBodyRect\n\tput the rect of graphic \"footer 1\" into tFooter1Rect\n\tput the rect of graphic \"footer 2\" into tFooter2Rect\n\n\t-- we can close the layout stack as its no longer needed\n\tclose stack \"print layout\"\n\n\t-- load the system printer dialog to allow the user \n\t-- to choose number of copies, etc.\n\tanswer printer\n\n\t-- start the print job\n\topen printing\n\n\t-- set the stack we are working on to a stack containing the header\n\t-- you could use any stack or region within a card here\n\tset the defaultStack to stack \"header graphics\"\n\n\t-- print from the rectangle of our header group \n\t-- into the rectangle we stored earlier\n\t-- we could use a graphic or any rectangular area instead of a group\n\tprint this card from the topLeft of group \"header\" \\\n\t\tto the bottomRight of group \"header\" into tHeaderRect\n\n\tset the defaultStack to \"body contents\"\n\n\tprint this card from the topLeft `of`group \"body\" \\\n\t\tto the bottomRight of group \"body\" into tBodyRect\n\n\tset the defaultStack to \"footer1\"\n\n\tprint this card from the topLeft of group \"footer1\" \\\n\t\tto the bottomRight of group \"footer1\" into tFooter1Rect\n\n\tset the defaultStack to \"footer2\"\n\n\tprint this card from the topLeft of group \"footer2\" \\\n\t\tto the bottomRight of group \"footer2\"\n\n\t-- send the print job to the printer\n\tclose printing\n\n\t-- check to see if the user cancelled or there was an error\n\tif the result is “cancel” then\n\t\t-- insert any code you need here to handle cancellation\n\telse if the result is not empty then\n\t\t-- bring up an error dialog\n\t\tanswer “Printer Error”\n\telse\n\t\t-- insert any code you need here to handle success\n\tend if\n\nFor more information on how to print multiple pages of a complex layout,\nsee the section on *Printing Multiple Pages*, below. For information on\nprinting scrolling text fields into an area within a layout, see the\nsection on *Working with Scrolling Fields when Layout Printing*, below.\n\n## Printing Multiple Pages\n\n### Multiple pages using card printing\n\nTo print multiple pages when printing cards, simply specify which cards\nyou want to print as part of the print command.\n\n\tprint {range}\n\nExamples:\n\n\t-- prints the current card\n\tprint this card\n\t-- prints all cards in the current stack\n\tprint all cards\n\t-- prints the next 10 cards, starting with the current card\n\tprint 10 cards\n\t-- prints card 3 to 7 of the current stack\n\tprint card 3 to 7 print marked cards\n\t-- prints all cards where the mark property is true\n\tprint marked cards\n\n### Multiple pages when using layout printing\n\nTo print multiple pages when printing layouts, use the **open printing**\ncommand to open a print job. Then print the layout for the first page\n(see above). Then use the **print break** command to insert a page break\ninto the print job. Then lay out the second page and so on. Finally, use\nthe **close printing** command to send the print job to the printer.\n\n### Working with Scrolling Fields when Layout Printing\n\nTo print a single scrolling text field, use the **revPrintText** command\n(see above for more information). If you want to incorporate the\ncontents of a scrolling field within a layout, use the **pageHeights**\nproperty to scroll the field each time you print a page, then **print\nbreak** to move to the next page.\n\nThe pageHeights returns a list of values to indicate how far a scrolling\nfield needs to be scrolled to avoid clipping a line of text on each page\nof your print out. (You should use this feature in conjunction with the\nformatForPrinting property, above.)\n\n\t-- store a list of pageHeights\n\tput the pageHeights of field \"body text\" into tHeightsList\n\t-- scroll the field to the start\n\tset the scroll of field “body text” to 0\n\t-- start the print job\n\topen printing\n\trepeat for each line l in tHeightsList\n\t-- clip the field to the bottom of the last visible line\n\tset the height of field “body text” to l\n\t-- print the field rectangle\n\t-- you may want to add an output \"into\" rectangle\n\n\tprint this card from the topLeft of field \"body text\" \\ \n\t\tto the bottomRight of field \"body text\"\n\n\t-- print a new page\n\tprint break\n\tend repeat\n\t-- send the job to the printer\n\tclose printing\n\n> **Important:** Set the Lock Location (lockLoc) property of the field\n> to true before setting the height in the loop above to avoid the field\n> “drifting” each time you alter the height.\n\n> **Tip:** Turn off the scroll bar properties (hScrollbar and\n> vScrollbar) of the field before printing and set the border width to 0\n> if you want to avoid printing a border or scroll bar.\n\nYou can incorporate scrolling fields into a template print layout stack\n(see the section *Printing a Complex Layout* above) to make it easier to\nmanage printing a complex layout. Create a field in your template print\nstack instead of a graphic, turn off the scroll bar, set the border\nwidth to 0, the lock location to true and then the geometry properties\nas per the section above. At the start of each print job, copy the text\nfont and size by using the **textFont** and **textSize** properties,\nthen the contents of the text field you want to print using the\n**htmlText** property.\n\n### Working with Print Ranges\n\nUse the **printRanges** property to get a list of pages that the user\nhas selected in the printer settings dialog. Use this property when\nprinting to avoid printing pages the user has not selected. To use this\nproperty, open a system printer dialog, then store the **printRanges**\nin a variable. Then set the **printRanges** to \"all\", then send only the\npages that were selected (stored in the variable) to the printer.\n\n> **Note:** If you ignore the printRanges property LiveCode will handle\n> this setting automatically. Simply send every page to the printer as\n> normal and LiveCode will ignore the pages the user has not selected in\n> the print dialog. Handle this option manually only if you are printing\n> an extremely complex layout and want to save processing time building\n> the layout for every unselected page.\n\nUse the **printPageNumber** to get the number of the page currently \nbeing printed during your printing loop.\n\n## Printing a Browser Object\n\nTo print the contents of a browser object, use the **revBrowserPrint** \ncommand. For more information, see the **revBrowserPrint** command in \nthe *LiveCode Dictionary*."
	},	{
	"name":"processing_text_and_data",
	"display name":"Processing Text and Data",
	"location":"ide",
	"group":"Intermediate",
	"data":"\n# Processing Text and Data\n\n## Introduction\n\nLiveCode has first-class text and data processing capabilities.\nLiveCode’s unique chunk expressions – the ability to refer to text using\nEnglish-like statements like \"word 3 to 5 of myVariable\", combined with\nother powerful features which include regular expressions, XML\nprocessing, associative arrays, data encoding and decoding functions and\ncompression and encryption algorithms – make it easy and simple to\nprocess text and data of any complexity. This chapter is a reference\nguide - go [here](https://livecode.com/resources/) for more resources.\n\nThe section *Processing Text and Data* in the *Sample Scripts* within\nthe product documentation contains additional code examples.\n\n## Using Chunk Expressions\n\nChunk expressions are the primary method of working with text in\nLiveCode. A chunk is an English-like way of describing an exact portion\nof text. You can use chunks both to retrieve a portion of text, and to\nedit text. This topic defines the types of chunks you can address and\ndescribes the syntax for specifying them.\n\n### Types of Chunks\n\nThe common types of chunks are the **character**, **word**, **line**, or\n**item**. An item can be delimited by any character you specify. In\naddition, the **token** chunk is useful when parsing script data.\n\nHere is an example of a chunk expression using the **word** chunk:\n\n\tput word 1 to 3 of field \"text\" into myVariable\n\n### Using Chunks with Containers\n\nYou can use a chunk of a *container* anywhere you use an entire\ncontainer. For example, you can use the **add** command to add a number\nto a line of a field:\n\n\tadd 1 to word 3 of field \"Numbers\"\n\nYou can also use chunk expressions to replace (using the **put**\ncommand) or remove (using the **delete**command) any portion of a\ncontainer.\n\n### Using Chunks with Properties\n\nYou *can* use chunk expressions to *read* portions of a *property* (such\nas the **script** property). However, since you change a property with\nthe **set** command rather than the **put** command, you *can't* use a\nchunk expression to *change* a part of a property's value. Instead,\n**put** the property value into a variable, use the chunk expression to\nchange the variable, then **set** the property to the variable's\ncontents. The following example shows how to change the third line of an\nobject's **script** property:\n\n\tput the script of me into tempScript\n\tput \"-- Last changed by Jane\" into line 3 of tempScript\n\tset the script of me to tempScript\n\n### The basic chunk types\n\nThere are four chunk types that are probably the most useful for basic\ntext processing: **character**, **segment**, **item** and **line**.\n\n#### The Character Chunk\n\nA **character** is a single character, which may be a letter, digit,\npunctuation mark, or control character.\n\nYou can use the abbreviation **char** as a synonym for **character** in\na chunk expression.\n\n> **Important:** The character chunk corresponds to the notion of\n> grapheme in the Unicode standard.\n\n#### The Segment Chunk\n\nA **segment** is a string of characters delimited by **space**, **tab**,\nor **return** characters or enclosed by double quotes.\n\n>*Note:* **Word** is a synonym of segment.\n\n#### The Item Chunk and the itemDelimiter Property\n\nBy default, an **item** is a string of characters delimited by commas.\n\nItems are delimited by a string specified in the **itemDelimiter**\nproperty. You can change the default *comma* to create your own chunk\ntype by setting the **itemDelimiter** property to any string.\n\n#### The Line Chunk and the lineDelimiter Property\n\nBy default, a **line** is a string of characters delimited by the\n**return** character.\n\nLines are delimited by string in the **lineDelimiter** property. By\ndefault, the **lineDelimiter** is set to **return**, but you can create\nyour own chunk type by setting the **lineDelimiter** property to any\nstring.\n\n### Other chunks\n\nThere are also some chunks which are useful for more advanced text\nprocessing. These are:\n- paragraph\n- sentence\n- trueWord\n- codepoint\n- codeunit\n- byte\n\nA **token** is a string of characters delimited by certain punctuation\nmarks. The **token** chunk is useful in parsing LiveCode statements, and\nis generally used only for analyzing scripts.\n\nThe **sentence** and **trueWord** chunk expressions facilitate the\nprocessing of text, taking into account the different character sets and\nconventions used by various languages. They use the ICU library, which\nuses a large database of rules for its boundary analysis, to determine\nsentence and word breaks.\n\nThe **paragraph** chunk is currently identical to the existing **line**\nchunk, however in the future **paragraph** chunks will also be delimited\nby the Unicode paragraph separator.\n\nThe **codepoint** chunk type allows access to the sequence of Unicode\ncodepoints which make up the string. The **codeunit** chunk type allows\ndirect access to the UTF-16 code-units which notionally make up the\ninternal storage of strings. The **codeunit** and **codepoint** chunk\nare the same if a string only contains unicode codepoints from the Basic\nMultilingual Plane.\n\nThe **byte** chunk is an 8-bit unit and should be used when processing\nbinary data.\n\nFor more information on the above chunk types, please consult the\nLiveCode Dictionary.\n\n### Specifying a Chunk\n\nThe simplest chunk expression specifies a single chunk of any type. The\nfollowing statements all include valid chunk expressions:\n\n\tget char 2 of \"ABC\" *-- yields \"B\"*\n\tget segment 4 of \"This is a test\" *-- yields \"test\"*\n\tget line 7 of myTestData\n\tput \"A\" into char 2 of myVariable\n\nYou can also use the ordinal numbers **first**, **last**, **middle**,\n**second**, **third**, **fourth**, **fifth**, **sixth**, **seventh**,\n**eighth**, **ninth**, and **tenth** to designate single chunks. The\nspecial ordinal **any** specifies a *random* chunk.\n\n\tput \"7\" into last char of \"1085\" -- yields \"1087\"\n\n### Negative Indexes in Chunk Expressions\n\nTo count *backwards* from the end of the value instead of forward from\nthe beginning, specify a *negative* number. For example, the number -1\nspecifies the last chunk of the specified type, -2 specifies the\nnext-to-last chunk, and so forth. The following statements all include\nvalid chunk expressions:\n\n\tget item -1 of \"feather, ball, cap\" -- yields \"cap\"\n\tget char -3 of \"ABCD\" -- yields \"B\"\n\n### Complex Chunk Expressions\n\nMore complex chunk expressions can be constructed by specifying a chunk\nwithin another chunk. For example, the chunk expression `segment 4 of\nline 250` specifies the fourth segment of line 250.\n\nWhen combining chunks of different types to construct a complex chunk\nexpression, you must specify the chunk types in order. The following\nstatements all include valid chunk expressions:\n\n\tchar 7 of segment 3 of myValue\n\tsegment 9 of item 2 of myValue\n\tlast char of segment 8 of line 4 of myValue\n\nThese, however, are not valid chunk expressions:\n\n\tsegment 8 of char 2 of myValue --chars can't contain segments\n\n\titem 9 of first segment of myValue --segments can't contain items\n\n\tline 3 of last item of myValue --items can't contain lines\n\nThe full hierarchy is as follows:\n\n\tparagraph > sentence > line > item > segment >\n\t\ttrueWord > token > character > codepoint > codeunit > byte\n\n### Using Parentheses in Chunk Expressions\n\nYou use parentheses in chunk expressions for the same reasons they're\nused in arithmetic:\n\nTo make a complex expression clearer.\n\nTo change the order in which the parts of the expression are evaluated.\n\nFor example, consider the following statement:\n\n\tput item 2 of segment 3 of \"a,b,c i,j,k x,y,z\" -- BAD\n\nThe desired result is \"y\", the second item in the third segment. But the\nstatement above causes an execution error, because it asks for an item\nof a segment, and segments can't contain items. You can obtain the\ndesired result by using parentheses to change the order of evaluation:\n\n\tput item 2 of (segment 3 of \"a,b,c i,j,k x,y,z\") -- good\n\nIn the example above, LiveCode gets the third segment first, then gets\nthe second item in that segment. By adding parentheses around (segment 3\nof \"a,b,c i,j,k x,y,z\"), you force LiveCode to evaluate that part of the\nchunk expression first. The value of the expression in parentheses is\n\"x,y,z\", and item 2 of \"x,y,z\" is \"y\".\n\nAs with arithmetic expressions, the parts of a chunk expression that are\nin parentheses are evaluated first. If parentheses are nested, the chunk\nexpression within the innermost set of parentheses is evaluated first.\nThe part that is enclosed in parentheses must be a valid chunk\nexpression, as well as being part of a larger chunk expression:\n\n\tput line 2 of segment 1 to 15 of myValue -- won't work\n\tput line 2 of segment (1 to 15 of myValue) -- won't work\n\tput line 2 of segment 1 to 15 (of myValue) -- won't work\n\tput line 2 of (segment 1 to 15 of myValue) -- works!\n\nThe first of the above examples doesn't work for much the same reason as\nthe previous example: segments can't contain lines. The second and third\nexamples don't work because neither \"1 to 15 of myValue\" nor \"of\nmyValue\" is a valid chunk expression. However, \"segment 1 to 15 of\nmyValue\" is a valid chunk expression, so the last example works.\n\n### Nonexistent Chunks\n\nIf you request a chunk number that doesn't exist, the chunk expression\nevaluates to empty. For example, the expression `char 7 of \"AB\"` yields\nempty.\n\nIf you attempt to change a chunk that doesn't exist, what happens\ndepends on what kind of chunk you specify:\n\n#### Nonexistent character or segment:\n\nPutting text into a character or segment that doesn't exist *appends*\nthe text to the end of the container, without inserting any extra\nspaces.\n\n#### Nonexistent item:\n\nPutting text into an item that doesn't exist *adds* enough\n**itemDelimiter** characters to bring the specified item into existence.\n\n#### Nonexistent line:\n\nPutting text into a line that doesn't exist *adds* enough **return**\ncharacters to bring the specified line number into existence.\n\n### Specifying a Range\n\nTo specify a portion larger than a single chunk, you specify the\nbeginning and end of the range. These are all valid chunk expressions:\n\n\tget char 1 to 3 of \"ABCD\" -- yields \"ABC\"\n\tget segment 2 to -1 of myValue -- second segment to last segment\n\tput it into line 7 to 21 of myValue -- replaces\n\nThe start and end of the range must be specified as the same chunk type,\nand the beginning of the range must occur *earlier* in the value than\nthe end. The following are not valid chunk expressions:\n\n\tchar 3 to 1 of myValue -- won't work \n\t-- end cannot be greater than start\n\t\n\tchar -1 to -4 of myValue -- won't work\n\t-- 4th from last comes before last\n\n> **Important:** When using negative numbers in a range, remember that\n> numerically, -x comes after `-x+1`. For example, -1 is greater than\n> -2, and -4 is greater than -7. The greater number must come **last**\n> in order to create a valid range.\n\n### Counting the Number of segments, Lines or Items\n\nThe **number** function returns the number of chunks of a given type in\na value. For example, to find out how many lines are in a variable, use\nan expression such as:\n\n\tthe number of lines in myVariable\n\nYou can also nest chunk expressions to find the number of chunks in a\nsingle chunk of a larger chunk type:\n\n\tthe number of chars of item 10 of myVariable\n\n## Comparing and Searching\n\nLiveCode provides a number of ways of comparing and searching text. For\nmost types of searching and comparing, you will find chunk expressions\neasy and convenient. However, if you have complex searching needs, you\nmay prefer to use Regular Expressions, covered in the next section.\n\n### Checking if a Part is within a Whole\n\nYou use the **is in** operator to check if some text or data is within\nanother piece of text or data. You can use the reverse **is not in**\noperator to check if text or data is not within another piece of text or\ndata.\n\n\t\"A\" is in \"ABC\" -- evaluates to true\n\t\"123\" is in \"13\" -- evaluates to false\n\nYou can also use the **is in** operator to check whether some text or\ndata is within a specified chunk of another container.\n\n\t\"A\" is in item 1 of \"A,B,C\" -- evaluates to true\n\t\"123\" is in segment 2 of \"123 456 789\" -- evaluates to false\n\n### Case Sensitivity\n\nComparisons in LiveCode are case insensitive by default (except for\nRegular Expressions, which have their own syntax for specifying whether\nor not a match should be case sensitive). To make a comparison case\nsensitive, set the **caseSensitive** property to true. For more details,\nsee the *caseSensitive* property in the *LiveCode Dictionary*.\n\n### Checking if text is True, False, a Number, an Integer, a Point, \n### a Rectangle, a Date or a Color\n\nUse the **is a** operator for checking whether the user has entered data\ncorrectly and for validating parameters before sending them to a\nhandler. The **is an** operator is equivalent to the **is a** operator.\n\nA value **is a**:\n- **boolean** if it is either true or false\n- **integer** if it consists of digits (with an optional leading minus \nsign)\n- **number** if it consists of digits, optional leading minus sign, \noptional decimal point, and optional \"E\" or \"e\" (scientific notation)\n- **point** if it consists of two numbers separated by a comma\n- **rect** if it consists of four numbers separated by commas\n- **date** if it is in one of the formats produced by the date or time \nfunctions\n- **color** if it is a valid color reference\n\nThe text you are checking can contain leading or trailing white space\ncharacters in all the types except boolean. For example:\n\n\t\" true\" is true -- evaluates to false\n\nThe **is a** operator is the logical inverse of the **is not a**\noperator. When one is true, the other is false.\n\n\t\"1/16/98\" is a date -- evaluates to true\n\t1 is a boolean -- evaluates to false\n\t45.4 is an integer -- evaluates to false\n\t\"red\" is a color -- evaluates to true\n\n> **Tip:** To restrict a user to typing numbers in a field, use the\n> following script\n\n\ton keyDown pKey\n\t\tif pKey is a number then pass keyDown\n\tend keyDown\n\nThe **keyDown** message will only be passed if the key the user pressed\nis a number. If you trap a **keyDown** message and don’t pass it, the\nkey will not be entered into the field. For more details, see the\n**keyDown** message in the *LiveCode Dictionary*.\n\n### Check if a segment, Item or Line Matches Exactly\n\nThe **is among** operator tells you whether a whole chunk exists exactly\nwithin in a larger container. For example, to find out whether the whole\nsegment \"free\" is contained within a larger string, use the **is among**\noperator:\n\n\t\"free\" is among the segments of \"Live free or die\" -- true\n\t\"free\" is among the segments of \"Unfree world\" -- false\n\nThe second example evaluates to false because, although the string\n\"free\" is found in the value, it's a portion of a larger segment, not an\nentire segment.\n\n### Check if one String Starts or Ends With Another\n\nTo check if one string begins with or ends with another, use the\n**begins with** or **ends with** binary operators. For example:\n\n\t“foobar” begins with “foo” -- true\n\t“foobar” ends with “bar” -- true\n\tline 5 of tList begins with \"the\"\n\n### Replacing Text\n\nTo replace one string with another, use the **replace** command. (If you\nwant the search string to contain a regular expression, see the section\non the *replaceText command* below instead.)\n\n\treplace \"A\" with \"N\" in thisVariable -- changes A to N\n\nTo delete text using replace, replace a string with the empty constant.\n\n\treplace return with empty in field 1 -- runs lines together\n\nTo preserve styling when replacing one string with another in a field, use the `preserving styles` clause.\n        replace \"foo\" with \"bar\" in field \"myStyledField\" preserving styles\n        -- replaces instances of \"foo\" with \"bar\" in the given field,\n        --   \"bar\" will retain the styling of instances of \"foo\"\n        \nFor more details, see the *replace command* and the *replace in field command* in the \n*LiveCode Dictionary*.\n\n### Retrieving the Position of a Matching Chunk\n\nThe **offset**, **itemOffset**, **tokenOffset**, **trueWordOffset**,\n**segmentOffset**, **lineOffset**, **sentenceOffset** and\n**paragraphOffset** functions can be used to locate the position chunks\nwithin a larger container. For example, this expression returns the\ncharacter number where the letter \"C\" was found:\n\n\tget offset(\"C\",\"ABC\") -- returns 3\n\nTo check if an item, line or word matches *exactly* using offset, set\nthe **wholeMatches** property to true.\n\n### Chunks Summary\n\nA chunk expression describes the location of a piece of text in a longer\nstring.\n\nChunk expressions can describe **characters**, **items**, **tokens**, \n**trueWords**, **segments**, **lines**, **sentences** and **paragraphs**\nof text.\n\nTo count backward from the end of a string, use negative numbers. For\nexample, \n\n\tsegment -2  -- indicates the second-to-last segment\n\nYou can combine chunk expressions to specify one chunk that is contained\nin another chunk, as in \n\n\tsegment 2 of line 3 of myVariable\n\nFor a range of chunks, specify the start and end points of the range, as\nin \n\tline 2 to 5 of myVariable\n\nTo check if a chunk is within another, use the **is in** operator. To\ncheck if a chunk **is a** specified type of data, use the **is a**\noperator. To check if a chunk starts or ends with another uses the\n**begins with** or ends with operators.\n\nTo check if a chunk is contained exactly within a string use the \n**is among** operator. To get an index specifying where a chunk can be\nfound in a container, use the **\\<chunk\\>Offset** functions described\nabove. To match only a complete chunk within a string, set the\nwholeMatches to true before using the offset functions.\n\n## Regular Expressions\n\nRegular expressions allow you to check if a *pattern* is contained\nwithin a string. Use regular expressions when one of the search or\ncomparison chunk expressions does not do what you need (see the section\non *Comparing and Searching* above).\n\nLiveCode supports searching for a pattern, replacing a pattern, or\nfiltering the lines in a container depending on whether or not each line\ncontains the pattern. Regular expressions use PERL compatible or \"PCRE\"\nsyntax. Figure 52, below, shows the supported syntax. For more details\non the supported syntax, see the \n[PCRE manual](<http://www.pcre.org/man.txt>)\n\n### Searching using a Regular Expression\n\nUse the **matchText** function to check whether a string contains a\nspecified pattern.\n\n\tmatchText(string,regularExpression[,foundTextVarsList])\n\nThe *string* is any expression that evaluates to a string.\n\nThe *regularExpression* is any expression that evaluates to a regular\nexpression.\n\nThe optional *foundTextVarsList* consists of one or more names of\nexisting variables, separated by commas.\n\n\tmatchText(\"Goodbye\",\"bye\") -- returns true\n\tmatchText(\"Goodbye\",\"^Good\") -- also returns true\n\tmatchText(phoneNumber,\"([0-9]+)-([0-9]+-[0-9]+)\",areaCode,phone)\n\nFor more details on this function see the *matchText* function in the \n*LiveCode Dictionary*.\n\nIf you need to retrieve the positions of the matched substrings in the\noptional *foundTextVarsList*, use the *matchChunk* function instead of\nthe *matchText* function. These functions are otherwise identical.\n\n### Replacing using a Regular Expression\n\nUse the **replaceText** function to search for a regular expression and\nreplace the portions that match. If you simply want to replace text\nwithout using a regular expression, see the **replace** command instead.\n\n\treplaceText(stringToChange,matchExpression,replacementString)\n\nThe *stringToChange* is any expression that evaluates to a string.\n\nThe *matchExpression* is a regular expression.\n\nThe *replacementString* is any expression that evaluates to a string.\n\n\treplaceText(\"malformed\",\"mal\",\"well\")--returns \"wellformed\"\n\treplaceText(field \"Stats\",return,comma)-- makes comma-delimited\n\nFor more details, see the *replaceText* function in the \n*LiveCode Dictionary*.\n\n| Regex | Rule | Example |\n|-------------------------|----------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------|\n| **[chars]**             | matches any one of the characters inside the brackets                                                                                  | A[BCD]E matches \"ACE\", but not \"AFE\" or \"AB\"                   |\n| **[^chars]**            | matches any single character that is not inside the brackets                                                                           | [^ABC]D matches \"FD\" or \"ZD\", but not \"AD\" or \"CD\"             |\n| **[char-char]**         | matches the range from the first char to the second char. The first char’s ASCII value must be less than the second char’s ASCII value | A[B-D] matches \"AB\" or \"AC\", but not \"AG\"<br><br>[A-Z0-9] matches any alphanumeric character |\n| **.**                   | matches any single character (except a linefeed)                                                                                       | A.C matches \"ABC\" or \"AGC\", but not \"AC\" or \"ABDC\"             |\n| **^**                   | matches the following character at the beginning of the string                                                                         | ^A matches \"ABC\" but not \"CAB\"                                 |\n| **$**                   | matches the preceding character at the end of a string                                                                                 | B$ matches \"CAB\" but not \"BBC\"                                 |\n| **`*`**                 | matches zero or more occurrences of the preceding character or pattern                                                                 | ZA\\*B matches \"ZB\" or \"ZAB\" or \"ZAAB\", but not \"ZXA\" or \"AB\" <br><br> [A-D]\\*G matches \"AG\" or \"G\" or \"CAG\", but not \"AB\"             |\n| **+**                   | matches one or more occurrences of the preceding character or pattern                                                                  | ZA+B matches \"ZAB\" or \"ZAAB\", but not \"ZB\" <br><br>[A-D]+G matches \"AG\" or \"CAG\", but not \"G\" or \"AB\"              |\n| **?**                   | matches zero or one occurrences of the preceding character or pattern                                                                  | ZA?B matches \"ZB\" or \"ZAB\", but not \"ZAAB\"<br><br>[A-D]?G matches \"AG\" or \"CAGZ\", but not \"G\" or \"AB\"             |\n| **\\|**                   | matches either the pattern before or the pattern after the \\|.                                                                          | A\\|B matches \"A\" or \"B\" <br><br>[ABC]\\|[XYZ] matches \"AY\" or \"CX\", but not \"AA\" or \"ZB\".         |\n| **\\\\**                  | Causes the following character to be matched literally, even if it has special meaning in a regular expression                         | A\\\\.C matches \"A.C\", but not \"A\\\\.C\" or \"ABC\"\\\\\\\\ matches \"\\\\\" |\n| **any other character** | matches itself                                                                                                                         | ABC matches \"ABC\"                                              |\n\nFigure 50 – Regular Expression Syntax\n\n### Filtering using a Wildcard Expression\n\nUse the **filter** command to remove lines in a container that either\ndo, or do not match a specified wildcard expression. Wildcard\nexpressions are similar to regular expressions.\n\n\tfilter container {with | without} wildcardExpression\n\nThe *container* is any expression that evaluates to a container.\n\nThe *wildcardExpression* is a pattern used to match certain lines.\n\n\tfilter myVariable with \"A?2\"\n\tfilter me without \"\\*[a-zA-Z]\\*\"\n\nFor more details, including the format of wildcard expressions, see the \n*filter command* in the *LiveCode Dictionary*.\n\n## International Text Support\n\nAll LiveCode's text processing capabilities extend seamlessly to\ninternational text. This includes the ability to render and edit Unicode\ntext and convert between various encoding types.\n\n### What are Text Encodings?\n\nFundamentally computers use numbers to store information, converting\nthose numbers to text to be displayed on the screen. A text encoding\ndescribes which number converts to a given character. There are many\ndifferent encoding systems for different languages. Below is a table\ncontaining examples of some common encodings.\n\n| Encoding | Representation | Description |\n|------------------|-----------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **ASCII**        | Single byte – English | ASCII is a 7-bit encoding, using one byte per character. It includes the full Roman alphabet, Arabic numerals, Western punctuation and control characters. See <http://en.wikipedia.org/wiki/ASCII> for more information.                                                                                                                                                                                                                         |\n| **ISO8859**      | Single byte           | ISO8859 is a collection of 10 encodings. They are all 8-bit, using one byte per character. Each shares the first 128 ASCII characters. The upper 80 characters change depending on the language to be displayed. For example ISO8859-1 is used in Western Europe, whereas ISO8859-5 is used for Cyrillic. **NB:** LiveCode only supports ISO8859-1. You should use Unicode to represent other languages, converting if necessary (see below).     |\n| **Windows-1252** | Single byte – English | This is a superset of ISO8859-1 which uses the remaining 48 characters not used in the ISO character set to display characters on Windows systems. For example curly quotes are contained within this range.                                                                                                                                                                                                                                      |\n| **MacRoman**     | Single byte – English | MacRoman is a superset of ASCII. The first 128 characters are the same. The upper 128 characters are entirely rearranged and bear no relation to either Windows-1252 or ISO8859-1. However while many of the symbols are in different positions many are equivalent so it is possible to convert between the two.                                                                                                                                 |\n| **UTF-16**       | Double byte – Any     | UTF-16 typically uses two bytes per code point (character) to display text in all the world’s languages (see *Introduction to Unicode*, below). UTF-16 will take more memory per character than a single-byte encoding and so is less efficient for displaying English.                                                                                                                                                                           |\n| **UTF-8**        | Multi-byte - Any      | UTF-8 is a multi-byte encoding. It has the advantage that ASCII is preserved. When displaying other languages, UTF-8 combines together multiple bytes to define each code point (character). The efficiency of UTF-8 depends on the language you are trying to display. If you are displaying Western European it will take (on average) 1.3 bytes per character, for Russian 2 bytes (equivalent to UTF-16) but for CJK 3-4 bytes per character. |\n\nFigure 51 – Common text encodings\n\n### What are scripts?\n\nA script is a way of writing a language. It takes the encoding of a\nlanguage and combines it with its alphabet to render it on screen as a\nsequence of glyphs. The same language can sometimes be written with more\nthan one script (common among languages in India). Scripts can often be\nused to write more than one language (common among European languages).\n\nScripts can be grouped together into four approximate classes. The\n\"small\" script class contains a small alphabet with a small set of\nglyphs to represent each single character. The \"large\" script class\ncontains a large alphabet and with a larger set of glyphs. The\n\"contextual\" script class contains characters that can change appearance\ndepending on their context. And finally the \"complex\" script class\ncontains characters that are a complex function of the context of the\ncharacter – there isn’t a 1 to 1 mapping between code point and glyph.\n\n| &nbsp;| &nbsp;| &nbsp;|\n|----------------|-------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **Roman**      | Small script      | The Roman encoding has relatively few distinct characters. Each character has a single way of being written. It is written from left to right, top to bottom. Every character has a unique glyph. Characters do not join when written. For example: The quick brown fox.     |\n| **Chinese**    | Large script      | The Chinese encoding has a large number of distinct characters. Each character has a single way of being written.                                                                                                                                                            |\n| **Greek**      | Contextual script | Every character except sigma has a unique glyph. Sigma changes depending on whether it is at the end of a word or not. Characters do not join when written. The text runs left to right, top to bottom. For example: δῖος Ἀχιλλεύς\t\t\t\t\t                            |\n| **Arabic**     | Contextual script | The glyph chosen is dependent on its position in a word. All characters have initial, medial and terminal glyphs. This results in a calligraphic (joined up) style of display. The text runs right to left, top to bottom display. For example: العربية |\n| **Devanagari** | Complex script    | In this script there is no direct mapping from character to glyph. Sequences of glyphs combine depending on their context. The text runs from left to right, top to bottom.                                                                                                  |\n\nFigure 52 – Common scripts\n\n### Introduction to Unicode\n\nTraditionally, computer systems have stored text as 8-bit bytes, with\neach byte representing a single character (for example, the letter 'A'\nmight be stored as 65). This has the advantage of being very simple and\nspace efficient whilst providing enough (256) different values to\nrepresent all the symbols that might be provided on a typewriter. The\nflaw in this scheme becomes obvious fairly quickly: there are far more\nthan 256 different characters in use in all the writing systems of the\nworld, especially when East Asian ideographic languages are considered.\nBut, in the pre-internet days, this was not a big problem.\n\nLiveCode, as a product first created before the rise of the internet,\nalso adopted the 8-bit character sets of the platforms it ran on (which\nalso meant that each platform used a different character set: MacRoman\non Apple devices, CP1252 on Windows and ISO-8859-1 on Linux and\nSolaris). LiveCode terms these character encodings \"native\" encodings.\n\nIn order to overcome the limitations of 8-bit character sets, the\nUnicode Consortium was formed. This group aims to assign a unique\nnumerical value (\"codepoint\") to each symbol used in every written\nlanguage in use (and in a number that are no longer used!).\nUnfortunately, this means that a single byte cannot represent any\npossible character.\n\nThe solution to this is to use multiple bytes to encode Unicode\ncharacters and there are a number of schemes for doing so. Some of these\nschemes can be quite complex, requiring a varying number of bytes for\neach character, depending on its codepoint.\n\nLiveCode previously added support for the UTF-16 encoding for text\nstored in fields but this could be cumbersome to manipulate as the\nvariable-length aspects of it were not handled transparently and it\ncould only be used in limited contexts. Unicode could not be used in\ncontrol names, directly in scripts or in many other places where it\nmight be useful.\n\nFrom LiveCode 7.0, the LiveCode engine has been able to handle Unicode\ntext transparently throughout. The standard text manipulation operations\nwork on Unicode text without any additional effort on your part; Unicode\ntext can now be used to name controls, stacks and other objects; menus\ncontaining Unicode selections no longer require tags to be usable -\nanywhere text is used, Unicode should work.\n\n### Creating Unicode Apps\n\nCreating stacks that support Unicode is no more difficult than creating\nany other stack but there are a few things that should be borne in mind\nwhen developing with Unicode. The most important of these is the\ndifference between text and binary data - in previous versions of\nLiveCode, these could be used interchangeably; doing this with Unicode\nmay not work as you expect (but it will continue to work for non-\nUnicode text).\n\nWhen text is treated as binary data (i.e when it is written to a file,\nprocess, socket or other object outside of the LiveCode engine) it will\nlose its Unicode-ness: it will automatically be converted into the\nplatform's 8-bit native character set and any Unicode characters that\ncannot be correctly represented will be converted into question mark '?'\ncharacters.\n\nSimilarly, treating binary data as text will interpret it as native text\nand won't support Unicode. To avoid this loss of data, text should be\nexplicitly encoded into binary data and decoded from binary data at\nthese boundaries - this is done using the textEncode and textDecode\nfunctions (or its equivalents, such as opening a file using a specific\nencoding).\n\nUnfortunately, the correct text encoding depends on the other programs\nthat will be processing your data and cannot be automatically detected\nby the LiveCode engine. If in doubt, UTF-8 is often a good choice as it\nis widely supported by a number of text processing tools and is\nsometimes considered to be the \"default\" Unicode encoding.\n\n### Things to look out for\n\n- When dealing with binary data, you should use the byte chunk \nexpression rather than char - char is intended for use with textual data \nand represents a single graphical character rather than an 8-bit unit.\n- Try to avoid hard-coding assumptions based on your native language - \nthe formatting of numbers or the correct direction for text layout, for \nexample. LiveCode provides utilities to assist you with this.\n- Regardless of visual direction, text in LiveCode is always in logical \norder - word 1 is always the first word; it does not depend on whether \nit appears at the left or the right.\n- Even English text can contain Unicode characters - curly quotation \nmarks, long and short dashes, accents on loanwords, currency symbols...\n\n## Using Arrays\n\nFor an introduction to arrays, see the section on *Array Variables* in\nthe chapter *Coding in LiveCode*.\n\n### When to Use Arrays\n\nEach element in an array can be accessed in constant time. This compares\nfavorably with other functions that become look up information by\ncounting through a variable from the beginning (for example the offset\nfunctions). If you consider a problem that requires the computer to\nsearch through the data several times then if the computer has to start\nat the beginning of the variable, the search will get slower and slower\nas the search function gets further through the data.\n\nEach element in an array can contain data of any length, making it\neasier to group together records that contain assorted lengths or\ndelimiter characters.\n\nArrays can contain nested elements. This makes them ideal for\nrepresenting complex data structures such as trees and XML data that\nwould be hard to represent as a flat structure.\n\nEach sub-array in an array can be accessed and operated on\nindependently. This makes it possible to copy a sub-array to another\narray, get the keys of a sub-array, or pass a sub-array as a parameter\nin a function call.\n\nLiveCode includes various functions for converting information to and\nfrom arrays, and for performing operations on the contents of arrays.\n\nThese characteristics make arrays useful for a number of data processing\ntasks, including tasks that involve processing or comparing large\namounts of data. For example, arrays are ideal if you want to count the\nnumber of instances of a specific word in a piece of text. It would be\npossible to implement such a word count by iterating through each word\nand checking if it is present in a list of words, then adding a comma\nfollowed by a count to that list of words. Such a method is cumbersome\nto implement and as the list of words gets longer the routine will slow\ndown because LiveCode has to search the list from the start with each\nnew word. Conversely, implementation with an array is simple. Because\neach element in an array can be named using a text string, we can create\nan element for each word and add to the element’s contents. Not only is\nthe code much shorter but it is also an order of magnitude faster.\n\n\ton mouseUp\n\t\t--cycle through each word adding each instance to an array\n\t\trepeat for each word tWord in field \"sample text\"\n\t\t\tadd 1 to tWordCount[tWord]\n\t\tend repeat\n\t\t-- combine the array into text\n\t\tcombine tWordCount using return and comma\n\t\tanswer tWordCount\n\tend mouseUp\n\n| Text in field \"Sample Text:| Resulting value of tWordCount: |  \n|-----------------------------------------------------|------------------------------------|\n| Single Line – execute single line and short scripts | Global,4 |                                                      \n| Multiple Lines – execute multiple line scripts | Line,3 |                                                            \n| Global Properties – view and edit global properties | Lines,1 |                                                        \n| Global Variables – view and edit global variables | Multiple,2 |\n|\t\t\t\t\t\t\t\t\t\t\t\t\t| Properties,2 |\n|\t\t\t\t\t\t\t\t\t\t\t\t\t| Single,2 |\n|\t\t\t\t\t\t\t\t\t\t\t\t\t| Variables,2 |\n|\t\t\t\t\t\t\t\t\t\t\t\t\t| and,3 |\n|\t\t\t\t\t\t\t\t\t\t\t\t\t| edit,2 |\n|\t\t\t\t\t\t\t\t\t\t\t\t\t| execute,2 |\n|\t\t\t\t\t\t\t\t\t\t\t\t\t| scripts,2 |\n|\t\t\t\t\t\t\t\t\t\t\t\t\t| short,1 |\n|\t\t\t\t\t\t\t\t\t\t\t\t\t| view,2 |\n|\t\t\t\t\t\t\t\t\t\t\t\t\t| -,4 |\n\nFigure 53 – Results of running word count script\n\n### Array Functions in LiveCode\n\nThe following is a list of all the syntax in LiveCode that works with\narrays. For a full description of each one, see the corresponding entry\nin the LiveCode Dictionary.\n\nEach of these functions can be used on subarrays within an array.\nInstead of referring to the array variable, refer to x[x]\n\n- **add** adds a value to every element in an array where the element is \na number\n- **combine** converts an array into text, placing delimiters you \nspecify between the elements\n-**customProperties** returns an array of the custom properties of an \nobject\n- **delete variable** remove an element from an array\n- **divide** divides each element in an array where the element is a \nnumber. For example:\n\n\tdivide tArray by 3\n\n| Contents of array: | Resulting value of tWordCount: |\n|------------------------|------------------------------------|                     \n| A = 1 | 0.333333 |                                        \n| B = 2 | 0.666667 |                                         \n| C = 3 | 1 |                                         \n| D = 4 | 1.333333 |                                           \n| E = 5 | 1.666667 | \n\nFigure 54 – Results of running the divide command on an array \n\n- **element** keyword is used in a repeat loop to loop through every \nelement in an array\n- **extents** finds the minimum and maximum row and column numbers of an \narray whose keys are integers\n- **intersect** compares arrays, removing elements from one array if \nthey have no corresponding element in the other\n- **keys** returns a list of all the elements within an array\n- **matrixMultiply** performs a matrix multiplication on two arrays \nwhose elements are numbers and whose keys are sequential numbers\n- **multiply** multiplies a value in every element in an array where the \nelement is a number\n- **properties** returns an array of the properties of an object\n- **split** convert text to an array using delimiters that you define\n- **sum** - returns the sum total of all the elements in an array where \nthe element is a number\n- **transpose** swaps the order of the keys in each element in an array \nwhose elements are numbers and whose keys are sequential numbers\n- **union** combines two arrays, eliminating duplicate elements\n\n## Encoding and Decoding\n\nLiveCode includes a number of built-in functions for encoding and \ndecoding data in a variety of popular formats.\n\n### Styled Text\n\nLiveCode supports encoding and decoding styled text as HTML and RTF.\nThis feature is useful when you want to adjust text styles\nprogrammatically, or import or export text with style information.\n\n> **Important:** At present HTML conversion support only extends to the\n> styles that the LiveCode field object is capable of rendering.\n\nTo convert the contents of a field to HTML compatible tags, use the\n**HTMLText** property. This property is documented in detail in the\nLiveCode Dictionary. You can also set this property to display styled\ntext in a field.\n\n> **Tip:** You can get and set the HTMLText property of a chunk within a\n> field, allowing you to view or change text attributes on a section of\n> the text. \n\nFor example, to set the text style of line 2 of a field to bold:\n\n\ton mouseUp\n\t\tput the htmltext of line 2 of field \"sample text\" into tText`\n\t\treplace \"\\<p\\>\" with \"\\<p\\>\\<b\\>\" in tText\n\t\treplace \"\\</p\\>\" with \"\\</b\\>\\</p\\>\\>\" in tText\n\t\tset the htmltext of line 2 of field \"sample text\" to tText`\n\tend mouseUp\n\nWhile this is not as simple as directly applying the style to the text \nusing:\n\n\tset the textStyle of line 2 of field \"sample\" to \"bold\"\n\nIt does allow you to search and replace text styles or perform multiple\ncomplex changes to the text based on pattern matching. Performing a\nseries of changes on the HTMLText in a variable then setting the text of\na field once can be quicker than updating the style repeatedly directly\non the field.\n\nUse the **HTML** keyword with the *Drag and Drop* features and the\n*Clipboard* features to perform conversion of data to and from HTML when\nexchanging data with other applications. For more information see the\nsection on *Drag and Drop* in the *Programming a User Interface* guide.\n\nUse the **RTFText** property and **RTF** keyword to work with the RTF\nformat.\n\nUse the **unicodeText** property and **Unicode** keyword to work with\nUnicode. For more information see the section on *International Text\nSupport*, above.\n\n### URLs\n\nTo encode and decode URLs, use the **URLEncode** and **URLDecode**\nfunctions. The **URLEncode** function will make text safe to use with a\nURL – for example it will replace *space* with *+*. These functions are\nparticularly useful if you are posting data to a web form using the\n**POST** command, using the **launch URL** command or sending email\nusing the **revMail** function. For more information see the *LiveCode\nDictionary*.\n\n| **Text:**                    | **URL Encoded result:**              |\n|------------------------------|--------------------------------------|                              \n| \"Jo Bloggs\" \\<jo@blogs.com\\> |%22Jo+Bloggs%22+%3Cjo%40blogs.com%3E  |                                      \nFigure 55 – Results of encoding a URL\n\n### Binary Data – Base64 (for MIME Email Attachments and Http Transfers)\n\nTo encode and decode data in Base64 (e.g. to create an email\nattachment), use the **base64Encode** and **base64Decode** functions.\nThese functions are useful anywhere you want to convert binary data to\ntext data and back. For more information see the *LiveCode Dictionary*.\n\n### Binary Data – Arbitrary Types\n\nUse the **binaryEncode** and **binaryDecode** functions to encode or\ndecode binary data. These functions are documented in detail in the\n*LiveCode Dictionary*.\n\n### Character to Number conversion\n\nTo convert a character to and from its corresponding ASCII value use the\n**charToNum** and **numToChar** functions.\n\n\tput charToNum(\"a\") -- results in 97\n\nTo convert Unicode characters, set the **useUnicode** local property to\ntrue. For more information see the section on \n*International Text Support*, above.\n\n### Data Compression\n\nTo compress and decompress data using GZIP, use the **compress** and\n**decompress** functions.\n\nThe following routine asks the user to select a file, then creates a\nGZip compressed version with a \".gz\" extension in the same directory as\nthe original.\n\n\ton mouseUp\n\t\tanswer file \"Select a file:\"\n\t\tif it is empty then exit mouseUp\n\t\tput it & \".gz\" into tFileCompressed\n\t\tput compress(URL (\"binfile:\" & it)) into URL (\"binfile:\" & tFileCompressed)\n\tend mouseUp\n\n### Encryption\n\nTo encrypt or decrypt data use the **encrypt** and **decrypt** commands.\nThese commands are documented in the LiveCode Dictionary.\n\n### Generating a Checksum\n\nUse the **MD5Digest** to generate a digest of some data. Use this\nfunction later to determine if the data was changed or to check that\ntransmission of information was complete.\n\n> **Tip:** In this example we save the MD5Digest of a field when the\n> user opens it for editing. In the field script place:\n\n\ton openField\n\t\tset the cDigest of me to md5Digest(the htmlText of me)\n\tend openField\n\nIf the field is modified (including if a text style is changed anywhere)\nthen a subsequent check of the MD5Digest will return a different result.\nIn the following example we check this digest to determine whether or\nnot to bring up a dialog alerting the user to save changes:\n\n\ton closeStackRequest\n\t\tlocal tDigest\n\t\tput md5Digest(the htmlText of field \"sample text\") into tDigest\n\t\tif the cDigest of field \"sample text\" is not tDigest then\n\t\t\tanswer \"Save changes before closing?\" with \"No\" or \"Yes\"\n\t\t\tif it is \"Yes\" then\n\t\t\t\tsave this stack\n\t\t\tend if\n\t\tend if\n\tend closeStackRequest\n\n## XML\n\nExtensible Markup Language, or XML, is a general-purpose language for\nexchanging structured data between different applications and across the\nInternet. It consists of text documents organized into a tree structure.\nIt can generally be understood by both human and machine.\n\nLiveCode includes comprehensive support for XML through its built-in XML\nlibrary. Additionally, standards exist to support exchange of XML over a\nnetwork connection (or \"web services\") – most notably through the\nXML-RPC and SOAP protocols. LiveCode includes a library for using\nXML-RPC and there are examples of using LiveCode to build SOAP\napplications available.\n\n### The XML Tree Structure\n\nXML is simply a data tree. It must start with a root node, be well\nformed and nested. Tags may not overlap. For more information on XML see\n<http://en.wikipedia.org/wiki/XML>\n\nFigure 52 below shows a typical XML tree. In this example we have\nrepresented a simple stack file as XML. The stack file has a single\nstack with two cards. On the first card there is a field named \"Hello\"\nwith the contents \"Hello World!\". There is a second card, which is blank.\n\n![XML Tree Representation of a Stack](images/text-xml_representation_stack.png)\n\n| &nbsp;| &nbsp;| &nbsp;|\n|----------------------|--------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **Root node**        | Root element, document element | The start of the XML document, which includes a declaration the file is XML, the version of XML in use and the text encoding                                        |\n| **Comment**          |                                | Comments can be placed anywhere in the tree. They start with \\<! and end with -\\>. They must not contain double dashes --                                           |\n| **Node**             | Element, tag                   | The items that makes up the content within an XML document                                                                                                          |\n| **Attributes**       |                                | Properties attributable to a given node. A node may have zero or more properties                                                                                    |\n| **Empty node**       | Empty element                  | A method of specifying that a node exists but is empty                                                                                                              |\n| **Entity reference** |                                | A method of specifying special characters. XML includes support for &, \\<, \\>, ‘ and \". Additional entities can be defined using a Document Type Definition or DTD. |\n\n### When to use XML\n\nXML has a number of advantages and disadvantages. It is predominantly\nuseful when exchanging data between different applications or systems.\nHowever like any method of data storage or transfer it is not suitable\nfor all types of application.\n\nThe advantages of XML are: it is text based making it more easily\nreadable by humans as well as just machines; it is self describing; it\nis based on international standards and in widespread use with a large\nnumber of editors available for it; the hierarchical structure makes it\nsuitable for representing many types of document; and it is platform\nindependent.\n\nThe disadvantages are that: it is sometimes less efficient than binary\nor even other forms of text representations of data; for simple\napplications it is more complicated than may strictly be necessary; and\nthe hierarchical model may not be suitable for all data types.\n\nYou may decide that using XML is the best solution for your particular\ndata storage or transmission requirements. Or you may be working on a\nproject with others where using XML or a web service based on it is a\nrequirement. However in many cases a binary format or database will be\nmore appropriate. You should give consideration to the method you intend\nto use as early as possible in the design of your application.\n\n### Methods for Handling XML in LiveCode\n\nLiveCode includes a comprehensive XML library for working with XML\ndocuments. Using the XML library has the advantage that we include\nsyntax and functions for performing the common operations on XML that\nyou may need. However the disadvantage is that at present the library is\nimplemented as an external command (included built-in to the LiveCode\ndistribution) and thus does not benefit from native LiveCode-engine\nsyntax. If you have simple XML processing requirements you may prefer to\nuse LiveCode’s built in chunk expression support to do the parsing,\nmatching or construction of XML. For more information see the section on\n*Using Chunk Expressions*. However if you are working with complex XML\nthen the library includes a comprehensive suite of features.\n\nIn addition to the XML library, LiveCode has a built-in script-based\nlibrary for working with XML-RPC.\n\n> **Tip:** To see a list of commands for working with XML-RPC, filter\n> the LiveCode Dictionary with the term XMLRPC.\n\nA lesson demonstrating using the LiveCode XML library is available\n[here](http://lessons.runrev.com/m/4071/l/7011-how-to-read-in-data-from-\nan-xml-file)\n\n### The XML Library: Loading, Displaying and Unloading XML\n\nThis section discusses using the XML library in detail.\n\n**Getting Started – Creating an XML Tree in Memory**\n\nIn order to work with an XML document, you start by creating an XML tree\nof that document in memory. There are two functions\n**revCreateXMLTreeFromFile** and **revCreateXMLTree**. Use the former to\nload XML document from a file and create a tree in memory, use the\nlatter to create an XML tree from another data source such as a\nvariable, field or download.\n\n\trevCreateXMLTree(XMLText, dontParseBadData, createTree, sendMessages)\n\trevCreateXMLTreeFromFile(filePath, dontParseBadData, createTree, sendMessages)\n\nIn **revCreateXMLTree** the *XMLText*is the string containing the XML.\nIn **revCreateXMLTreeFromFile** this parameter is replaced with the\n*filePath* – the file path to the XML document. Both functions return a\nsingle value – the ID of the tree that has been created.\n\n> **Important:** Both functions require you to specify all the\n> parameters. You must store the ID returned by these functions in order\n> to access the XML tree later in your script.\n\nThe dont*ParseBadData* specifies whether or not to attempt to parse\npoorly formed XML. If this is set to true then bad data will be rejected\nand generate an error instead of constructing the tree in memory.\n\nThe *createTree* specifies whether to create a tree in memory or not.\nYou will generally want this to be true, unless you are intending only\nto read in an XML file to determine whether or not it is properly\nstructured.\n\nThe *sendMessages* specifies whether or not messages should be sent when\nparsing the XML document. Messages can be useful if you want to\nimplement functionality such as a progress bar, progressively render or\nprogressively process data from a large XML file as it is being parsed.\nIf you set this to true, **revXMLStartTree** will be sent when the\nparsing starts, **revStartXMLNode** will be sent when a new node is\nencountered, **revEndXMLNode** will be sent when a node has been\ncompleted, **revStartXMLData** will be sent at the start of a new block\nof data and finally **revXMLEndTree** will be sent when processing is\nfinished.\n\n**Retrieving information from an XML tree**\n\nNow that you have created your XML tree in memory (above) and stored the\ntree ID you can use the functions in this section to retrieve\ninformation from within the tree.\n\n> **Important:** Any text you fetch using the LiveCode XML library will\n> be in the encoding specified in the root node of the XML tree.\n\n> **Note:** All the examples in this section assume that we have loaded\n> the XML tree depicted in the figure below – XML Tree Representation of a\n> Stack, above. We assume that you have loaded this tree using the\n> `revCreateXMLTree`function described above, and that this function has\n> returned a value of 1 as the ID of the tree.\n\n**Retrieving the Root Node**\n\nTo retrieve the *root node* from your XML tree, use the\n**revXMLRootNode** function.\n\n\trevXMLRootNode(treeID)\n\nThe *treeID* contains the ID of the XML tree you want to access. For\nexample, using the following function with sample tree depicted above:\n\n\tput revXMLRootNode(1) into tRootNode\n\nResults in *tVar* containing: *stackFile*\n\n**Retrieving the First Child Element in a Node**\n\nTo retrieve the first child element use **revXMLFirstChild**.\n\n\trevXMLFirstChild(treeID,parentNode)\n\nThe *parentNode* contains the path to the node we want to retrieve the\nfirst child from. Nodes are referenced using a file-path like format\nwith / used to denote the root and delimit nodes.\n\nWe can use this function on our sample XML as follows:\n\n\t-- pass the *stackFile* result in retrieved in tRootNode\n\t-- to the revXMLFirstChild function:\n\tput revXMLFirstChild(1,tRootNode) into tFirstChild\n\t-- EQUIVALENT to the following:\n\tput revXMLFirstChild(1,\"stackFile\") into tFirstChild\n\nThis results in *tFirstChild* containing: */stackFile/stack*\n\n**Retrieving a list of Children in a Node**\n\nTo retrieve a list of children of a node use **revXMLChildNames**.\n\n\trevXMLChildNames(treeID, startNode, nameDelim, childName,includeChildCount)\n\nThe *nameDelim* is the delimiter that separates each name that is\nreturned. To get a list of names, specify return.\n\nThe *childName* is the name of the type of children to list.\n\n*includeChildCount* allows you to include the number of each child in\nsquare brackets next to the name.\n\nWe can use this function on our sample XML as follows:\n\n\tput revXMLChildNames(1,\"/stackFile/stack\", return, \"card\", true) into tNamesList\n\nThis results in *tNamesList* containing:\n\n*card[1]*\n\n*card[2]*\n\n**Retrieving the Contents of the Children in a Node**\n\nTo retrieve a list of children of a node including their contents, use\n**revXMLChildContents**.\n\n\trevXMLChildContents(treeID,startNode,tagDelim,nodeDelim, includeChildCount,depth)\n\nSee above for an explanation of *treeID*, *startNode* and *tagDelim*.\n\nThe *nodeDelim* indicates the delimiter that separates the contents of\nthe node from its name.\n\nThe *depth* specifies the number of generations of children to include.\nIf you use –1 as the depth then all children are return.\n\nUsing this function on our example XML file as follows:\n\n\tput revXMLChildContents(1, \"/stackFile/stack\", space, return, true, -1) into tContents\n\nThis results in *tContents* containing:\n\n*card[1]*\n\n*field[1]*\n\n*text[1] Hello World!*\n\n*htmlText[1] \\<p\\>Hello World\\</p\\>*\n\n*card[2]*\n\n**Retrieving the Number of Children in a Node**\n\nTo retrieve the number of children of a node **revXMLNumberOfChildren**.\n\n\trevXMLNumberOfChildren(treeID,startNode,childName,depth)\n\nSee above for an explanation of *treeID*, *startNode, childName* and\n*depth*.\n\nUsing this function on our example XML file as follows:\n\n\tput revXMLNumberOfChildren(1, \"/stackFile/stack\", \"card\", -1)into tContents\n\nThis results in *tContents* containing: *2*\n\n**Retrieving the Parent of a Node**\n\nTo retrieve a node’s parent use the **revXMLParent** function.\n\n\trevXMLParent(treeID,childNode)\n\nSee above for an explanation of *treeID* and *startNode*.\n\nUsing this function on our example XML file as follows:\n\n\tput revXMLParent(1,\"stackFile/stack\") into tParent\n\nResults in *tParent* containing: */stackFile*\n\n**Retrieving an Attributes from a Node**\n\nTo retrieve an attribute from a node use **revXMLAttribute**.\n\n\trevXMLAttribute(treeID,node,attributeName)\n\nSee above for an explanation of *treeID* and *node*.\n\nThe *attributeName* is the name of the attribute you want to retrieve\nthe value for.\n\nUsing this function on our example XML file as follows:\n\n\tput revXMLAttribute(1,\"/stackFile/stack\",\"rect\") into tRect\n\nThis results in *tRect* containing: *117,109,517,509*\n\n**Retrieving all Attributes from a Node**\n\nTo retrieve all attributes from a node use **revXMLAttributes**.\n\n\trevXMLAttributes(treeID,node,valueDelim,attributeDelim)\n\nSee above for an explanation of *treeID* and *node*.\n\nThe *valueDelim* is delimiter that separates the attribute’s name from\nits value.\n\nThe *attributeDelim* is delimiter that separates the attribute’s name &\nvalue pair from each other.\n\nUsing this function on our example XML file as follows:\n\n\tput revXMLAttributes(1, \"/stackFile/stack/card/field\", tab, return) into tFieldAttributes\n\nThis results in *tFieldAttributes* containing:\n\nname Hello\n\nrect 100,100,200,125\n\n**Retrieving the Contents of Attributes**\n\nTo retrieve the contents of a specified attribute from a node and its\nchildren, use **revXMLAttributeValues**.\n\n\trevXMLAttributeValues(treeID, startNode, childName, attributeName, delimiter, depth)\n\nSee above for an explanation of *treeID*, *startNode* and *depth*.\n\nThe *childName* is the name of the type of child to be searched. Leave\nthis blank to include all types of children.\n\nThe *attributeName* is the name of the attribute to return the values\nfor.\n\nThe *delimiter* is the delimiter to be used to separate the values\nreturned.\n\nUsing this function on our example XML file as follows:\n\n\tput revXMLAttributeValues(1, \"/stackFile/\", , \"rect\", return, -1) into tRectsList\n\nThis results in *tRectsList* containing:\n\n117,109,517,509\n\n100,100,200,125\n\n**Retrieving the Contents of a Node**\n\nTo retrieve the contents of a specified node, use \n**revXMLNodeContents**.\n\n\trevXMLNodeContents(treeID, node)\n\nSee above for an explanation of *treeID* and *node*.\n\nUsing this function on our example XML file as follows:\n\n\tput revXMLNodeContents(1, \"/stackFile/stack/card/field/htmlText\") into tFieldContents\n\nThis results in *tFieldContents* containing:\n\n\\<p\\>Hello World\\</p\\>\n\nThe entity references for the \\< and \\> symbols have been translated\ninto text in this result.\n\n**Retrieving Siblings**\n\nTo retrieve the contents of the siblings of a node, use\n**revXMLNextSibling** and **revXMLPreviousSibling**.\n\n\trevXMLNextSibling(treeID,siblingNode)\n\trevXMLPreviousSibling(treeID,siblingNode)\n\nThe *siblingNode* is the path to the node to retrieve the siblings from.\n\nUsing this function on our example XML file as follows:\n\n\tput revXMLPreviousSibling(1, \"/stackFile/stack/card[2]\") into tPrev\n\tput revXMLNextSibling(1, \"/stackFile/stack/card\") into tNext\n\nThis results in *tPrev* containing:\n\n/stackFile/stack/card[1]\n\nAnd *tNext* containing:\n\n/stackFile/stack/card[2]\n\n**Searching for a Node**\n\nTo search for a node based on an attribute, use **revXMLMatchingNode**.\n\n\trevXMLMatchingNode(treeID, startNode, childName, \\\\ attributeName, attributeValue, depth, [caseSensitive])\n\nSee above for an explanation of *treeID*, *startNode* and *depth*.\n\nThe *childName* is the name of the children you want to include in the\nsearch. If you leave this blank all children are searched.\n\nThe *attributeName* is the name of the attribute you want to search.\n\n*attributeValue* is the search term you want to match.\n\n*caseSensitive optionally* specifies whether the search should be case\nsensitive. The default is false.\n\nUsing this function on our example XML file as follows:\n\n\tput revXMLMatchingNode(106,\"/\", ,\"name\", \"Hello\", -1) into tMatch\n\nThis results in *tMatch* containing:\n\n/stackFile/stack/card[1]/field\n\n**Retrieving an Outline of the Tree (or Portion Thereof)**\n\nTo retrieve the contents of a specified node, use **revXMLTree**.\n\n\trevXMLTree(treeID, startNode, nodeDelim, padding, includeChildCount, depth)\n\nSee above for an explanation of *treeID*, *startNode, includeChildCount*\nand *depth*.\n\nThe *nodeDelim* is the delimiter that separates each node in the tree.\nUse return to retrieve a list of nodes.\n\n*padding* is the character to use to indent each level in the tree.\n\nUsing this function on our example XML file as follows:\n\n\tput revXMLTree(106,\"/\",return,space,true,-1) into tTree\n\nThis results in *tTree* containing:\n\nstackFile[1]\n\nstack[1]\n\ncard[1]\n\nfield[1]\n\ntext[1]\n\nhtmlText[1]\n\ncard[2]\n\n**Retrieving the Tree as XML (or Portion Thereof)**\n\nTo retrieve the tree as XML use **revXMLText**. Use this function to\nsave the XML to a file after modifying it.\n\n\trevXMLText(treeID, startNode, [formatTree])\n\nSee above for an explanation of *treeID* and *startNode*.\n\nThe *formatTree* specifies whether or not to format the returned tree\nwith return and space characters to make it easier to read by a human.\n\nUsing this function on our example XML file as follows:\n\n\task file \"Save XML as:\"\n\tput revXMLText(106,\"/\",true) into URL (\"file:\" & it)\n\nThis results in the file the *user specifies* containing:\n\n\t<stackFile>\n\n\t<stack name=\"Example\" rect=\"117,109,517,509\">\n\n\t<card>\n\n\t<field name=\"Hello\" rect=\"100,100,200,125\">\n\n\t<text>Hello World!</text>\n\n\t<htmlText>&lt;&gt;Hello World&lt;/p&gt;</htmlText>\n\n\t</field>\n\n\t</card>\n\n\t</stack>\n\n\t</stackFile>\n\n**Validating against a DTD**\n\nTo check the syntax of an XML file conforms to a DTD use\n**revXMLValidateDTD**. For more information on this function, see the\n*LiveCode Dictionary*.\n\n**Listing all XML Trees in Memory**\n\nTo generate a list of all XML trees in memory, use **revXMLTrees**. For\nmore information on this function, see the *LiveCode Dictionary*.\n\n**Removing an XML Tree from Memory**\n\nTo remove an XML tree from memory, use **revDeleteXMLTree**. To remove\nall XML trees from memory, use **revDeleteAllXMLTrees**. Both functions\ntake a single parameter – the ID of the tree to be deleted. You should\ndelete a tree when you have stopped using it. For more information on\nthese functions, see the *LiveCode Dictionary*.\n\nOnce an XML tree has been removed from memory, there is no way to get it\nback. Use the revXMLText function to retrieve the contents of the entire\ntree and save it first.\n\n### The XML Library: Editing XML\n\nThis section discusses how to edit XML trees. Before reading this\nsection you should read the section above on loading, displaying and\nunloading XML.\n\n**Adding a new Child Node**\n\nTo add a new node use the **revAddXMLNode** command.\n\n\trevAddXMLNode treeID, parentNode, nodeName, nodeContents, [location]\n\n\nSee above for an explanation of *treeID*.\n\nThe *parentNode* is the name of the node you want to add the child to.\n\nThe *nodeName* is the name of the new node to create.\n\n*nodeContents* is the contents of the new node.\n\n*location* - optionally specify \"before\" to place the new child at the\nstart of the child nodes.\n\nUse this function to add a button to our example XML file as follows:\n\n\trevAddXMLNode 1, \"/stackFile/stack/card/\", \"button\", \"\"\n\nThis results in our tree containing a new button:\n\n\t<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n\t<!-- This is a comment. -->\n\n\t<stackFile>\n\n\t<stack name=\"Example\" rect=\"117,109,517,509\">\n\n\t<card>\n\n\t<field name=\"Hello\" rect=\"100,100,200,125\">\n\n\t<text>Hello World!</text>\n\n\t<htmlText>&lt;p&gt;Hello World&lt;/p&gt;</htmlText>\n\n\t</field>\n\n\t<button></button>\n\n\t</card>\n\n\t</stack>\n\n\t</stackFile>\n\nTo create another node at the same level as another node, use the\n**revInsertXMLNode** command instead.\n\n**Appending XML to a tree**\n\nTo add a new node use the **revAppendXML** command.\n\n\trevAppendXML treeID, parentNode, newXML\n\nSee above for an explanation of *treeID* and *parentNode*.\n\nThe *newXML* is XML you want to append to the tree.\n\n**Moving, Copying or Deleting a Node**\n\nTo move a node use the **revMoveXMLNode** command.\n\n\trevMoveXMLNode treeID, sourceNode, destinationNode [, location] [, relationship]\n\nSee above for an explanation of *treeID*.\n\nThe *sourceNode* is the path to the node you want to move.\n\nThe *destinationNode* is the path to the node you to move to.\n\nThe *location* specifies where the node should be moved to in the list\nof siblings – it can be either \"before\" or \"after\".\n\nThe *relationship* allows you to specify whether to place the node\nalongside the destination as a sibling or below the destination as a\nchild.\n\nTo copy a node use **revCopyXMLNode**.\n\nTo delete a node use **revDeleteXMLNode**.\n\n**Putting data into a Node**\n\nTo put data into a node use the **revPutIntoXMLNode** command.\n\n\trevPutIntoXMLNode treeID,node,newContents\n\nSee above for an explanation of *treeID* and *node*.\n\nThe *newContents* is the text that the new node will contain.\n\n**Setting an Attribute**\n\nTo set an attribute use the **revSetXMLAttribute** command.\n\n\trevSetXMLAttribute treeID,node,attributeName,newValue\n\nSee above for an explanation of *treeID* and *node*.\n\nThe *attributeName* is the name of the attribute you want to set the\nattribute on.\n\nThe *newValue* is the value to set for the attribute.\n\nUsing this function to add a \"showBorder\" property to our field:\n\n\trevSetXMLAttribute 1, \"/stackFile/stack/card/button\", \"showBorder\",\"true\"\n\nThe field tag in our tree now looks like this:\n\n\t<field name=\"Hello\" rect=\"100,100,200,125\" showBorder=\"true\">\n\n**Adding a DTD**\n\nTo add a DTD to the tree, use the **revXMLAddDTD** command.\n\n\trevXMLAddDTD treeID,DTDText\n\nSee above for an explanation of *treeID*.\n\nThe *DTDText* is the text of the DTD to add.\n\n## Sorting\n\nSorting data is a common and fundamental operation. Sorting allows you\nto display data in a user-friendly fashion or code a number of\nalgorithms. LiveCode's intuitive sort features give you the power and\nflexibility to perform any kind of sorting you may require.\n\n### The Sort Container Command: Overview\n\nTo sort data, use the **sort container** command.\n\n\tsort [{lines | items} of] container [direction] [sortType] [by sortKey]\n\nThe *container* is a field, button, or variable, or the message box.\n\nThe *direction* is either ascending or descending. If you don't specify\na direction, the sort is ascending.\n\nThe *sortType* is one of text, numeric, or dateTime. If you don't\nspecify a sortType, the sort is by text.\n\nThe *sortKey* is an expression that evaluates to a value for each line\nor item in the container. If the *sortKey* contains a chunk expression,\nthe keyword *each* indicates that the chunk expression is evaluated for\n*each* line or item. If you don't specify a sortKey, the entire line (or\nitem) is used as the sortKey.\n\nThe following example sorts the *lines* of a variable alphabetically:\n\n\tsort lines of field \"sample text\" ascending text\n\tsort lines of tText descending text\n\nThe following example sorts a collection of *items* numerically:\n\n\tsort items of field \"sample csv\" ascending numeric\n\tsort items of tItems descending numeric\n\n### The Sort Container Command: Using Sort Keys\n\nThe *sortKey* syntax allows you to sort each line or item based on the\nresults of an evaluation performed on each line or item.\n\nTo sort the lines of a container by a specific item in each line:\n\n\tsort lines of tContainer by the first item of each\n\tsort lines of tContainer by item 3 of each\n\nThe *sortKey* expression will only be evaluated once for every element\nthat is to be sorted. This syntax allows a variety of more complex sort\noperations to be performed.\n\nThe following example will extract the minimum and maximum integers\npresent in a list:\n\n\tset the itemDelimiter to \".\"\n\tsort lines of fld 1 numeric by char 2 to -1 of the first item of each\n\tput char 2 to -1 of the first item \\\n\t\tof the first line of fld 1 into tMinimumInteger\n\tput char 2 to -1 of the first item \\\n\t\tof the last line of fld 1 into tMaximumInteger\n\n| **Original list:** | **Result:**     \n|--------------------|-----------------------|                 \n| F54.mov | tMinimumInteger is 3 |                                \n| M27.mov | tMaximumInteger is 54  |                               \n| M7.mov |      |                       \n| F3.mov |      |                 \n\nFigure 57 – Results of sort command using sort key\n\n### The Sort Container Command: Sorting Randomly\n\nTo sort randomly, use the **random** function to generate a random\nnumber as the *sortKey* for each line or item, instead of evaluating the\nline or item's contents. For example:\n\n\tput the number of lines of tExampleList into tElementCount\n\tsort lines of tExampleList ascending numeric by random(tElementCount)\n\n### The Sort Container Command: Stable Sorts – Sorting on Multiple Keys\n\nTo sort a list by multiple criteria you can sort multiple times. This is\nbecause LiveCode uses a stable sort, meaning that if two items have the\nsame sort key their relative order in the output will not change. To\nperform a stable sort, start with the least significant or important\ncriteria and work up to the most important or significant. For example:\n\n\tsort lines of fld 1 ascending numeric by item 2 of each\n\tsort lines of fld 1 ascending text by the first item of each\n\n| **Original list:** | **Result:** |\n|--------------------|-------------|                    \n| Oliver,1.54        | Elanor,5.67 |                            \n| Elanor,5.67        | Elanor,6.3  |                             \n| Marcus,8.99        | Marcus,8.99 |                            \n| Elanor,6.34        | Oliver,1.54 |                             \n| Oliver,8.99        | Oliver,8.99 |                             \n| Tim,3.44           | Tim,3.44    |       \n\nFigure 58 – Results of sorting multiple items\n\n> **Tip:** If you have a large data set and want to improve performance\n> by only performing a single sort, you can construct a sort key that\n> gives the appropriate ordering. In this example a good way to do that\n> is to use the **format** function to construct a fixed length string,\n> one element per sort:\n\n\tsort lines of fld 1 ascending text by \\\\\n\tformat(\"%-16s%08.2f\", item 1 of each, item 2 of each)\n\nThis formats each individual line similar to the following:\n\n\tOliver 00001.54 \n\tElanor 00005.67\n\nThese lines now sort the required way as if the first field (the name)\nties, the order is determined by the second field – due to the use of\npadding characters making all the fields the same size.\n\n### Sorting Cards\n\nTo sort cards, use the **sort** command.\n\n\tsort [marked] cards [of stack] [direction] [sortType] by sortKey\n\nThe *stack* is a reference to any open stack. If you don't specify a\n*stack*, the cards of the current stack are sorted.\n\nThe *direction* is either ascending or descending. If you don't specify\na *direction*, the sort is ascending.\n\nThe *sortType* is one of text, international, numeric, or dateTime. If\nyou don't specify a *sortType*, the sort is by text.\n\nThe *sortKey* is an expression that evaluates to a value for each card\nin the stack. Any object references within the *sortKey* are treated as\npertaining to each card being evaluated, so for example, a reference to\na field is evaluated according to that field's contents on each card.\nTypically the sort command is used with *background* fields that have\ntheir *sharedText* property set to false so that they contain a\ndifferent value on each card.\n\nFor example to sort cards by the contents of the last name field on each:\n\n\tsort cards by field \"Last Name\"\n\nTo sort cards by the numeric value in a ZIP Code:\n\n\tsort cards numeric by field \"ZIP code\"\n\n> **Tip:** To sort cards by a custom expression that performs a\n> calculation, you can create a custom function:\n\n\tsort cards by myFunction() -- uses function below\n\t\n\tfunction myFunction\n\t\tput the number of buttons of this card into tValue\n\t\t-- perform any calculation on tValue here\n\t\treturn tValue\n\t\t-- sort will use this value\n\tend myFunction"
	},	{
	"name":"transferring_information",
	"display name":"Transferring Information",
	"location":"ide",
	"group":"Intermediate",
	"data":"\n# Transferring Information with Files, the Internet and Sockets\n\n## Introduction\n\nReading and writing data to files or transferring data over the Internet\nare important functions in most applications. LiveCode provides a rich\nfeature set for performing these operations.\n\nAccessing data from a file typically takes just a single line of code.\nLiveCode's file path syntax uses the same format on each platform so you\ntypically don't have to rewrite your file handling routines to deploy\ncross platform. A set of functions provides for copying, deleting or\nrenaming files, as well as accessing appropriate system and user\nfolders.\n\nLiveCode includes functions for downloading and uploading data to the\nInternet. Simple downloads and uploads can be performed with just a\nsingle line of code. Support for the http, ftp and post protocols is\nincluded. Syntax is included that allows downloading in both the\nforeground and background. Additional library commands allow you to\nconstruct multipart form data, send ftp commands and more.\n\nLiveCode includes built-in support for https, SSL & encryption.\n\nIf the built-in protocol support doesn't do what you need, LiveCode also\nallows you to implement your own Internet protocols using its\nstraightforward socket support. A very basic client server application\ncan be written in a few lines of code.\n\n## File Name Specifications and File Paths\n\nA file path is a way of describing the location of a file or folder so\nthat it can be found by a handler. File paths are used throughout\nLiveCode: when you read to and write from text files, when you reference\nan external video file to display in a player, and in many other\nsituations. If your application refers to external files in any way, an\nunderstanding of file path is essential.\n\nThis topic discusses the syntax for creating and reading a file\nreference, and how to relate file paths to the location of your\napplication so that they'll be accessible when your application is\ninstalled on another system with a different folder structure.\n\n### What is a File Path?\n\nA file path is a description of the exact location of a file or folder.\nThe file path is created by starting at the top of the computer's file\nsystem, naming the disk or volume that the file is on, then naming every\nfolder that encloses the file, in descending order, until the file is\nreached.\n\n#### Locating a file\n\nFor example, suppose you want to describe the location of a file called\n\"My File\", which is located inside a folder called \"My Folder\". That\nfolder is in turn located inside a folder called \"Top Folder\", which is\non a drive called \"Hard Disk\". You need all this information to\ncompletely describe where the file is: - Hard Disk - Top Folder - My\nFolder - My File\n\nIf someone tells you which disk the file is on, then which folder to\nopen, and so on, you can find the file by opening each successive icon\non your computer's desktop. By starting with the disk, then opening each\nenclosing folder in succession until you arrive at the file, you can\nfind exactly the file that's being described.\n\n#### The structure of a file path\n\nA file path specifies each level of the hierarchy that encloses the\nfile. LiveCode presents the information in a file path that might look\nlike this:\n\n\t/Hard Disk/Top Folder/My Folder/My File\n\nYou can see that to write a file path, you start by naming the disk the\nfile is on, then add each enclosing folder in order until you arrive at\nthe file.\n\nTo see the path to a file, enter the following in the message box:\n\t\n\tanswer file \"Choose a file:\"; put it\n\nThis displays the file path for the file you choose.\n\n> **Important:** Each platform has its own way for programmers to\nspecify file paths. The file path shown above is in the usual style for \nfile paths on Linux systems. For cross-platform compatibility, LiveCode \nuses this same forward slash / character in its file path regardless of \nthe current platform. This way, you can generally specify file and work \nwith paths in your scripts without having to convert them when you \nswitch platforms.\n\n#### File paths on Windows systems\n\nOn Windows systems, disks are named with a drive letter followed by a\ncolon character (:). A typical LiveCode file path on a Windows system\nlooks like this:\n\n\tC:/folder/file.txt\n\n#### File paths on OS X systems\n\nOn OS X systems, the startup disk, rather than the desktop, is used as\nthe top level of the folder structure. This means that the startup\ndisk's name does not appear in file paths. Instead, the first part of\nthe file path is the top-level folder that the file is in.\n\nIf the disk \"Hard Disk\" is the startup disk, a typical path on OS X\nsystems might look like this:\n\n\t/Top Folder/My Folder/My File\n\nNotice that the disk name isn't part of this path.\n\n> **Note:** If you need to find out the startup disk's name, check the\nfirst disk name returned by the **volumes** function.\n\nFor files on a disk that isn't the startup disk, the file path starts\nwith \"/Volumes\" instead of \"/\". A typical file path to a file that's on\na non-startup disk on an OS X system looks like this:\n\n\t/Volumes/Swap Disk/Folder/file.txt\n\n#### Folder paths\n\nYou construct the path of a folder the same way as the path to a file. A\nfolder path always ends with a slash character (/). This final slash\nindicates that the path is to a folder rather than a file.\n\nFor example, this pathname describes a folder called \"Project\" inside a\nfolder called \"Forbin\" on a disk named \"Doomsday\":\n\n\t/Doomsday/Forbin/Project/\n\nIf \"Project\" is a file, its pathname looks like this, without the final\nslash:\n\n\t/Doomsday/Forbin/Project\n\n#### File paths for OS X bundles\n\nA bundle is a special type of folder, used on OS X, that is presented to\nthe user as a single file but that is maintained internally by the\noperating system as a folder. Many OS X applications – including\nLiveCode and the applications it creates – are stored and distributed as\nbundles that contain several files. When the user double-clicks the\nbundle the application starts up instead of a folder window opening to\nshow the bundle's contents.\n\nYou can take advantage of the bundle concept to include any needed\nsupport files with your application. If you place the files in the\napplication's bundle, users ordinarily never see them, and the entire\napplication--support files and all--behaves as a single icon.\n\n> **Tip:** To see the contents of a bundle, right-click (or control\nclick) the bundle and choose \"Show Package Contents\" from the contextual \nmenu.\n\nMost of the time, the distinction between bundles and files doesn't\nmatter. However we recommend that you treat them as files when working\nfrom the perspective of a user but otherwise refer to them as folders\nwhen coding. This will help to keep your code readable. Thus if you are\nselecting a bundle in a file dialog use the answer file form. When\nmoving or renaming a bundle, refer to them as a folder.\n\n#### Moving, renaming, or deleting a bundle\n\nWhen using the **rename** command, to rename a bundle, use the rename\nfolder form of the command:\n\n\trename folder \"/Volumes/Disk/Applications/MyApp/\" to \\\n\t\t\"/Volumes/Disk/Applications/OtherApp/\"\n\nSimilarly, when dealing with a bundle, use the **delete folder** command\ninstead of **delete file**, and the **revCopyFolder** command instead of\n**revCopyFile**.\n\n#### Referring to files inside a bundle\n\nWhen referring to a file that's inside a bundle, you can treat the\nbundle just as if it were a folder. For example, if you have placed a\nfile called \"My Support.txt\" inside your application's bundle, the\nabsolute path to the file might look like this:\n\n\t/Volumes/Disk/Applications/MyApp/My Support.txt\n\n#### The / character in a file or folder name\n\nThe slash (/) is not a legal character in Unix or Windows file or folder\nnames, but it is legal for Mac OS X file or folder names to contain a\nslash. Since a slash in a file or folder name would cause ambiguity – is\nthe slash part of a name, or does it separate one level of the hierarchy\nfrom the next? – LiveCode substitutes a colon (:) for any slashes in\nfolder or file names on Mac OS X systems.\n\nFor example, if a file on a Mac OS X system is named \"Notes from\n12/21/93\", you refer to it in a script as \"Notes from 12:21:93\". Since\nthe colon is not a legal character in Mac OS X folder or file names,\nthis removes the ambiguity.\n\n### Absolute and Relative File Paths\n\nWhen describing how to get to a file, you have two options. You can\nstart from the top level, the name of the disk, and name each of the\nenclosing folders until you get to the file. This is called an absolute\npath, because it's independent of where you start from. Or you can start\nfrom the current folder and describe how to get to the file from there.\nThis is called a relative path, because it depends on where you start.\n\nAll the file paths shown so far in this topic are absolute paths.\n\n#### Absolute file paths\n\nAbsolute file paths do not depend on which folder your stack file is in\nor on where the current folder is. An absolute path to a particular\nfolder or file is always written the same way.\n\nFor example, suppose your application is in a folder called \"Application\nFolder\", and you want to specify a file called \"Westwind\" which is in a\nfolder called \"Stories\" inside \"Application Folder\". - Hard Disk - Top\nFolder - My Folder - My File - Application Folder - My Application -\nStories - Westwind\n\nThe absolute file path of your application looks like this:\n\n\t/Hard Disk/Application Folder/My Application\n\nand the absolute path of the \"Westwind\" file looks like this:\n\n\t/Hard Disk/Application Folder/Stories/Westwind\n\n> **Note:** On Mac OS X, and Linux systems, absolute file paths always\nstart with a slash character. On Windows systems, absolute file paths \nalways start with a drive letter followed by a colon (:).\n\n#### Relative file paths \n\nNow suppose you want to tell someone how to get to the \"Westwind\" file,\nstarting from the folder containing the application.\n\nSince the application is in \"Application Folder\", we don't need to\ninclude the steps to get to \"Application Folder\". Instead, we can\ndescribe the location of the \"Westwind\" file with this relative\npathname:\n\n\tStories/Westwind\n\nThis relative pathname starts at \"Application Folder\"--the folder that\nholds the application--and describes how to get to the \"Westwind\" file\nfrom there: you open the folder \"Stories\", then find \"Westwind\" inside\nit.\n\nA relative file path starts at a particular folder, rather than at the\ntop of the file system like an absolute file path. The relative file\npath builds a file path from the starting folder to the file or folder\nwhose location is being specified.\n\n#### Finding the current folder\n\nBy default, the current folder is set to the folder containing the\napplication (either the LiveCode development environment or your\napplication, depending on whether your application is a standalone). So\nin the example above, the current folder is \"Application Folder\",\nbecause that's where the running application is located.\n\n> **Note:** To change the current folder, set the **defaultFolder**\nproperty.\n\n#### Going up to the parent folder\n\nThe relative path \"..\" indicates the current folder's parent folder. If\nthe current folder is \"Stories\", the relative path\n\n\t..\n\nmeans the same thing as the absolute path\n\n\t/Hard Disk/Application Folder/\n\n#### Going up multiple levels\n\nTo go up more than one level, use more than one \"../\". To go up two\nlevels, use \"../../\"; to go up three levels, use \"../../../\", and so\nforth.\n\nFor example, suppose the current folder is \"Stories\", and its absolute\npath looks like this:\n\n\t/Hard Disk/Application Folder/Stories/\n\nTo get to \"My Application\" in \"Application Folder\", you go up one level\nto \"Application Folder\", then down one level to \"My Application\". The\nrelative path looks like this:\n\n\t../My Application\n\nTo get to \"Top Folder\" on \"Hard Disk\", you go up two levels--to\n\"Application Folder\", then to \"Hard Disk\"--and then down one level to\n\"Top Folder\". The relative path looks like this:\n\n\t../../Top Folder/\n\n#### Starting at the home directory\n\nOn OS X and Unix systems, the \"~\" character designates a user's home\ndirectory.\n\nA path that starts with \"~/\" is a relative path starting with the\ncurrent user's home directory. A path that starts with \"~\", followed by\nthe user ID of a user on that system, is a relative path starting with\nthat user's home directory.\n\n### When to use relative and absolute file paths\n\nAbsolute file paths and relative file paths are interchangeable. Which\none to use depends on a couple of factors.\n\nAbsolute file paths are easy to understand and they don't change\ndepending on the current folder. This can be an advantage if you are\nchanging the defaultFolder regularly.\n\nHowever absolute file paths always include the full name of the hard\ndisk and folders leading up to the current working folder. Therefore, if\nyou plan to distribute your application you will want to work with\nrelative paths, so that media shipped in subfolders with your\napplication is still easy to locate.\n\n> **Tip:** By default, when linking to an image or resource using the\nInspector, LiveCode inserts an absolute file path. If you plan to \ndistribute your application, locate your media in a subfolder next to \nthe stack you are working on and convert these file paths to relative \nfile paths by deleting the directories up to the one you are working in. \nThis will mean you don't need to make any changes when it comes time to \ndistribute your application.\n\nIt's OK to use absolute paths to specify files or folders that the user\nselects after installation. For example, if you ask the user to select a\nfile (using the **answer file** command) and read data from the file,\nthere's no need to convert the absolute path that the **answer file**\ncommand provides to a relative path. Because you're using the path right\nafter you get it from the **answer** command, you know that the disk\nname and folder structure aren't going to change between getting the\npath and using it.\n\n## Special Folders\n\nModern operating systems each have a set of special-purpose folders\ndesignated for a variety of purposes. If you are writing an application\nit is recommended that you make use of these folders where appropriate\nso that you provide the best possible user experience. For example, the\ncontents of the desktop reside in a special folder; there is a folder\nset aside for fonts; there is a folder for application preferences; and\nso on.\n\nThese special folders don't always have the same name and location, so\nyou can't rely on a stored file path to locate them. For example, if\nyour application is installed onto an OS localized into a different\nlanguage, the names of the file path will be different, on some Windows\nspecial folders are named or placed differently depending on what\nversion of Windows is running, etc.\n\nTo find out the name and location of a special folder, regardless of any\nof these factors, you use the **specialFolderPath** function. The\nfunction supports a number of forms for each operating system,\ndescribing the special folders for each one. Some of the forms are the\nsame cross-platform. The following example will get the location of the\nDesktop folder on Windows, Mac OS X or Linux:\n\n\tput specialFolderPath(\"Desktop\") into myPath\n\nTo get the path to the Start menu's folder on a Windows system:\n\n\tput specialFolderPath(\"Start\") into myPath\n\nFor a complete list of possible folders see the, **specialFolderPath**\nin the *LiveCode Dictionary*.\n\n## File Types, Application Signatures & File Ownership\n\nWhen you double-click a document file, it automatically opens in the\napplication it's associated with. Each operating system has a different\nmethod for associating files with an application. In order to create\nfiles that belong to your standalone application, you need to set up the\nassociation appropriately for each platform you distribute on.\n\nThis topic describes how to correctly associate your application with\nthe files it creates.\n\n### Windows File Extensions and Ownership\n\nWhen a file is saved on a Windows system, a three-character extension is\nusually added to the file's name. The extension specifies the format of\nthe file.\n\nTo determine which application to launch when the user double-clicks a\nfile, Windows checks the Windows registry to find out what application\nhas registered itself as owning the file's extension. Each application\ncan add keys to the registry to identify certain file extensions as\nbelonging to it.\n\n#### Applications that don't own files\n\nIf your application does not create files that you want the application\nto own, you don't need to make any modifications to the registry or\nspecify any extensions.\n\n#### Applications that own their own files\n\nIf your application creates files with its own custom extension, when\nyou install the application, you should make changes to the Windows\nregistry to identify the extension as belonging to your application.\n\nPopular Windows installer programs will make these registry changes\nautomatically for you. You can also perform these registry changes using\nthe **setRegistry** function.\n\n#### Installing custom icons\n\nEach Windows file can display its own icon. You can have separate icons\nfor your application and for files it owns. Icon files must be stored in\n.ico format.\n\n#### Custom application icons\n\nIf you want to include a custom icon for your application, use the\n\"Application Icon\" option on the Windows screen of the Standalone\nApplication Settings window to specify the icon file. When you build the\napplication, the icon will be included in the application. For more\ninformation, see the chapter on *Deploying Your Application*.\n\n#### Custom file icons\n\nTo include a custom icon for your documents, use the \"Document Icon\"\noption on the Windows screen of the Standalone Application Settings\nwindow to specify the icon file. When you build the application, the\nicon will be included in the application.\n\n> **Important:** For the correct icon to appear on files your\napplication creates, the file's extension must be registered in the \nWindows registry.\n\n#### File extensions\n\nYou can add an extension to the name of any Windows file. The extension\nmay contain letters A-Z, digits 0-9, ' (single quote), !, @, \\#, $, %,\n^, &, (, ), -, \\_, {, }, \\`, or ~.\n\nThe Windows registry associates applications with the extension for the\nfiles they own.\n\n### OS X File Types and Creators\n\nOn OS X each file has a file extension which determines which\napplication owns it. However OS X systems can also use the unique\nfour-character creator signature and a four-character file type (see\nbelow for more information).\n\nOS X applications store file association information in a property list\nfile, or plist. Each application's plist is stored as part of its\napplication bundle.\n\n#### Applications that don't own files\n\nTo assign your unique creator signature when building an application,\nenter the signature on the OS X screen of the Standalone Application\nSettings window. LiveCode automatically includes the creator signature\nin the application's plist.\n\n#### Applications that own their own files\n\nIf your application creates files with your application's creator\nsignature, you should include in your application's plist an entry for\neach file type you use. Once you have built your standalone application,\nfollow these steps to open the plist file:\n\n**1.** Right click on your application bundle, navigate to the contents\nfolder and open the \"Info.plist\" file. If you have installed Apple's\ndeveloper tools, you have an application called \"Property List Editor\",\nwhich you can use to make changes to the plist file. Otherwise, you can\nedit the file in a text editor.\n\n**2.** Locate the information for the document type. In Property List\nEditor, expand the \"Root\" node, then expand the \"CFBundleDocumentTypes\"\nnode, then expand the \"0\" node. In a text editor, locate\n\"CFBundleDocumentTypes\". Below it, note the tags `<array>` and `<dict>`.\nThe information for the first document type is between `<dict>` and\n`</dict>`.\n\n**3**. Enter the file description, which is a short phrase describing\nwhat kind of file this is. In Property List Editor, change the value of\n\"CFBundleTypeName\" to the description you want to use. In a text editor,\nlocate \"CFBundleTypeName\" in the document information. Below it is the\nfile description, enclosed between `<string>` and `</string>`:\n\n\t<string>LiveCode Stack</string>\n\nChange the description to the one you want to use.\n\nDo not change the tags (enclosed in \"\\<\" and \"\\>\"). Only change what's\nbetween them.\n\n**4.** Enter the `file` extension. In Property List Editor, expand\n\"CFBundleTypeExtensions\" and enter the `file` extension in the \"0\" node.\nIn a text editor, locate \"CFBundleTypeExtensions\" in the document\ninformation. Below it is the extension, enclosed in `<array>` and\n`<string>` tags. Change the extension to the one you want to use.\n\n**5.** Enter the four-character file type. In Property List Editor,\nexpand \"CFBundleTypeOSTypes\" and enter the file type in the \"0\" node. In\na text editor, locate \"CFBundleTypeOSTypes\" in the document information.\nBelow it is the file type, enclosed in `<array>` and `<string>` tags.\nChange the file type to the one you want to use.\n\nIf the format for this type of file is standard (such as plain text),\nuse a standard type (such as \"TEXT\"). If the format belongs to your\napplication, use a custom file type of your choice.\n\n> **Important:** Apple reserves all file types with no uppercase\nletters. If you use a custom file type for your application, make sure \nit contains at least one uppercase letter.\n\nIf you want to assign more file types to your application, copy the\nportion of the plist file inside the \"CFBundleTypes\" array between\n`<dict>` and `<dict>`, including these tags. The \"CFBundleTypes\" node\nshould now contain two `<dict>` nodes and all their contents. Repeat the\nsteps above for each different file type your application can create.\n\n#### Creating Files\n\nWhen your application creates files, set the **fileType** property to\nthe desired creator signature and file type for the new file. (For stack\nfiles created with the **save** command, use the **stackFileType**\nproperty instead.) When creating files, the application uses the current\nvalue of the **fileType** or **stackFileType** property to determine\nwhat creator and file type the new file should have.\n\nIt's important to understand that a file's creator signature determines\nwhich application is launched automatically when you double-click the\nfile, but doesn't prevent other applications from being able to open\nthat file. For example, if your application creates files of type\n\"TEXT\", any text editor can open the files. If your application creates\nstack files, and uses the file type \"RSTK\", then LiveCode will be able\nto open the stack files, as well as your application.\n\n#### File extensions\n\nYou can add an extension to the name of any OS X file. When the user\ndouble-clicks a file with no creator signature, the operating system\nuses the extension to determine which application to use to open the\nfile.\n\nAn application bundle's name should end with the extension \".app\".\n\n> **Note:** Apple's recommendations for determining file type and\ncreator on OS X systems are currently in flux. The recommended method \nfor the present is to set a file type and creator signature, and also \nattach an extension to the end of each file's name when it is created. \nValid extensions on OS X systems are up to twelve characters in length, \nand may include the letters a-z, the digits 0-9, $, %, \\_, or ~. For \nup-to-date information on Apple's recommendations for OS X, see Apple's \n[developer documentation](http://www.apple.com/developer/).\n\n### Mac OS X Classic File Types and Creators\n\nWhen a file is saved on a Mac OS X system, a four-character creator\nsignature is saved with it. The creator signature specifies which\napplication owns the file. Every Mac OS X application should have a\nunique creator signature. (Apple maintains a registry of creator\nsignatures on its [web site](http://developer.apple.com/dev/cftype/)).\n\n#### Applications that don't own files\n\nTo assign your unique creator signature when building an application,\nenter the signature on the Mac OS X screen of the Standalone Application\nSettings window. LiveCode automatically includes the resources needed\nfor Mac OS X to recognize the creator signature.\n\n#### Applications that own their own files\n\nIf your application creates files with your application's creator\nsignature, you should include in your application a set of resources for\neach file type you use. Once you have saved your standalone application,\nopen the application file in ResEdit and follow these steps:\n\n**1.** Open the BNDL resource window, then open the BNDL 128 resource.\nThe BNDL 128 resource contains a single entry (\"APPL\").\n\n**2.** Choose \"Create New File Type\" from the Resources menu. A new\nentry appears below the \"APPL\" entry.\n\n**3.** In the Type field, enter the four-character file type. If the\nformat for this type of file is standard (such as plain text), use a\nstandard type (such as \"TEXT\"). If the format belongs to your\napplication, use a custom file type of your choice.\n\nRepeat steps 2-3 for each different file type your application can\ncreate.\n\nWhen your application creates files, set the **fileType** property to\nthe desired creator signature and file type for the new file. For stack\nfiles created with the save command, use the **stackFileType** property\ninstead. When creating files, the application uses the current value of\nthe **fileType** or **stackFileType** property to determine what creator\nand file type the new file should have.\n\n#### Installing custom icons\n\nEach Mac OS `file`may display any of six different icons, depending on\ncontext and on the number of colors the screen can display: large (32x32\npixel) icons and small (16x16 pixel) icons, each in black-and-white, 16\ncolors, and 256 colors.\n\nMac OS provides default icons that are used for applications and\ndocuments that don't have their own. If you want your application or the\ndocuments it owns to display a custom icon, you must create the icons\nand then attach them to the application.\n\n#### Custom application icons\n\nIf you want to include a custom icon for your application, use ResEdit\nor a similar tool to create a set of icon resources. There are six\nstandard icon resource types: ICN\\# (black-and-white), icl4 (four-bit\ncolor), icl8 (8-bit color), ics\\# (black-and-white small), ics4 (4-bit\nsmall), and ics8 (8-bit small). Each of these application icons should\nhave the resource ID 128.\n\nSave the icons in a single file, and use the \"Include resources from\nfile\" option on the Mac OS X screen of the Standalone Application\nSettings window to specify the file. When you build the application, the\nicons will be included in the application's file.\n\n### Linux File Extensions\n\nLinux systems do not have an overall required method for specifying a\nfile's type, but most files on a Linux system are created with\nextensions in the file name, similar to the extensions used on Windows\nsystems. These extensions may be of any length and may include any\ncharacters (other than /).\n\n## Working with URLs\n\nA URL is a container for a file (or other resource), which may either be\non the same system the application is running on, or on another system\nthat's accessible via the Internet.\n\nThis topic discusses the various URL schemes that LiveCode implements,\nhow to create and manipulate files using URLs, and how to transfer data\nbetween your system and an FTP or HTTP server.\n\nTo fully understand this topic, you should know how to create objects\nand write short scripts, and understand how to use variables to hold\ndata. You should also have a basic understanding of how the Internet\nworks.\n\n### An Overview of URLs\n\nIn the LiveCode language, a URL is a container for a `file` or other\ndocument, such as the output of a CGI on a web server. The data in a URL\nmay be on the same system the application is running on, or may be on\nanother system.\n\nURLs in LiveCode are written like the URLs you see in a browser. You use\nthe **URL** keyword to designate a URL, enclosing the URL's name in\ndouble quotes:\n\n\tput field \"Info\" into URL \"file:myfile.txt\" \n\tget URL \"http://www.example.org/stuff/nonsense.html\" \n\tput URL \"ftp://ftp.example.net/myfile\" into field \"Data\"\n\n### URL Schemes\n\nA URL scheme is a type of URL. LiveCode supports five URL schemes with\nthe **URL** keyword: **http**, **ftp**, **file**, **binfile**, and (for\nbackwards compatibility on Mac OS X) **resfile**.\n\nThe **http** and **ftp** schemes designate documents or directories that\nare located on another system that's accessible via the Internet. The\n**file**, **binfile**, and **resfile** schemes designate local files.\n\n### The http scheme\n\nAn **http** URL designates a document from a web server:\n\n\tput URL \"http://www.example.org/home.htm\" into field \"Page\"\n\nWhen you use an `http` URL in an expression, LiveCode downloads the URL\nfrom the server and substitutes the downloaded data for the URL.\n\nWhen you put something into an `http` URL, LiveCode uploads the data to\nthe web server:\n\n\tput field \"Info\" into URL \"http://www.example.net/info.htm\"\n\n> **Note:** Because most web servers do not allow `http` uploads,\nputting something into an `http` URL usually will not be successful. \nCheck with the server's administrator to find out whether you can use \nthe `http` protocol to upload files.\n\nFor more details about `http` URLs, see the entry for the `http` keyword\nin the LiveCode Dictionary.\n\n### The ftp scheme\n\nAn **ftp** URL designates a file or directory on an FTP server:\n\n\tget URL \"ftp://user:passwd@ftp.example.net/picture.jpg\"\n\nWhen you use an `ftp` URL in an expression, LiveCode downloads the URL\nfrom the server and substitutes the downloaded data for the URL. When\nyou put something into an ftp URL, LiveCode uploads the data to the ftp\nserver:\n\n\tput image 10 into URL \\\n\t\t\"ftp://user:passwd@ftp.example.net/picture.jpg\"\n\nFTP servers require a user name and password, which you can specify in\nthe URL. If you don't specify a user name and password, LiveCode adds\nthe \"anonymous\" user name and a dummy password automatically, in\naccordance with the convention for public FTP servers.\n\n> **Note:** Uploading to an FTP server usually requires a registered\nuser name and password.\n\nFor more details about `ftp` URLs, see the entry for the `ftp` keyword\nin the LiveCode Dictionary.\n\n#### Directories on an FTP server\n\nA URL that ends with a slash (/) designates a directory (rather than a\nfile). An `ftp` URL to a directory evaluates to a listing of the\ndirectory's contents.\n\n### The file scheme\n\nA **file** URL designates a file on your system:\n\n\tput field \"Stuff\" into URL \"file:/Disk/Folder/testfile\"\n\nWhen you use a `file` URL in an expression, LiveCode gets the contents\nof the `file` you designate and substitutes it for the URL. The\nfollowing example puts the contents of a `file` into a variable:\n\n\tput URL \"file:myfile.txt\" into myVariable\n\nWhen you put data into a `file` URL, LiveCode puts the data into the\nfile:\n\n\tput myVariable into URL \"file:/Volumes/Backup/data\"\n\n> **Note:** As with local variables, if the file doesn't exist, putting\ndata into it creates the file.\n\nTo create a URL from a file path that LiveCode provides, use the **&**\noperator:\n\n\tanswer file \"Please choose a file to get:\" \n\tget URL (\"file:\" & it)\n\n#### File path syntax and the file scheme:\n\nThe `file` URL scheme uses the same `file` path syntax used elsewhere in\nLiveCode statements. You can use both absolute paths and relative paths\nin a `file` URL.\n\n#### Conversion of end-of-line markers\n\nDifferent operating systems use different characters to mark the end of\na line. Mac OS X uses a return character (ASCII 13), Linux systems use a\nlinefeed character (ASCII 10), and Windows systems use a return followed\nby a linefeed. To avoid problems when transporting a stack between\nplatforms, LiveCode always uses linefeeds internally when you use a\n`file` URL as a container. LiveCode translates as needed between the\nyour system's end-of-line marker and LiveCode's linefeed character. To\navoid this translation, use the `binfile` scheme (see below).\n\n### The binfile scheme\n\nA **binfile** URL designates a file on your system that contains binary\ndata:\n\n\tput URL \"binfile:beachball.gif\" into image \"Beachball\"\n\nWhen you use a **binfile** URL in an expression, LiveCode gets the\ncontents of the file you designate and substitutes it for the URL. The\nfollowing example puts the contents of a file into a variable:\n\n\tput URL \"binfile:picture.png\" into pictVar\n\nWhen you put data into a **binfile** URL, LiveCode puts the data into\nthe file:\n\n\tput pictVar into URL \"binfile:/Volumes/Backup/pict.png\" \n\tput image 1 into \"binfile:/image.png\"\n\nAs with local variables, if the file doesn't exist, putting data into it\ncreates the file.\n\nThe **binfile** scheme works like the file scheme, except that LiveCode\ndoes not attempt to convert end-of-line markers. This is because return\nand linefeed characters can be present in a binary file but not be\nintended to mark the end of the line. Changing these characters can\ncorrupt a binary file, so the **binfile** scheme leaves them alone.\n\n### The resfile scheme\n\nOn Mac OS Classic (and sometimes on OS X systems), files can consist of\neither a data fork or a resource fork or both.\n\n> **Important:** While LiveCode supports reading and writing resource\nfork files on Mac OS X, this feature is only intended to help you access \nand work with legacy files. We do not generally recommend the use of \nresource forks when designing any new application.\n\nThe resource fork contains defined resources such as icons, menu\ndefinitions, dialog boxes, fonts, and so forth. A **resfile** URL\ndesignates the resource fork of a Mac OS X file:\n\n\tput myBinaryData into URL \"resfile:/Disk/Resources\"\n\nWhen you use a **resfile** URL in an expression, LiveCode gets the\nresource fork of the file you designate and substitutes it for the URL.\n\nWhen you put data into a **resfile** URL, LiveCode puts the data into\nthe file's resource fork.\n\n> **Note:** A **resfile** URL specifies the entire resource fork, not\n> just one resource. To work with individual resources, use the \n**getResource**, **setResource**, **deleteResource** and \n**copyResource** functions.\n\nThe most common use for this URL scheme is to copy an entire resource\nfork from one file to another. To modify the data from a **resfile**\nURL, you need to understand the details of Apple's resource fork format.\n\n#### Creating a resource fork\n\nUnlike the **file** and **binfile** URL schemes, the **resfile** keyword\ncannot be used to create a file. If the file doesn't yet exist, you\ncannot use the **resfile** keyword to create it. To create a new\nresource file, first use a **file** URL to create the file with an empty\ndata fork, then write the needed data to its resource fork:\n\n\tput empty into URL \"file:myFile\" -- creates an empty file \n\tput myStoredResources into URL \"resfile:myFile\"\n\n### Manipulating URL contents\n### \nYou use a URL like any other container. You can get the content of a URL\nor use its content in any expression. You can also put any data into a\nURL.\n\n**http**, **ftp**, **binfile**, and **resfile** URLs can hold binary\ndata.\n\n**http**, **ftp**, and **file** URLs can hold text.\n\n#### The URL keyword\n\nTo specify a URL container, you use the **URL** keyword before the URL,\nwhich can use any of the five schemes described above:\n\n\tif URL \"http://www.example.net/index.html\" is not empty then ...\n\n\tget URL \"binfile:/Applications/Hover.app/data\" \n\n\tput 1+1 into URL \"file:output.txt\"\n\nThe `URL` keyword tells LiveCode that you are using the `URL` as a\ncontainer.\n\nSome properties (such as the **filename** of a player or image) let you\nspecify a URL as the property's value. Be careful not to include the\n**URL** keyword when specifying such properties, because using the\nURLkeyword indicates that you're treating the URL as a container. If you\nuse the URL keyword when specifying such a property, the property is set\nto the contents of the URL, not the URL itself, and this is usually not\nwhat's wanted.\n\n#### Using the content of a URL\n\nAs with other containers, you use the content of a URL by using a\nreference to the URL in an expression. LiveCode substitutes the URL's\ncontent for the reference.\n\nIf the URL scheme refers to a local file (**file**, **binfile**, or\n**resfile** URLs), LiveCode reads the content of the file and\nsubstitutes it for the URL reference in the expression:\n\n\tanswer URL \"file:../My File\" \n\t-- displays the file's content \n\tput URL \"binfile:flowers.jpg\" into myVariable \n\tput URL \"resfile:Icons\" into URL \"resfile:New Icons\"\n\nIf the URL scheme refers to a document on another system (**http** or\n**ftp** URLs), LiveCode downloads the URL automatically, substituting\nthe downloaded data for the URL reference:\n\n\tanswer URL \"http://www.example.net/files/greeting.txt\"\n\n> **Note:** If the server sends back an error message--for example, if\nthe file you specify in an **http** URL doesn't exist--then the error \nmessage replaces the URL reference in the expression.\n\n> **Important:** When you use an **ftp** or **http** URL in an\nexpression, the handler pauses until LiveCode is finished downloading \nthe URL. If you do not want to block LiveCode when accessing these \nresources, use the **load URL** form of the command (see below).\n\n#### Putting data into a URL\n\nAs with other containers, you can put data into a URL. The result of\ndoing so depends on whether the URL scheme specifies a file on your\nsystem (**file**, **binfile**, or **resfile**) or on another system\n(**http** or **ftp**).\n\nIf the URL scheme refers to a local file (**file**, **binfile**, or\n**resfile** URLs), LiveCode puts the data into the specified file:\n\n\tput field \"My Text\" into URL \"file:storedtext.txt\" \n\tput image 1 into URL \"binfile:picture.png\"\n\nIf the URL scheme refers to a document on the Internet (**http** or\n**ftp** URLs), LiveCode uploads the data to the URL:\n\n\tput myVar into URL \"ftp://me:pass@ftp.example.net/file.dat\"\n\nBecause most web servers do not allow HTTP uploads, this usually will\nnot be successful with the **http** scheme.\n\n#### Chunk expressions and URLs\n\nLike other containers, URLs can be used with chunk expressions to\nspecify a portion of what's in a URL--a line, an item, a word, or a\ncharacter. In this way, any chunk of a URL is like a container itself.\nFor more information about Chunk Expressions, see the guide on\n*Processing Text and Data*.\n\nYou can use any chunk of a URL in an expression, in the same way you use\na whole URL:\n\n\tget line 2 of URL \"http://www.example.net/index.html\" \n\tput word 8 of URL \"file:/Disk/Folder/myfile\" into field 4 \n\tif char 1 of URL \"ftp://ftp.example.org/test.jpg\" is \"0\" then ...\n\nYou can also specify ranges, and even one chunk inside another:\n\n\tput char 1 to 30 of URL \"binfile:/marks.dat\" into myVar \n\tanswer line 1 to 3 of URL \"http://www.example.com/file\"\n\n#### Putting data into a chunk\n\nIf the URL is local (that is, if it is a **file**, **binfile**, or\n**resfile** URL), you can put a value into a chunk of the URL:\n\n\tput it into char 7 of URL \"binfile:/picture.gif\" put return after \\\n \t\tword 25 of URL \"file:../datafile\" \n\tput field 3 into line 20 of URL \"file:myfile.txt\" \n\nYou can also put a value into a chunk of an **ftp** or **http** URL.\nBecause it's impossible to upload part of a file, LiveCode downloads the\nfile, makes the change, then uploads the file back to the server.\n\n> **Tip:** This method is inefficient if you need to make several\nchanges. In this case, it's faster to first put the URL in a variable, replace the chunk you\nwant to change, then put the variable into the URL:\n\n\tput URL \"ftp://me:secret@ftp.example.net/file.txt\" into myVar \n\tput field \"New Info\" after line 7 of myVar \n\tput field \"More\" into word 22 of line 3 of myVar\n\tput myVar into URL \"ftp://me:secret@ftp.example.net/file.txt\"\n\nThis ensures that the file only needs to be downloaded once and\nre-uploaded once, no matter how many changes you need to make.\n\n### **URLs and memory**\n\nURLs, unlike other containers, are only read into memory when you use\nthe URL in a statement. Other containers – like variables, fields,\nbuttons, and images – are normally kept in memory, so accessing them\ndoesn't increase memory usage.\n\nThis means that in order to read a URL or place a value in a chunk of a\nURL, LiveCode reads the entire file into memory. Because of this, you\nshould be cautious when using a URL to refer to any very large file.\n\nEven when referring to a single chunk in a URL, LiveCode must place the\nentire URL in memory. An expression such as \n\tline 347882 of URL \"file:bigfile.txt\" \nmay be evaluated very slowly or even not work at all, if insufficient \nmemory is available. If you refer to a chunk of an `ftp` or http URL, \nLiveCode must download the entire file to find the chunk you specify.\n\nIf you need to read and write large quantities of data to a file, or\nseek through the contents of a large file without loading the entire\ncontents into memory, use the **open file**, **read from file**,\n**seek** and **close file** commands instead of the URL commands. For\nmore information on these commands see the *LiveCode Dictionary*.\n\n### **Deleting URLs**\n\nYou remove a URL with the **delete URL** command.\n\nTo delete a local file, you use a **file** or **binfile** URL:\n\n\tdelete URL \"file:C:/My Programs/test.exe\" \n\tdelete URL\"binfile:../mytext.txt\" \n\nIt doesn't matter whether the file contains binary data or text; for\ndeletion, these URL schemes are equivalent.\n\n> **Tip:** You can also use the **delete file** command to remove a file.\nTo delete the resource fork of a file, you use a **resfile** URL. The\nfollowing example removes the resource fork along with all resources,\nbut leaves the file in place:\n\n\tdelete URL \"resfile:/Volumes/Backup/proj.rev\" \n\n> **Tip:** To delete a single resource instead of the entire resource\nfork, use the **deleteResource** function.\n\nTo remove a file or directory from an FTP server, you use an **ftp**\nURL:\n\n\tdelete URL \"ftp://root:secret@ftp.example.org/deleteme.txt\" \n\tdelete URL \"ftp://me:mine@ftp.example.net/trash/\" \n\nAs with creating files, you can use an **http** URL to delete a file,\nbut most HTTP servers are not configured to allow this.\n\n## Uploading and Downloading Files\n\nThe simplest way to transfer data to an FTP or HTTP server is to use the\n**put** command to upload, or use the URL in an expression to download.\n\nThe Internet library includes additional commands to upload and download\nfiles to and from an FTP server. These commands offer more versatile\noptions for monitoring and controlling the progress of the file\ntransfer.\n\n#### Uploading using the put command\n\nAs mentioned above, putting something into an **ftp** or **http** URL\nuploads the data to the server:\n\n\tput myVariable into URL\n\t\"ftp://user:pass@ftp.example.org/newfile.txt\"\n\nIf you use the **put** command with a **file** or **binfile** URL as the\nsource, the file is uploaded:\n\n\tput URL \"file:newfile.txt\" into URL\n\t\"ftp://user:pass@ftp.example.org/newfile.txt\"\n\nWhen you upload data in this way, the operation is blocking: that is,\nthe handler pauses until the upload is finished. (See below for details\non how to create a file transfer that is not blocking.) If there is an\nerror, the error is placed in the **result** function:\n\n\tput field \"Data\" into URL myFTPDestination \n\tif the result is not empty then beep 2\n\n> **Important:** Uploading or downloading a URL does not prevent other\nmessages from being sent during the file transfer: the current handler \nis blocked, but other handlers are not. For example, the user might \nclick a button that uploads or downloads another URL while the first URL \nis still being uploaded. In this case, the second file transfer is not \nperformed and the **result** is set to \"Error Previous request has not \ncompleted.\" To avoid this problem, you can set a flag while a URL is \nbeing uploaded, and check that flag when trying to upload or download \nURLs to make sure that there is not already a file transfer in progress.\n\n#### Downloading using a URL\n\nReferring to an **ftp** or **http** URL in an expression downloads the\ndocument.\n\n\tput URL \"ftp://ftp.example.net/myfile.jpg\" into image 1 \n\tget URL \"http://www.example.com/newstuff/newfile.html\"\n\nIf you use the **put** command with a **file** or **binfile** URL as the\ndestination, the document is downloaded to the file:\n\n\tput URL \"ftp://ftp.example.net/myfile.jpg\" into URL \\\n\t\t\"binfile:/Disk/Folder/myfile.jpg\"\n\n### Non-blocking transfers\n\nWhen you transfer a file using URL containers, the file transfer stops\nthe current handler until the transfer is done. This kind of operation\nis called a blocking operation, since it blocks the current handler as\nlong as it's going on.\n\nIf you want to transfer data using *http* without blocking, use the\n**load** command. if you want to transfer large files using *ftp*, use\nthe **libURLftpUpload**, **libURLftpUploadFile**, or\n**libURLDownloadToFile** commands.\n\nNon-blocking file transfers have several advantages:\n\nSince contacting a server may take some time due to network lag, the\npause involved in a blocking operation may be long enough to be\nnoticeable to the user.\n\nIf a blocking operation involving a URL is going on, no other blocking\noperation can start until the previous one is finished. If a\nnon-blocking file transfer is going on, however, you can start other\nnon-blocking file transfers. This means that if you use the library\ncommands, the user can begin multiple file transfers without errors.\n\nDuring a non-blocking file transfer, you can check and display the\nstatus of the transfer. This lets you display the transfer's progress\nand allow the user to cancel the file transfer.\n\n#### Using the load command\n\nThe **load** command downloads the specified document in the background\nand places it in a cache. Once a document has been cached, it can be\naccessed nearly instantaneously when you use its URL, because LiveCode\nuses the cached copy in memory instead of downloading the URL again.\n\nTo use a file that has been downloaded by the load command, refer to it\nusing the URL keyword as usual. When you request the original URL,\nLiveCode uses the cached file automatically.\n\nFor best performance, use the `load` command at a time when response\nspeed isn't critical (such as when your application is starting up), and\nonly use it for documents that must be displayed quickly, such as images\nfrom the web that will be shown when you go to the next card.\n\n#### Checking status when using the load command\n\nWhile a file is being transferred using the load commands, you can check\nthe status of the transfer using the **URLStatus** function. This\nfunction returns the current status of a URL that's being downloaded or\nuploaded:\n\n\tlocal tUrl\n\tput \"ftp://ftp.example.com/myfile.txt\" into tUrl\n\tput the URLStatus of tUrl into field \"Current Status\"\n\t\nThe **URLStatus** function returns one of the following values:\n- *queued* : on hold until a previous request to the same site is\ncompleted\n- *contacted* : the site has been contacted but no data has been sent or\nreceived yet\n- *requested* : the URL has been requested\n- *loading* *bytesTotal*, *bytesReceived* : the URL data is being \nreceived\n- *uploading* *bytesTotal, bytesReceived* : the file is being uploaded \nto the URL\n- *cached* : the URL is in the cache and the download is complete\n- *uploaded* : the application has finished uploading the file to the \nURL\n- *error* : an error occurred and the URL was not transferred\n- *timeout* : the application timed out when attempting to transfer the\nURL\n\nTo monitor the progress of a file transfer or display a progress bar,\nyou check the **URLStatus** function repeatedly during the transfer. The\neasiest way to do this is with timer based messaging – see the section\nof the same name in the *LiveCode Script* guide, for more information.\n\n#### Canceling a file transfer & emptying the cache\n\nTo cancel a transfer initiated with the load command and empty the\ncache, use the **unload** command.\n\n\tunload URL \"http://example.org/new\\_beta\"\n\n#### Uploading and downloading large files using FTP\n\nThe Internet library provides a number of commands for transferring\nlarger files via FTP without blocking.\n- **libURLftpUpload** uploads data to an FTP server\n- **libURLftpUploadFile** uploads a file to an FTP server\n- **libURLDownloadToFile** downloads a file from an FTP server to a \nlocal file\n\nThe basic effect of these commands is the same as the effect of using\nURLs: that is, the data is transferred to or from the server. However,\nthere are several differences in how the actual file transfer is\nhandled. Because of these differences, the library commands are more\nsuitable for uploads and downloads, particularly if the file being\ntransferred is large.\n\nThe following sets of statements each show one of the Internet library\ncommands, with the equivalent use of a URL:\n\n\tlibURLftpUpload myVar,\"ftp://me:pass@example.net/file.txt\" \n\tput myVar into URL \"ftp://me:pass@example.net/file.txt\"\n\n\tlibURLftpUploadFile \"test.data\",\"ftp://ftp.example.org/test\"\n\tput URL \"binfile:test.data\" into URL \"ftp://ftp.example.org/test\n\n\tlibURLDownloadToFile \"ftp://example.org/new\\_beta\",\"/HD/File\" \n\tput URL \"ftp://example.org/new\\_beta\" into URL \"binfile:/HD/File\"\n\n#### Using callback messages\n\nWhen you start a file transfer using the **libURLftpUpload**,\n**libURLftpUploadFile**, or **libURLDownloadToFile** command, you can\noptionally specify a callback message, which is usually a custom message\nthat you write a handler for. This message is sent whenever the file\ntransfer's **URLStatus** changes, so you can handle the callback message\nto handle errors or to display the file transfer's status to the user.\n\nThe following simple example demonstrates how to display a status\nmessage to the user. The following handlers might be found in a button's\nscript:\n\n\ton mouseUp \n\t\tlocal tUrl\n\t\tput \"ftp://example.org/new_beta\" into tUrl\n\t\tlibURLDownloadToFile tUrl,\"/HD/Latest Beta\",\"showStatus\" \n\tend mouseUp\n\n\ton showStatus theURL \n\t\tput the URLStatus of theURL into field \"Status\" \n\tend showStatus\n\nWhen you click the button, the **mouseUp** handler is executed. The\n**libURLDownloadToFile** command begins the file transfer, and its last\nparameter specifies that a *showStatus* message will be sent to the\nbutton whenever the **URLStatus** changes.\n\nAs the **URLStatus** changes periodically throughout the download\nprocess, the button's *showStatus* handler is executed repeatedly. Each\ntime a *showStatus* message is sent, the handler places the new status\nin a field. The user can check this field at any time during the file\ntransfer to see whether the download has started, how much of the file\nhas been transferred, and whether there has been an error.\n\nIf a file transfer was started using the **libURLftpUpload**,\n**libURLftpUploadFile**, or **libURLDownloadToFile** command, you can\ncancel the transfer using the **unload** command.\n\n#### Uploading, downloading, and memory\n\nWhen you use a URL as a container, LiveCode places the entire URL in\nmemory. For example, if you download a file from an FTP server using the\n**put** command, LiveCode downloads the whole contents of the file into\nmemory before putting it into the destination container. If the file is\ntoo large to fit into available memory, a file transfer using this\nmethod will fail (and may cause other unexpected results).\n\nThe library commands **libURLftpUpload**, **libURLftpUploadFile**, and\n**libURLDownloadToFile**, however, do not require the entire file to be\nloaded into memory. Instead, they transfer the file one piece at a time.\nIf a file is (or might be) too large to comfortably fit into available\nmemory, you should always use the library commands to transfer it.\n\n### Using a stack on a server\n\nOrdinarily, you use stack files that are located on a local disk. You\ncan also open and use a stack that is located on an FTP or HTTP server.\nUsing this capability, you can update an application by downloading new\nstacks, make new functionality available via the Internet, and even keep\nmost of your application on a server instead of storing it locally.\n\nGoing to a stack on a server:\n\nAs with local stack files, you use the **go** command to open a stack\nthat's stored on a server:\n\n\tgo stack URL \"http://www.example.org/myapp/main.rev\" \n\tgo stack URL \"ftp://user:pass@example.net/secret.rev\"\n\n> **Note:** For such a statement to work, the stack file must have been\nuploaded as binary data, uncompressed, and not use encodings such as \nBinHex.\n\n> **Tip:** If you need to download a large stack, use the **load** \ncommand to complete the download before using the **go** command to \ndisplay the stack. This allows you to display a progress bar during the \ndownload.\n\nLiveCode automatically downloads the stack file. The main stack of the\nstack file then opens in a window, just as though you had used the\n**go** command to open a local stack file.\n\nYou can go directly to a specific card in the stack:\n\n\tlocal tStackUrl\n\tput \"http://www.example.org/myapp/main.rev\" into tStackUrl\n\tgo card \"My Card\" of stack URL tStackUrl\n\nTo open a substack instead, use the substack's name:\n\n\tlocal tStackUrl\n\tput \"http://www.example.org/myapp/main.rev\" into tStackUrl\n\tgo stack \"My Substack\" of stack URL tStackUrl\n\t\n#### Using a compressed stack\n\nYou cannot directly open a stack that's compressed. However, since the\nstack URL is a container, you can use the URL as the parameter for the\n**decompress** function. The function takes the stack file data and\ndecompresses it, producing the data of the original stack file. You can\nopen the output of the function directly as a stack.\n\nThe following statement opens a compressed stack file on a server:\n\n\tgo decompress(stack URL \"http://www.example.net/comp.gz\")\n\nThe statement automatically downloads the file \"comp.gz\", uncompresses\nit, and opens the main stack of the file.\n\n#### Saving stacks from a server\n\nWhen a stack is downloaded using the **go** command, it's loaded into\nmemory, but not saved on a local disk. Such a stack behaves like a new\n(unsaved) stack until you use the **save** command to save it as a stack\nfile.\n\n> **Note:** Saving a stack that has been downloaded with the **go**\n> command does not re-upload it to its server. To upload a changed\n> stack, you must save it to a local file, then use one of the methods\n> described in this topic to upload the file to the server.\n\n## Other Internet Commands\n\nThe Internet library has a number of additional commands for working\nwith web forms, ftp commands, custom settings and troubleshooting. These\ncommands are documented in more detail the LiveCode Dictionary.\n\n#### Launching the User's Browser with a URL\n\nTo launch the default browser with a URL, use the **launch URL**\ncommand.\n\n\tlaunch URL \"http://www.livecode.com/\"\n\n> **Note:** To render web pages within LiveCode, instead of launching an\n> external browser, use the revBrowser. See the section on revBrowser\n> for more information.\n\n### Working with Web Forms\n\nTo post data to a web form, use the **post** command. To encode data to\nmake it suitable for posting, use the **libUrlFormData** function. To\ncreate multi-part form data (as described in RFC 1867) use the\n**libUrlMultipartFormData** function. To add data to a multipart form\none part at a time, use the **libUrlMultipartFormAddPart** function.\nThis can be useful if you need to specify the mime type or transfer\nencoding for each part.\n\n### Working with FTP\n\nFor details on basic uploading and downloading using FTP, see the\nsection above.\n\nThe following commands provide additional capabilities when working with\nthe ftp protocol:\n\n- **libURLSetFTPStopTime** : Sets the timeout value for FTP transfers.\n- **libURLSetFTPMode** : Switches between active and passive mode for \nFTP transfers.\n- **libURLSetFTPListCommand** : Switches between sending LIST or NLST\nformats when listing the contents of an FTP directory.\n- **libURLftpCommand** : sends an ftp command to an ftp server.\n- **libURLftpUpload** : uploads data. See the section above for more\ndetails.\n- **libURLftpUploadFile** : uploads a file, without loading the entire\nfile into memory. See the section above for more details.\n- **libURLDownloadToFile** – downloads data to a file, without loading \nthe entire data into memory. See the section above for more details.\n\n### HTTP methods and http URLs\n\nThe basic operations used by the HTTP protocol are called methods. For\n**http** URLs, the following HTTP methods are used under the following\ncircumstances:\n\n- GET: when an **http** URL in an expression is evaluated\n\n- PUT: when you put a value into an **http** URL\n\n- POST: when you use the **post** command\n\n- DELETE: when you use the **delete URL** command with an **http** URL\n\n> **Note:** Many HTTP servers do not implement the PUT and DELETE\n> methods, which means that you can't put values into an **http** URL or\n> delete an **http** URL on such servers. It's common to use the FTP\n> protocol instead to upload and delete files; check with your server's\n> administrator to find out what methods are supported.\n\n#### HTTP headers\n\nWhen LiveCode issues a GET or POST request, it constructs a minimal set\nof HTTP headers. For example, when issued on a Mac OS system, the\nstatement:\n\n\tput URL \"http://www.example.org/myfile\" into myVariable\n\nresults in sending a GET request to the server:\n\n\tGET /myfile HTTP/1.1 Host: 127.0.0.0 User-Agent: LiveCode (MacOS)\n\nYou can add headers, or replace the Host or User-Agent header, by\nsetting the **HTTPHeaders** property before using the URL:\n\n\tset the HTTPHeaders to \"User-Agent: MyApp\" & return \\\n\t\t& \"Connection: close\" \n\tput URL \"http://www.example.org/myfile\" into myVariable\n\nNow the request sent to the server looks like this:\n\nGET /myfile HTTP/1.1 Host: 127.0.0.0 User-Agent: MyApp Connection: close\n\nThe **ftp** URL scheme can be used to create a new file to an FTP\nserver. As with the **file** and **binfile** schemes, putting something\ninto the URL creates the file:\n\n\tput dataToUpload into URL\n\t\"ftp://jane:pass@ftp.example.com/newfile.dat\"\n\n> **Tip:** You can create an FTP directory by uploading a file to the\n> new (nonexistent) directory. The directory is automatically created.\n> You can then delete the file, if you wish, leaving a new, empty\n> directory on the server:\n\n\t-- Create an empty file in the nonexistent directory: \n\tput empty into URL \"ftp://jane:pass@example.com/newdir/dummy\" \n\t\n\t-- Delete unwanted empty file to leave new directory: \n\tdelete URL \"ftp://jane:pass@example.com/newdir/dummy\"\n\n### Additional Transmission Settings\n\nThe following commands provide additional customization options for the\nInternet library:\n\n- **libUrlSetExpect100** : Allows you to set a limit to the size of data\nbeing posted before requesting a continue response from the server.\n- **libURLSetCustomHTTPHeaders** : Sets `the header`s to be sent with each\nrequest to an HTTP server. See also the section on HTTPHeaders above.\n- **libURLFollowHttpRedirects** : Specify that GET requests should follow\nHTTP redirects and GET the page redirected to.\n- **libUrlSetAuthCallback** : Sets a callback for handling authentication\nwith http servers and proxies.\n\n### Troubleshooting\n\nThe following commands and functions can be useful when debugging an\napplication that uses the Internet library.\n\n- **resetAll** : Closes all open sockets and halts all pending Internet\noperations.\n\n> **Caution:** The **resetAll** command closes all open sockets, which\n> includes any other sockets opened by your application and any sockets\n> in use for other uploads and downloads. Because of this, you should\n> avoid routine use of the **resetAll** command. Consider using it only\n> during development, to clear up connection problems during debugging.\n> \n\n- **libURLErrorData** : Returns any error that was caused during a\ndownload that was started with the load command.\n- **libURLVersion** : Returns the version of the Internet library.\n- **libURLSetLogField** : Specifies a field for logging information about\nuploads and downloads on screen.\n- **libURLLastRHHeaders** : Returns the headers sent by the remote host in\nthe most recent HTTP transaction.\n- **libURLLastHTTPHeaders** : Returns the value of the httpHeadersproperty\nused for the previous HTTP request.\n\n## revBrowser – Rendering a Web Page within a Stack\n\nUse the revBrowser commands to render a web page within a stack.\nRevBrowser uses WebKit (Safari) on Mac OS X and Internet Explorer on\nWindows. Currently RevBrowser is not supported under Linux.\n\nTo create a browser object in a stack, use the **revBrowserOpen**\nfunction. This function takes the **windowID** for the stack you want to\nopen the browser in and a URL. Please note that the `windowID`is not the\nsame as the stack's ID property.\n\n\tput the windowid of this stack into tWinID \n\tput revBrowserOpen(tWinID,\"http://www.google.com\") into sBrowserId\n\nTo set properties on the browser, use the **revBrowserSet** command. The\nfollowing commands makes the border visible then sets the rectangle to\nbe the same as an image named \"browserimage\":\n\n\trevBrowserSet sBrowserId, \"showborder\",\"true\" \n\trevBrowserSet sBrowserId, \"rect\",rect of img \"browserimage\"\n\nTo close a browser when you finished with it, use the\n**revBrowserClose** command. This command takes the `windowID`for the\nstack containing the browser:\n\n\trevBrowserClose sBrowserId\n\nRevBrowser supports a number of settings and messages. You can intercept\na message whenever the user navigates to a link, prevent navigation,\nintercept clicks in the browser, requests to download files or to open a\nnew window.\n\nFor a complete list of commands that operate on RevBrowser, open the\n*LiveCode Dictionary* and type \"browser\" into the filter box.\n\n## SSL and Encryption\n\nLiveCode includes support for using Secure Sockets Layer and the https\nprotocol. It also includes an industrial strength encryption library you\ncan use to encrypt files or data transmissions.\n\n### Encrypting and Decrypting Data\n\nTo encrypt data, use the **encrypt** command. The **encrypt** command\nsupports a wide variety of industry standard methods of encryption. The\nlist of installed methods can be retrieved by using the **cipherNames**\nfunction. To decrypt data, use the **decrypt** command. For more\ninformation on these features, see the *LiveCode Dictionary*.\n\n> **Tip:** If you are using the encryption library on a Windows system,\n> it is possible that another application will have installed DLLs that\n> use the same name as the ones included with LiveCode to support\n> encryption. You can force your application to load LiveCode's SSL DLLs\n> by setting the $PATH environment variable before loading the library.\n\n\tput $PATH into tOldPath \n\tput <path to SSL DLLs> into $PATH \n\tget the cipherNames -- Force loading of the SSL DLLs \n\tput tOldPath into $PATH\n\n### Connecting using HTTPS\n\nYou may connect and download data from a URL using **https** in the same\nway that you access an http URL.\n\n\tput URL \"https://www.example.com/store.php\"\n\nIf there is an error, it will be placed into `the result`. If you need\nto include a user name and password you can do so in the following form:\n\n\thttps://user:password@www.example.com/\n\n### Implementing your own secure protocols\n\nTo implement your own secure protocol, use the **open secure socket**\nvariant of the **open socket** command. You can specify whether or not\nto include certification, a certificate and a key. For more information\non the **open socket** command, see the *LiveCode Dictionary*.\n\n## Writing your own protocol with sockets\n\nIf you need to implement your own protocol, you can do so using\nLiveCode's socket support. To understand this chapter it is assumed you\nunderstand the basics of how the Internet works, including the concepts\nof sockets, IP addresses and ports. More information on these concepts\ncan be found in Wikipedia.\n\n> **Tip:** The standard protocols that LiveCode support such as http and\n> ftp, discussed earlier in this chapter, have all been implemented as a\n> scripted library with LiveCode's socket support. You can examine this\n> library by running `edit script of stack \"revlibURL\"` in the Message \n> Box. Beware, this library is not for the faint of heart. If you change \n> anything, LiveCode's Internet commands may cease to operate.\n\n#### Opening a connection\n\nTo open a connection use the **open socket** command. The following\ncommand opens a connection to the IP address specified in the\n`tIPAddress`variable and the port specified in the `tPort`variable. It\nspecifies that LiveCode should send the message \"`chatConnected`\" when a\nconnection has been established.\n\n\topen socket (tIPAddress & \":\" & tPort) with message \"chatConnected\"\n\nTo open a secure socket, use the **open secure socket** variant of the\ncommand. To open a UDP datagram socket, use the **open datagram socket**\nvariant of the command. For more information on these variants, see the\n*LiveCode Dictionary*.\n\n#### Looking up a host name or IP address\n\nYou may look up an IP address from a host name with the\n**hostNameToAddress** function. For example, to get the IP address for\nthe livecode.com server:\n\n\tput hostNameToAddress(\"www.livecode.com\") into tIPAddress\n\nTo get the host name of the local machine, use the **hostName**\nfunction. To look up the name from an IP address, use the\n**hostAddressToName** function.\n\n#### Reading and writing data\n\nOnce LiveCode opens a connection, it will send a `chatConnected`message.\nTo receive data, use the **read from socket** command. The following\nmessage reads data from the socket and sends a `chatReceived`message\nwhen reading is completed.\n\n\ton chatConnected pSocket \t\n\t\tread from socket pSocket with message chatReceived \n\tend chatConnected\n\nOnce reading from the socket is completed the `chatReceived` message can\nbe used to process or display the data. It can then specify that it\nshould continue to read from the socket until more data is received,\nsending another `chatReceived` message when done.\n\n\ton chatReceived pSocket, pData \n\t\tput pData after field \"chat output\"\n\t\tread from socket pSocket with message \"chatReceived\" \n\tend chatReceived\n\nTo write data to the socket, use the **write** command:\n\n\twrite field \"chat text\" to socket tSocket\n\n#### Disconnecting\n\nTo disconnect, use the **close socket** command. You should store a\nvariable with details of any open sockets and close them when you have\nfinished using them or when your stack closes.\n\n\tclose socket (tIDAddress & \":\" & tPort)\n\n#### Listening for and accepting incoming connections\n\nTo accept incoming connections on a given port, use the **accept\nconnections** command. The following example tells LiveCode to listen\nfor connections on port 1987 and send the message `chatConnected`if a\nconnection is established. You can then start to read data from the\nsocket in the `chatConnected`handler.\n\n\taccept connections on port 1987 with message chatConnected\n\n#### Handling errors\n\nIf there is an error, LiveCode will send a **socketError** message with\nthe address of the socket and the error message. If a socket is closed a\n**socketClosed** message will be sent. If a socket times out waiting for\ndata a **socketTimeout** message will be sent. To get a list of sockets\nthat are open, use the **openSockets** function. You can set the default\ntimeout interval by setting the **socketTimeOutInterval** property. For\nmore details on all of these features, see the *LiveCode Dictionary*.\n\n> **Tip:** You can see a complete implementation of a basic client\n> server \"chat\" application by navigating to Documentation -\\> Getting\n> Started -\\> Sample Projects -\\> Internet Chat – creating a custom\n> protocol using sockets -\\> Launch. Most of the scripts for the\n> \"server\" stack are in the \"start server\" button. Most of the scripts\n> for the client are in the stack script for the \"chat client\" stack."
	},	{
	"name":"working_with_databases",
	"display name":"Working With Databases",
	"location":"ide",
	"group":"Intermediate",
	"data":"\n# Working With Databases\n\n## Introduction\n\nWith the LiveCode Database library, your application can communicate\nwith external SQL databases. You can get data from single-user and multi-user\ndatabases, update data in them, get information about the database\nstructure, and display data from the database in your stack. For a \ndiscussion of when it is appropriate to use an external database with \nLiveCode, see the topic When to Use a Database in the *LiveCode Script* \nguide.\n\nThis guide discusses how to install necessary software to communicate\nwith databases, and how to use the Database library to communicate \nbetween LiveCode and a database.\n\nThis topic does not include discussion of how to set up and create a SQL\ndatabase, which is beyond the scope of the LiveCode documentation.\n\nTo fully understand this topic, you should know how to write short\nscripts and should understand the basic concepts of SQL databases (rows\nand columns, database cursors, and SQL queries).\n\nA few terms used in this topic, such as \"field\" and \"cursor\", are part\nof the standard terminology for working with databases, but have a\ndifferent meaning in the context of LiveCode development. When going\nback and forth between database work and more general application\ndevelopment, be sure you understand which meaning is applicable in the\ncontext you're currently working in. When referring to database-specific\nterms, the documentation usually uses phrases like \"database field\" or\n\"database cursor\" to remind you of the context. See the Glossary within\nthe product documentation for definitions of any term you are unsure of.\n\n## Introduction to Database Access\n\nA database is an external resource that holds information, structured in\na special form for quick access and retrieval. Databases can be:\n\n- any size from small to extremely large \n- located on the same system as the application or on a remote server \n- accessible by one user at a time or by many users at once\n\n### SQL Databases\n\nA SQL database is a database that you access and control using SQL, a\nstandard database-access language which is widely supported. You use SQL\nqueries (statements in the SQL language) to specify the part of the\ndatabase you want to work with, to get data, or to make changes to the\ndatabase.\n\nLiveCode's database access is fully-featured. You can send any SQL\nstatement to a database. You can open multiple databases (or multiple\nconnections to the same database), maintain multiple record sets\n(database cursors) per connection, and send and receive binary data as\nwell as text. You can do all this using the commands and functions in \nthe *Database library*.\n\nTo see a list of LiveCode terms in the Database library, open the\n*Dictionary*, and type \"*database*\" into the search filter field.\n\n### The Basics of Database Structure\n\nA database is built of records, which in turn are built out of database\nfields. A field is the smallest part of a database that can be\nseparately addressed. Each database field contains a particular kind of\ninformation. This might be a name, a file path, a picture, or any other\nkind of information. Each record contains one value for each of its\nfields. A set of records is called a database table, and one or more\ntables comprise a database.\n\nHere's an example: suppose you have a database of customers for your\nbusiness. The fields of this database might include the customer name, a\nunique customer ID number, and shipping address. Each record consists of\nthe information for a single customer, so each record has a different\ncustomer name, shipping address, and so on.\n\n> **Note:** You may have noticed that the database structure being\n> described resembles a multiple-card stack that has the same fields on\n> each card. A database field is like a field in a stack, and a record\n> is like a card. A stack set up this way can act as a database, in\n> fact, but lacks some of the features of an external database, such as\n> the ability to perform SQL queries and the ability to perform robustly\n> when accessed by more than one user.\n> \n\nYou can also think of the set of customer records as a grid (like a\nspreadsheet). Each row is a record, and each column is a field, so each\ncell in the grid contains a different piece of information about a\nparticular customer. Here's an example:\n\n| ID| Customer Name | Address | Country |\n|--------|-------------------|---------------|-------------|\n| 123    | Jane Jones        | 234 E. Street | U.K.        | \n| 836    | Acme Corporation  | PO Box 23788  | USA         | \n| 823    | CanCo, Inc.       | 1 CanCo Blvd. | Japan       |\n\nFigure 59 – Example Database Grid\n\nThere are three rows in this grid (each is the record for a particular\ncustomer) and four columns (each is one of the fields).\n\nA row of the database means one single customer record, which has one\nvalue for each field. A column of the database means the set of all\nvalues for one of the fields, one for each record (for example, the set\nof all customer addresses).\n\nMore generally, each row describes one of the things in the database,\nand each column describes a particular state for each thing in the\ndatabase.\n\nThe set of all customer records makes a table. Your database might\ninclude only this table, or it might include other related tables, such\nas a list of all sales. You can also connect related data from different\ntables of the same database. For example, if each record in the Sales\ntable includes the ID number of the customer who bought the product, you\ncan link all the sales records for a customer to that customer's record\nin the Customers table.\n\n### SQL and Record Sets – Database Cursors\n\nSQL works primarily with sets of records, rather than individual rows.\nWhen you send a SQL query to a database, the query typically selects\ncertain records which you can perform further operations on. The set of\nrecords resulting from a SQL query is called a database cursor, or\nrecord set. SQL queries let you describe the characteristics of the\nrecords you require, instead of processing each record one by one to\nfind out whether it matches your criteria.\n\nFor example, consider the customer table we talked about in the previous\nsection. To work with only US customers, you can write a SQL query that\nselects only records where the country field is \"USA\". This subset of\nrecords then becomes a record set. You can find out more about the\nfields and records contained in this record set, and move from record to\nrecord within this subset of the database. You can create more than one\nrecord set to work with more than one set of records at a time.\n\n> **Note:** Different database implementations have different\n> limitations on movement within a record set. For example, some\n> databases won't let you move backward within a record set: instead,\n> you must start at the first record and move forward in order to\n> examine the data.\n\n### Choosing a Database\n\nLiveCode directly supports the following database implementations:\n\n- MySQL \n- SQLite \n- PostgreSQL\n\nLiveCode also supports connecting to a database via ODBC. You can use\nODBC to use Access, FileMaker, MS SQL Server and many other database\nimplementations. See below for more information about ODBC.\n\nLiveCode's database commands and functions use the same syntax\nregardless of what type of database you are connecting to. You don't\nneed to learn a separate database language for each type. Instead, when\nyou first open a database with the **revOpenDatabase** function, you\nspecify the type as one of the parameters so LiveCode knows what type of\ndatabase it's dealing with. The Database library handles the details of\neach type behind the scenes for you.\n\n## Reasons to Choose a Database Type\n\nWhich type of database to choose depends on a number of factors. If you\nneed to work with an existing database, or already have a database\nmanager installed, the decision is made for you. Likewise, if you're\nalready an expert at a particular database implementation, you'll\nprobably prefer to go on using that one.\n\nOther factors in your choice may include price, performance, licensing\nmodel (commercial or open source), and platform support. If your users\nare on a particular set of platforms, you'll need to choose a database\nthat is supported on all those platforms. Runtime do not endorse any\nparticular database type, the information provided on the different\ntypes is for informational purposes only.\n\n### Overview of ODBC\n\nOpen Database Connectivity (ODBC) is a system that allows developers to\naccess any type of compatible database in a standard way.\n\nTo communicate with a database, you usually have to add code that uses\nthe database's own proprietary protocols. Without ODBC, in order to\ncreate a program that can communicate with--for example--FileMaker,\nAccess, and Oracle databases, LiveCode would have to include code for\nthree different database protocols. With ODBC, LiveCode can communicate\nwith any of these database types using the same code.\n\n**ODBC Managers**\n\nTo work with databases through ODBC, you need two pieces of software: an\nODBC manager, plus a database driver for the specific database type\nyou're using.\n\nWindows and OS X include ODBC software with the operating system. For \nLinux systems, you can download an ODBC manager and a set of drivers \n(see the section below titled \"Software for Database Access\" for more \ninformation).\n\n### Performance for Direct Access Versus ODBC Access\n\nTypically, accessing a database via ODBC takes more configuration and is\nslower than accessing the database directly. For this reason, LiveCode\nprovides the ability to access MySQL, PostgreSQL databases directly \nwithout going through the ODBC protocol. This ability will be valuable \nfor anyone doing complex or extensive professional database work.\n\nThe syntax of the functions in the Database library is identical for all\ndatabase types, so you do not need to rewrite your scripts to take\nadvantage of the increased efficiency of direct access.\n\n## Software for Database Access\n\nTo provide connectivity to databases, LiveCode works with database\ndrivers--software that translates application requests into the protocol\nrequired by a specific database.\n\n### Finding Database Drivers\n\nDatabase drivers for certain database types are included in the LiveCode\ndistribution. (The list of included database types depends on the\nplatform.) The sections below list which database drivers are included\nwith which platforms.\n\nIf you have installed LiveCode, you have all the software needed to use\nthe included database types. For other database types, you will need to\nobtain the appropriate database drivers before you can work with those\ndatabases.\n\n> **Important:** This section includes links to third-party web sites\n> and contains information about third-party software. This information\n> is provided for your convenience, but LiveCode is not responsible for\n> the software packages and sites referenced. Runtime regrets that it\n> cannot provide any support for installation and configuration of any\n> databasae.\n\n### MySQL\n\nMySQL database drivers are included as part of the LiveCode installation\non Linux, Mac OS X, and Windows systems.\n\n### PostgreSQL\n\nA PostgreSQL database driver is included as part of the LiveCode\ninstallation on Linux, Mac OS X and Windows systems.\n\n### SQLite\n\nDrivers for accessing this database are included with LiveCode. No\nadditional installation is necessary.\n\n### ODBC managers and database drivers\n\nTo use a database via ODBC, you must install the necessary ODBC software\nfor your platform. (Some operating systems include an ODBC\ninstallation.) ODBC software includes one or more database drivers, plus\nan ODBC manager utility.\n\n**ODBC on Windows systems**\n\nWindows systems include the MDAC (Microsoft Data Access Components) \npackage as part of the standard system installation. To configure ODBC \non Windows systems, use the ODBC Data Sources control panel.\n\n**ODBC on Mac OS X systems**\n\nOS X includes iODBC software as part of the standard system \ninstallation. To configure ODBC on OS X systems, use the ODBC \nAdministrator application in the Utilities folder.\n\n**ODBC on Linux systems**\n\nLiveCode supports iODBC and UnixODBC on Linux systems. You can download\nthe iODBC software from the iODBC web site at *http://www.iodbc.org/*.\nYou can download the unixODBC software from the unixODBC web site at\n*http://www.unixodbc.org*.\n\n**Creating a DSN for ODBC access**\n\nOnce you have installed the necessary software, you use the ODBC manager\nto create a DSN, which is a specification that identifies a particular\ndatabase.\n\nYou use the DSN to connect to the database via ODBC. The following\nexample opens a connection to a database whose DSN is named \"myDB\":\n\n\tget revOpenDatabase(\"ODBC\",\"myDB\",,\"jones\",\"pass\")\n\nOne of the advantages of setting up a DSN is that if you wish to change\nthe location of the database, you only have to edit the DSN settings,\nnot your application code. You can think of a DSN as a kind of shortcut\nor alias to your database."
	},	{
	"name":"working_with_media",
	"display name":"Working with Media",
	"location":"ide",
	"group":"Intermediate",
	"data":"# Working with Media\n\n## Introduction\n\nOne of the most popular uses for LiveCode is to create full blown\nmultimedia applications. Even if you aren't creating a traditional\nmultimedia application, many applications require a compelling user\ninterface.\n\nThis chapter details LiveCode's media support. We discuss the image\nfeatures and capabilities: how to import and export images in a variety\nof formats, how to manipulate images within LiveCode, working with\nmasks, the clipboard and screen capture, right through to animated GIFs.\nWe detail the vector graphic features and explain how to manipulate\nvector graphics by script. We then cover the video and audio feature\nset. Then we show you how to create custom themed buttons. Finally we\ngiven an overview of the support for visual transition effects.\n\n## Bitmap Images\n\nLiveCode supports a wide variety of image formats, including the popular\nPNG and JPEG formats. PNG images are space efficient and have full\nsupport for alpha channels. JPEG images are good for displaying photos.\nFor more details see the table below.\n\n| Format| Export| Mask | Comments |\n|------------|------------|-----------------------------|--------------------------------------------------------------------------------------------------|\n| **PNG**    | Yes        | Yes, 1-bit or alpha channel | Supports gamma adjustment, supports alpha channels, supports interlacing                         |\n| **JPEG**   | Yes        | No                          | Supports progressive JPEGs; lossy compression. Export allows you to set the level of compression |\n| **GIF**    | Yes        | 1-bit                       | GIF87a and GIF89a; supports animation; supports interlaced GIFs; maximum 256 colors              |\n| **BMP**    | No         | No                          | Uncompressed                                                                                     |\n| **PBM**    | Yes        | No                          | 1-bit (black and white)                                                                          |\n| **PGM**    | No         | No                          | Grayscale                                                                                        |\n| **PPM**    | No         | No                          |                                                                                                  |\n| **XBM**    | No         | No                          |                                                                                                  |\n| **XPM**    | No         | No                          | 1-bit (black and white)                                                                          |\n| **XWD**    | No         | No                          |                                                                                                  |\n| **PICT**   | No         | No                          | uncompressed                                                                                     |\n\nAs you can see from the table above, a number of the supported image\nformats can also be exported by LiveCode.\n\nYou can modify images using LiveCode's paint tools, or manipulate the\nbinary data by script or using an external.\n\nYou can create images from any of LiveCode's native objects, including\nbuttons, fields and graphics. These can then been exported in a number\nof formats. You can copy images from the clipboard or export images to\nthe clipboard.\n\nLiveCode can capture a portion of the screen, or the entire screen.\n\n### Importing Images\n\nTo import an image, choose File -\\> Import As Control -\\> Image File.\nSelect the image file you want to import. This will import the image\nfile into a new image object on the current card. This is equivalent to\nexecuting the **import paint** command in the Message Box.\n\n> **Note:** If you want to reuse an image throughout your application,\n> for example as part of a custom skin for your application, create a\n> substack and import all your images into that. You can then reference\n> them throughout your stack file. For more information, see the section\n> Creating Custom Skins, below.\n\n### Importing Referenced Images\n\nTo reference an image file on disk choose File -\\> New Referenced\nControl -\\> Image File. This creates an image object on the current card\nand sets its **fileName** property to the path of the image file you\nselected. Referenced images do not expand the size of your stack and are\nonly loaded from disk into memory when you navigate to the current card\nor otherwise display them on screen. Referenced images are ideal where\nyou want to update the image in an image editor and see the changes in\nLiveCode without having to re-import.\n\nYou may wish to consider creating a folder next to your stack file to\ncontain image files then using the Inspector to modify the file path to\nthe image to be a referenced path. This allows you to move the stack and\nfolder of images together onto a different system. for more information\non referenced file paths, see the section *File Name Specifications and\nPaths*.\n\nYou can use the standalone builder to copy referenced images into a\ndirectory (updating each image's **fileName** property) or to copy\nreferenced images into your stack. For more information see the chapter\n*Deploying your Application*.\n\n> **Important:** You cannot use the paint tools or manipulate the binary\n> data of referenced images. You must import them first. If you want to\n> modify the original file, you can make changes then export the image –\n> see below for more details.\n\n### Import using Screen Capture\n\nTo import an image by capturing a portion of the screen, choose File -\\>\nImport As Control -\\> Snapshot. Select the region of the screen you want\nto import.\n\nTo take a screen capture by script, use the **import snapshot** command.\nTo specify a section of the screen to import from without displaying the\ncrosshairs use **import snapshot from rect**:\n\n\timport snapshot from 100,100,200,200\n\nThis will create an image object on the current card from the\nrectangular area specified.\n\n### Creating Images\n\nTo create an image, drag an image object from the Tools palette to your\nstack. You may now paint on the image using the paint tools, set the\n`fileName`reference to an image or manipulate the binary data of the\nimage.\n\n### Using the Paint Tools\n\nTo access the paint tools, press the fold out triangle at the bottom\nright of the Tools palette.\n\n![](images/image119.png)\n\nFigure 85 – The Graphic Tools\n\n|     | Tool | Usage | Keyboard Modifiers |\n|-------------------------------|--------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------|\n| ![](images/image120.png) | Select             | Drag to select a rectangular area of an image                                                                                                                                                | Shift constraints to a square; command / control duplicates selection             |\n| ![](images/image121.png) | Bucket             | Fills shapes with color. Will fill any pixel connected to the pixel you click with the brush color                                                                                           | Control-click to fill with transparency                                           |\n| ![](images/image122.png) | Spray can          | Draw an airbrushed color using the brush shape                                                                                                                                               | Control-click to spray with transparency                                          |\n| ![](images/image123.png) | Eraser             | Remove color from an area leaving it transparent. Uses the brush shape                                                                                                                       |\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   |\n| ![](images/image128.png) | Polygon            | Draw polygon shape (hold down on the rectangle shape to select this shape)                                                                                                                   | Shift constrains lines angles to multiples of 22.5°; control creates transparency |\n| ![](images/image129.png) | Line               | Draw a straight line                                                                                                                                                                         | Shift constrains lines angles to multiples of 22.5°; control creates transparency |\n| ![](images/image130.png) | Freehand           | Draw a freehand curve (hold down on the line shape to select this shape). If the filled option is chosen the beginning and end of the curve are joined automatically when you finish drawing | Alt / option prevents drawing line border; control creates transparency           |\n| ![](images/image131.png) | Pencil             | Draw a single-pixel-width freehand line                                                                                                                                                      | Control creates transparency                                                      |\n| ![](images/image132.png) | Brush              | Draw brush strokes using the brush shape                                                                                                                                                     | Control creates transparency; command click to magnify                            |\n| ![](images/image133.png) | Fill (brush) color | Select a color to fill shapes or use with the brush tools                                                                                                                                    |                                                                                   |\n| ![](images/image134.png) | Line color         | Select a color to draw lines or use with the pencil tool                                                                                                                                     |                                                                                   |\n| ![](images/image135.png) | Brush shape        | Choose a brush shape for use with the brush, eraser and airbrush tools                                                                                                                       |                                                                                   |\n\nTo magnify an image, right click it with the pointer tool and choose\nMagnify from the menu.\n\nWhen you edit an image, it will be recompressed into the format\nspecified by the **paintCompression** global property.\n\n### Scripting with the Paint Tools\n\nPainting by script can be useful if you want the user to be able to see\neach paint action. If you want to manipulate the data of an image more\nefficiently off screen, see the next section.\n\nTo control the paint tools by script, create an image then choose the\npaint tool you want to use. Set the appropriate brush, pattern or line\nsize then use the drag command to paint.\n\nThe following example creates an image, chooses the brush tool, selects\na small circular brush shape, selects a red color, then draws a line:\n\n\t-- set the size of the image \n\tset the rect of the templateImage to 100,100,400,400 \n\tcreate image \n\tchoose brush tool \n\tset the brush to 8 \n\tset the brushColor to red -- could use an RGB triplet here \n\tset the dragSpeed to 20 -- very slow \n\tdrag from 120,120 to 300,300\n\nFor more information, see the entries for the **templateImage**,\n**tool**, **brush**, **brushColor**, **brushPattern**, **dragSpeed**,\n**penColor** and **penPattern** in the *LiveCode Dictionary*.\n\nYou may reduce the size of an image using the **crop** command.\n\nYou may rotate an image using the **rotate** command.\n\nTo adjust the quality of the scaling algorithm used when scaling an\nimage, set the **resizeQuality** property before setting the image's\nrect.\n\n### Manipulating Binary Image Data\n\nTo manipulate the binary data of an image, use the image's **imageData**\nproperty. This property returns the color and transparency value of each\npixel in the image in a consistent format regardless of the format the\nimage is saved in. The **imageData** is stored as binary, with each \npixel represented by 4 bytes. To convert it to and from RGB values use \nthe **byteToNum** and **numToByte** functions.\n\nFor example, the numeric value of the red, green and blue channels \nrespectively for the tenth pixel are given by the expressions:\n\n\tcharToNum(char (4 * 9 + 2 of the imageData of image <image>)\n\tcharToNum(char (4 * 9 + 3 of the imageData of image <image>)\n\tcharToNum(char (4 * 9 + 4 of the imageData of image <image>)\n\nTo manipulate the binary data of an image using an external, use the\n**imagePixMapID** property.\n\nWhen you set the **imageData** of an image the image will be \nrecompressed into the format specified by the **paintCompression** \nglobal property.\n\n### Rendering an Image from Objects\n\nUse the **import snapshot** command to create an image from objects or a\nregion of a stack. Instead of specifying a rectangle in global\ncoordinates (as described above) specify a stack or object.\n\n> **Note:** Unlike screen capturing, the stack or object you specify to\n> import an image from does not need to be displayed on screen. You can\n> create a layout off screen in an invisible stack then render it into\n> an image.\n \nTo import a snapshot of a region of a stack:\n\n\timport snapshot from 100,100,200,200 of stack \"Layout\"\n\nTo import a snapshot of an object:\n\n\timport snapshot from button 5 of stack \"objects\"\n\nThe import snapshot command creates a new image in the current\n**defaultStack**. The image is encoded using the current\n**paintCompression** format.\n\nTo save this snapshot directly to a file instead of creating an image,\nuse the export snapshot command: \n\n\texport snapshot from the selectedObject to file \"snap.jpg\" as JPEG\n\n### Exporting Images\n\nTo export an image in the current format that it is stored in, put it\ninto a binary file using the URL commands. The following example prompts\nthe user to select a file then export the image into it:\n\n\task file \"Select a file:\" \n\tput image \"picture\" into URL (\"binfile:\" & it)\n\nTo export an image in a different format, use the **export** command.\n\n\texport image \"picture\" to file \"picture.png\" as PNG\n\nYou may also export an image to a variable. See the **export** command\nin the *LiveCode Dictionary* for more information.\n\n### Copying and Pasting Images\n\nTo copy an image internally without using the system clipboard, simply\nput it into a variable or into another image.\n\n\tput image 1 into image 2\n\nTo recompress the image in a different format, use the **export**\ncommand to export it to a variable then put that variable into an image.\n\nTo copy an image to the clipboard, use the **copy** command.\n\n\tcopy image 1\n\nTo paste an image from the clipboard, use the **paste** command.\n\nTo transfer the binary data of an image to and from the clipboard get\nand set the **clipBoardData[\"image\"]** property. See the \n**clipBoardData** entry in the *LiveCode Dictionary* for more \ninformation.\n\n### Working with Animated GIFs\n\nYou can import an animated GIF image in the same way you import other\nimages.\n\nSet the **repeatCount** property to specify how often to play the\nanimation. Setting the **repeatCount** to 0 pauses the animation and\nsetting it to -1 causes it to repeat forever.\n\nTo change the current frame set the **currentFrame** property.\n\n> **Note:** If you use an animated GIF as a button icon, it will play\n> simultaneously in each button it is used for.\n\n## Working with Vector Graphics\n\nIn addition to bitmap graphics, LiveCode also supports vector graphics.\nYou can create vector graphics using the graphics tools, or by script.\nYou can manipulate them interactively in the IDE or by script. You can\nrelayer them, export a description of them or convert them to bitmap\nformat.\n\n> **Tip:** Animation Engine is a 3<sup>rd</sup> party library that\n> includes a set of functions for programming interactive graphic\n> animations. See the Related Software section of our web site for more\n> information.\n> \n\n### The Vector Graphic Tools\n\nTo see the graphic tools, unfold the triangle at the bottom right of the\ntools palette. The graphics tools are located above the paint tools on\nthe tools palette. The graphic tools operate in the same way as the\npaint tools, except that each time you draw a shape a new graphic object\nis created. Unlike paint graphics, you can resize and adjust graphic\nobjects after you have created them. For more information on the\nindividual shapes, see the section on *Paint Tools*, above.\n\n### Creating Graphics by Script\n\nTo create graphics by script, set properties of the **templateGraphic**\nthen use the **create graphic** command. For more information on\ntemplate objects, see the section *Creating objects off screen using the\ntemplate objects* in Chapter 7.\n\n### Manipulating graphics by script\n\nBecause each graphic is an individual object, you manipulate its\nappearance by setting properties rather than using the drag commands (as\nwith the paint tools, above). You can control all properties of the\ngraphic object by script including the rectangle, line and fill\nproperties. You can change a graphic from one type to another (e.g. a\nrectangle to an oval) by setting its **style** property.\n\nThe polygon style of graphic has a **points** property which allows you\nto set the individual points of a line.\n\nSimple motion can be applied using the **move** command. For example, to\nmove a graphic 100 pixels to the right asynchronously:\n\n\tmove graphic 1 relative 100,0 without waiting\n\nFor more information, see the **move** command in the LiveCode\nDictionary.\n\nTo program a more complex animation effect, calculate the changes to the\npoints or rectangles and set these values using timer based messaging.\nThe following example scales a graphic named \"rectangle\" down by 100\npixels over the course of 1 second.\n\n\tlocal sCount\n\ton mouseUp \n\t\tput 0 into sCount \n\t\tscaleGraphic \n\tend mouseUp\n\t\n\ton scaleGraphic \n\t\tadd 1 to sCount \n\t\tif sCount > 100 then exit scaleGraphic\n\t\tget the rect of graphic \"rectangle\" \n\t\tadd 1 to item 1 of it \n\t\tadd 1 to item 2 of it \n\t\tsubtract 1 from item 3 of it \n\t\tsubtract 1 from item 4 of it \n\t\tset the rect of graphic \"rectangle\" to it \n\t\tsend \"scaleGraphic\" to me in 10 milliseconds \n\tend scaleGraphic\n\nSee the section on *Timer based messaging* for more information on using\ntimers.\n\n## Working with Video\n\nLiveCode supports playback of video with the player object. On Windows\n*DirectShow* is supported. Media format support in the new Windows \nplayer control depends on which codecs are installed. A list of the\n[file formats and compression types available as standard](https://msdn.microsoft.com/en-us/library/ms787745(VS.85).aspx)\non Windows is available in the MSDN documentation\n\nOn Mac OS X systems, the player object uses the AV Foundation framework.\n\nOn Linux Systems, the player object can play back video using *mplayer*.\nThere are some functionality limitations: the **alwaysBuffer**, \n**startTime**, **endTime**, **showController** and **playSelection** \nproperties have no effect, and **play step forward**/**play step back** \ndo not work reliably.\n\nIn addition to these features, LiveCode has built-in support for the\nanimated GIF format. Animated GIF files can be played back without\n3<sup>rd</sup> party software. See above for more information. Other\nformats supported by plug-ins in web browsers can be played back using\nrevBrowser (e.g. Flash). See the topic on *revBrowser* for more\ninformation.\n\n### The Player Object\n\nUse the player object to play and interact with video and audio. To\ncreate a player object, drag one onto your stack from the Tools palette.\nTo select a movie file to play, open the Inspector for the player object\nand select a file to use as the source. Doing this sets the player's\n**fileName** property.\n\nTo *stream* a movie from an Internet server, set the fileName property\nto the URL address of the stream.\n\nTo play a player, use the **start** and **stop** commands.\n\n\tstart player 1 \n\tstop player 1\n\nThe following table describes commonly used player properties:\n\n| Property Name | Function | Example |\n|--------------------------|-----------------------------------------------------------------------------------------------------------|------------------------------------------------------------|\n| **alwaysBuffer**         | Forces the player to be buffered, allowing objects to be drawn on top and the current frame to be printed | `set the alwaysBuffer of player 1 to true`                   |\n| **showController**       | Shows or hides the player controller                                                                   | `set the showController of player 1 to false`                |\n| **currentTime**          | Sets the current frame                                                                                    | `set the currentTime of player 1 to 1000`                    |\n| **duration & timeScale** | The duration of the movie and the number of intervals per second of a movie                               | `put (the duration of me/the timeScale of me) into tRunTime` |\n| **currentTimeChanged**   | Message sent when the current frame changes                                                               | `on currentTimeChanged pInterval`<br>`put pInterval into field \"Time Code\"`<br>`end currentTimeChanged` |\n| **startTime**            | The start time of the selection                                                                           | `set the startTime of player 1 to 500`                       |\n| **endTime**              | The end time of the selection                                                                             | `set the endTime of player 1 to 1000                         |\n| **showSelection**        | Show the selection in the controller                                                                      | `set the showSelection of player 1 to true`                  |\n| **playSelection**        | Play only the selection                                                                                   | `set the playSelection of player 1 to true`                  |\n| **playRate**             | The speed to play the movie. Set this to -1 to play backwards                                             | `set the playRate of player 1 to 2`                          |\n| **looping**              | Causes playback to loop                                                                                   | `set the looping of player 1 to true`                        |\n| **playLoudness**         | Set the volume                                                                                            | `set the playLoudNess of player 1 to 50`                     |\n| **tracks**               | List of tracks within the movie                                                                           | `put the tracks of player 1 into tTracksList`                |\n| **enabledTracks**        | Enable or disable tracks                                                                                  | `Set the enabledTracks of player 1 to 3`                     |\n| **callbacks**            | A list of messages to be sent when the movie reaches specified time points                                | `set the callbacks of player 1 to \"1000, nextScene\"`         |\n\nThe following properties can be used to control a QTVR movie: **pan**,\n**tilt**, **zoom**, **currentNode**, **nodeChanged**, **hotspots**, and\n**hotSpotClicked**.\n\nFor more information on any of these terms, see the *LiveCode\nDictionary*.\n\n## Working with Sounds\n\nIn addition to playing back sound in a wide variety of formats using the\nplayer object, LiveCode has in-built support for playback of WAV, AIFF\nand AU format audio clips.\n\n> **Note:** We recommend you use the player object for playing audio as\n> it supports a wide range of formats and compression types. Use the\n> audio clip when you need basic audio playback on systems that do not\n> have any of the 3<sup>rd</sup> party libraries supported by the player\n> object installed.\n\n### Importing an Audio Clip\n\nTo import an audioClip choose File -\\> Import as Control -\\> Audio File.\nThis will import the selected audio file into the current stack as an\naudioClip.\n\n### Playing an Audio Clip\n\nTo play an audio clip:\n\n\tplay audioClip 1\n\nTo stop playing\n\n\tplay stop\n\nTo set the volume:\n\n\t-- sets the volume to 50% \n\tset the playLoudness of audioclip 1 to 50\n\n## Working with Visual Transition Effects\n\nLiveCode supports visual transition effects when changing card or hiding\nand showing objects. There are three types of effect support: built-in\neffects which work on all platforms, QuickTime effects which work on\nolder Mac OS X systems and Core Image effects which work\non Mac OS X.\n\nUse the **visual effect** command to display a visual effect. To go to\nthe next card with a dissolve transition effect:\n\n\tvisual effect dissolve slow go next card\n\nTo make changes to objects on the screen with a visual effect (e.g.\nhide, show or move them), first lock the screen, then make the changes,\nthen unlock the screen:\n\n\tlock screen \n\thide image 1 \n\tshow image 3 \n\tunlock screen with visual effect \"wipe right\"\n\nTo choose a QuickTime effect using the effect chooser dialog use:\n\n\tanswer effect \n\t-- store the visual effect as a custom property \n\tset the cEffect of this stack to it\n\nThen:\n\n\tvisual effect (the cEffect of this stack) \n\tgo next card\n\nFor more information on visual effects, see the **visual effect**\ncommand in the *LiveCode Dictionary*. To try out the different visual\neffects available in an interactive format see the [Multimedia\nWorkshop](http://www.runrev.com/developers/exploring-revolution/\nmultimedia/)\n\n## Creating Custom Skins\n\nIn addition to its support for system native controls, LiveCode allows\nyou the ability to create an entirely custom look, or skin, for your\napplication. All of the built-in elements can be replaced with themed\ngraphics allowing you to create rich multimedia. For example, LiveCode\nbuttons support \"icons\" of unlimited size which can be used to replace\nthe native appearance of a button entirely. Windows can be irregularly\nshaped and even contain holes and alpha mask (variable) transparency.\nAll of LiveCode's objects support a variety of transfer modes or inks.\nStacks can take over the entire screen or be displayed with a backdrop.\n\n### Custom Themed Buttons\n\nTo create a custom button, first create a regular button. Open the\n*Inspector* for the button and set its style to *Transparent*. Turn off\nthe *Show Name* property. Next, switch to the *Icons & Border* pane in\nthe Inspector. Turn off the *Hilite Border* property. You can now select\nany image you have imported to use as an icon for the button. To set the\nmouse down state, set the *hilite* icon. To set the roll over state set\nthe *hover* icon.\n\nA button \"icon\" may be an image of any size in LiveCode, allowing a\ncompletely custom look.\n\n> **Tip:** To use the same set of images as icons throughout your stack\n> file, create a substack and import all your theme images into it. Set\n> the ID property of each image to a high value (between 10,000 and\n> 100,000) so that it will be unique. You can now reference that image\n> anywhere in your application. If you want to change theme, you only\n> need to replace that image with another image and give it the same ID.\n\nAny object in LiveCode can behave like a button. For example, if you\nwant to create a graphic that responds when a user clicks on it, create\nthe graphic and add a **mouseUp** handler to it, in the same way you \nwould with a button.\n\n### Irregular Windows\n\nTo create an irregularly shaped window, import or create an image that\nhas a transparency mask. Then use the *Stack Inspector* to choose that\nimage as the stack's *Shape*. To change the shape by script, set the\n**windowShape** property. Many modern window managers support alpha\nblended windows (variable degrees of transparency). To create a window\nwith an alpha channel, import a PNG that contains an alpha channel and\nset the **windowShape** to this image.\n\n### Blend Modes (transfer modes or inks)\n\nBlend modes determine how an object's colors combine with the colors of\nthe pixels underneath the object to determine how the object's color is\ndisplayed. To set the blend mode of an object, use the *Blending* pane\nin the *Inspector* or set the object's **ink** property. All objects in\nLiveCode support blend modes, with the exception of stacks.\n\n\tset the ink of image \"picture\" to \"blendBurn\"\n\nFor more information, see the **ink** entry in the LiveCode Dictionary.\n\nTo set the degree of transparency, set the object's **`blendLevel`**\nproperty. All LiveCode objects (including stacks) support `blendLevel`:\n\n\tset the blendLevel of button 1 to 50 \n\t-- sets a button to 50% transparent\n\n### Full screen mode\n\nA stack can be displayed as full screen by setting its **fullScreen**\nproperty to true:\n\n\tset the fullScreen of this stack to true\n\nSet this property back to `false` to exit full screen mode.\n\nIf you want to hide or show the menu bar on Mac OS X use the **hide\nmenuBar** or **show menuBar** commands.\n\nSimilarly, use **hide taskbar** and **show taskbar** on Windows systems\nto hide and show the taskbar.\n\n### Displaying a Backdrop\n\nTo display a backdrop set the **backDrop** global property. You may set\nthe backDrop to a solid color or to the ID of an image.\n\n\tset the backDrop to \"black\"\n\nTo remove the **backDrop**:\n\n\tset the backDrop to none"
	},	{
	"name":"the_livecode_ide",
	"display name":"The LiveCode IDE",
	"location":"ide",
	"group":"Ide",
	"data":"# The LiveCode IDE\n\n## Introduction\n\nThis guide details the main components within LiveCodes Integrated\nDevelopment Environment (IDE). The development environment contains all\nthe features you need to quickly create a professional application. The\nApplication Browser allows you to find your way around your application\nas you develop it. The Properties Inspector allows you to set appearance\nand basic behaviors. The Script Editor allows you to add code to each\nobject in your application. In addition to these standard tools, the\nMessage Box provides a mini command-line that allows you to develop\naspects of your application automatically or to test out your\napplication’s code and functionality.\n\n## The Menu Bar\n\n### The File Menu\n\nThe File menu contains commands to open, close and save files; print;\nand incorporate files into your stack.\n\n| Menu Item | Action |\n|----------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **New Stack**                          | Opens a cascading menu you can use to choose a stack type to create. When you save the stack, LiveCode asks for a file name and location.                                                                                                                 |\n| **Default Size**\t \t\t\t\t\t | Creates a stack at the default size (400x400)\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t |\n| **Predefined Size**\t\t\t\t\t | Creates a stack at the predefined size specified\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t     |\n| **Script only Stack**\t\t\t\t\t | Creates a stack to be used for script only. You will be prompted for a stack name, and the script editor for the new stack will launch automatically\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t |\n| **New Substack of (main stack name)**  | Creates a new untitled stack in the same file as the active main stack. When you save the substack, it is saved in the main stack’s file. This item is disabled if the active window is not a main stack.                                                 |\n| **Open Stack...**                      | Opens the main stack whose file you select. If you select a HyperCard file, it is automatically converted into a LiveCode main stack.                                                                                                                     |\n| **Open Recent Stack**                  | Opens a cascading menu containing the names of the 30 main stacks you have most recently closed. Choose a name to open the stack. You can change the number of items displayed using Preferences.                                                         |\n| **Close**                              | Closes the active window. This item is disabled if no window is open.                                                                                                                                                                                     |\n| **Close and Remove from Memory...**    | Closes the current stack and all stacks in the same stack file as the current stack, and removes all stacks in the file from memory. This item is disabled if the active window is not a user stack.                                                      |\n| **Import as Control**                  | Opens a cascading menu you can use to choose a file and place its contents in a new control of the appropriate type. This item is disabled if the active window is not a stack.                                                                           |\n| **Image File...**                      | Imports the picture file you choose as a new image on the current card. You can import GIF, JPEG, PNG, BMP, XWD, XBM, XPM, or PBM, PGM, or PBM files (and PICT files on Mac OS and OS X systems). For more details see the section on the *image* object. |\n| **Audio File...**                      | Imports the sound file you choose as a new audio clip in the current stack. You can import WAV, AIFF, or AU files. For more details, see the section on the *audioClip* object.                                                                           |\n| **Video File...**                      | Imports the video file you choose as a new video clip in the current stack. You can import AVI, or MPEG files. For more details, see the section on the *videoClip* object.                                                                    |\n| **Text File...**                       | Imports the text file you choose as a new field on the current card.                                                                                                                                                                                      |\n| **Snapshot**                           | Displays a crosshairs cursor for you to select an area of the screen, and imports a screen shot of that area as a new image on the current card.                                                                                                          |\n| **All Images in Folder...**            | Imports all the picture files in the folder you choose, and places them in new images on the current card. Subfolders, and other types of files, are ignored. For more details see the section on the *image* object.                                     |\n| **All Audio Files in Folder...**       | Imports all the sound files in the folder you choose, and places them in new audioClips in the current stack. Subfolders, and other types of files, are ignored. For more details, see the section on the *audioClip* object.                             |\n| **All Video Files in Folder...**       | Imports all the video files in the folder you choose, and places them in new videoClips in the current stack. Subfolders, and other types of files, are ignored. For more details, see the section on the *videoClip* object.                             |\n| **All Text Files in Folder...**        | Imports all the text files in the folder you choose, and places them in new fields in the current stack. Subfolders, and other types of files, are ignored.\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                 |\n| **New Referenced Control**             | Opens a cascading menu you can use to select a file to reference (i.e. link) to a new control of the appropriate type. This item is disabled if the active window is not a stack.                                                                         |\n| **Image File...**                      | Creates a new image on the current card and links to the picture file you select in the new image object. For more details see the section on the *image* object.                                                                                         |\n| **Video File...**                      | Creates a new player on the current card and links to the video file you select in the new player object. For more details see the section on the *player* object.                                                                                        |\n| **All Images in Folder...**            | For each picture file in the folder you select, creates a new image on the current card and links it with one of the files. Subfolders, and other types of files, are ignored. For more details see the section on the *image* object.                    |\n| **All Videos in Folder...**            | For each video file in the folder you select, creates a new player on the current card and links it with one of the files. Subfolders, and other types of files, are ignored. For more details see the section on the *player* object.                    |\n| **Save**                               | Saves changes to the current stack and to any other stacks that reside in the same stack file. If the file has not yet been saved, you specify the new file’s name and location. This item is disabled if the active window is not a stack.               |\n| **Save As...**                         | Saves the current stack, along with any other stacks that reside in the same file, to a new file with a name and location you specify. The new file becomes the current working copy.                                                                     |\n| **Move Substack to File...**           | Saves the front most substack as a main stack in a file of its own, with a name and location you specify. The substack is removed from its previous stack file. This item is disabled if the active window is not a substack.                             |\n| **Revert to Saved...**                 | Throws away any changes to the current stack, along with any other stacks that reside in the same stack file. The entire stack file is then reloaded.                                                                                                     |\n| **Standalone Application Settings...** | Settings for packaging the current stack for distribution as a standalone application. This item is disabled if the active window is not a stack. For more details, see the section on*Deploying your Application*.                                       |\n| **Save As Standalone Application...**  | Packages the current stack into a standalone application for distribution using the settings set using the Standalone Application Settings window.                                                                                                        |\n| **Page Setup...**                      | Opens the Page Setup dialog box for the currently selected printer.                                                                                                                                                                                       |\n| **Print Card...**                      | Prints the current card.                                                                                                                                                                                                                                  |\n| **Print Field...**                     | Prints the currently selected field using the revPrintField command. For more details, see the section on *Printing*.                                                                                                                                     |\n| **Exit**                               | Closes all open stacks and quits LiveCode.                                                                                                                                                                                                                |\n\n### The Edit Menu\n\nThe Edit menu contains commands to select, cut, copy, and paste text and \nobjects.\n\n| Menu Item | Action |\n|----------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **Undo**             | Reverses the most recent text change, paint action, movement or deletion of an object.                                                                                                                                                                                                |\n| **Cut, Copy, Paste** | Cuts, copies or pastes the selected text or object. Text and images can be exchanged with other programs in this manner. Objects are only available within the currently running instance of LiveCode.                                                                                |\n| **Clear**            | Deletes the selected text or objects, without placing it on the clipboard.                                                                                                                                                                                                            |\n| **Duplicate**        | Makes a copy of the selected object or objects. If the object is a card, the copy is added after the current card. If the object is a control, the copy is placed on the current card, below and to the right of the original object. This item is disabled if no object is selected. |\n| **Select All**              | Selects all the text in the current field or all the controls on the current card.                                                                                                                                                        |\n| **Deselect All**            | Deselects any selected objects, or removes the insertion point from a field.                                                                                                                                                              |\n| **Invert Selection**        | Selects all the unselected objects and unselects all the selected ones. This item does not work on text selections.                                                                                                                       |\n| **Select Grouped Controls** | If this item is checked, clicking a control that's part of a group selects only that control. If unchecked, clicking a control that's part of a group selects the group.                                                                  |\n| **Intersected Selections**  | If this item is checked, dragging with the Pointer tool selects each object that intersects the dragged rectangle. If unchecked, dragging with the Pointer tool selects only objects that are entirely enclosed by the dragged rectangle. |\n| **Find and Replace...**     | Searches for and optionally replaces text in fields, properties, scripts, global variables, or button contents. For more details, see the section on *Find and Replace*.                                                                  |\n\n### The Tools Menu\n\nThe Tools menu contains commands to work with LiveCode's tool palettes \nand to use stack development tools.\n\n| Menu Item | Action |\n|----------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **Browse Tool**            | Chooses the Browse tool for running a project. Allows you to perform user actions such as running scripts by clicking buttons, or entering text in a field.                                                                                                         |\n| **Pointer Tool**           | Chooses the Pointer tool for editing a project. Allows you to select, move, and resize objects.                                                                                                                                                                     |\n| **Tools Palette**          | Shows or hides the Tools palette for choosing tools for object creation.                                                                                                                                                                                            |\n| **Paint and Draw Tools**   | Shows or hides the paint and draw tools in the Tools palette. \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   |\n| **Project Browser**        | Opens the Project Browser window, which lists all open stacks, the cards in each stack, and the controls on each card. For more details, see the section on the *Project Browser*.                                                                                  |\n| **Message Box**            | Shows or hides the Message Box. The Message Box is a command line tool that allows you to run scripts or perform automated editing operations. For more details, see the section on *The Message Box*.                                                              |\n| **Extension Manager**      | Shows or hides the Extension Manager. The Extension Manager is a stack which shows what widget and library extensions are currently installed.\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   |\n| **Extension Builder**      | Shows or hides the Extension Builder. The Extension Builder is a stack which aids in the creation of widget and library extensions to LiveCode. For more information on creating extensions using the Extension Builder, please see the *Extending LiveCode* guide. |\n| **Menu Builder**           | Creates or changes the menu bar in the currently active stack. For more details, see the section on the *Working with Menus*.                                                                                                                                       |\n\n### The Object Menu\n\nThe Object menu contains commands to change the properties of the \nselected object or objects, to create new objects, and to work with \ngroups.\n\n| Menu Item | Action |\n|-----------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **Object Inspector**        | Opens the Inspector for the currently selected object, allowing you to view and set object properties. If more than one object is selected, changes made to the properties are applied to each of the selected objects. This item is disabled if no object is selected. For more details, see the section on *The Properties Inspector*.                                                             |\n| **Card Inspector**          | Opens the Inspector for the current card, allowing you to view and set card properties.                                                                                                                                                                                                                                                                                                              |\n| **Stack Inspector**         | Opens the Inspector for the current stack, allowing you to view and set stack properties.                                                                                                                                                                                                                                                                                                            |\n| **Object Script**           | Opens the Script Editor for the selected objects. If more than one object is selected, a script editor window opens for each one. For more details, see the section on *The Script Editor*.                                                                                                                                                                                                              |\n| **Card Script**             | Opens the Script Editor for the current card.                                                                                                                                                                                                                                                                                                                                                          |\n| **Stack Script**            | Opens the Script Editor for the current stack.                                                                                                                                                                                                                                                                                                                                                         |\n| **Group Selected**          | Makes the selected objects into a group. This item changes to \"Ungroup Selected\" if the only selected object is a group. For more details, see the section on *Groups and Backgrounds*.                                                                                                                                                                                                              |\n| **Ungroup Selected**        | Makes the selected group into individual objects. This removes the group permanently if you visit another card before grouping the objects again. This item changes to \"Group Selected\" if more than one object is selected.                                                                                                                                                                         |\n| **Edit Group**              | Enters group-editing mode to make changes to the objects in the selected group. This item changes to \"Stop Editing Group\" while in group-editing mode. This item is disabled if no object is selected, if more than one object is selected, or if the selected object is not a group.                                                                                                                |\n| **Stop Editing Group**      | Leaves group-editing mode. This item changes to \"Edit Group\" if the stack is not already in group-editing mode.                                                                                                                                                                                                                                                                                      |\n| **Remove Group**            | Removes the selected group from the current card, without deleting it from the stack.                                                                                                                                                                                                                                                                                                                |\n| **Place Group**             | Opens a cascading menu containing the names of groups that are in the stack but not on the current card. Choose a group to add it to the current card. This item is disabled if all the groups in the stack already appear on the current card, or if there are no groups. Note: Only the names of top-level groups are listed; groups that are a part of another group are not listed in this menu. |\n| **New Card**                | Creates a new card following the current card. Note: If there are any shared groups on the current card when you choose this menu item, they are automatically placed on the new card. If a group's backgroundBehavior is false, they are not placed automatically on new cards.                                                                                                                     |\n| **Delete Card**             | Deletes the current card from the front most stack.                                                                                                                                                                                                                                                                                                                                                  |\n| **New Control**             | Opens a cascading menu you can use to create a new control. For more details, see the section on *Control Types*.                                                                                                                                                                                                                                                                                    |\n| **New Widget**              | Opens a cascading menu you can use to create a new widget control. For more details, see the section on *Control Types*.                                                                                                                                                                                                                                                                             |\n| **Flip**                    | Opens a cascading menu you can use to change the orientation of the selected image or graphic. This item is disabled if any object other than an image or graphic is selected.                                                                                                                                                                                                                       |\n| **Horizontal**              | Swaps the left and right edges of the selected image or graphic, flipping it around an imaginary line drawn from top to bottom of the object.                                                                                                                                                                                                                                                        |\n| **Vertical**                | Swaps the top and bottom edges of the selected image or graphic, flipping it around an imaginary line drawn from left to right of the object.                                                                                                                                                                                                                                                        |\n| **Rotate**                  | Opens a cascading menu you can use to rotate the selected image or graphic.                                                                                                                                                                                                                                                                                                                          |\n| **By...**                   | Rotates the selected image or graphic by the number of degrees you specify.                                                                                                                                                                                                                                                                                                                          |\n| **90° Right**               | Rotates the selected image or graphic 90 degrees to the right (clockwise).                                                                                                                                                                                                                                                                                                                           |\n| **90° Left**                | Rotates the selected image or graphic 90 degrees to the left (counterclockwise).                                                                                                                                                                                                                                                                                                                     |\n| **180°**                    | Rotates the selected image or graphic 180 degrees (halfway around).                                                                                                                                                                                                                                                                                                                                  |\n| **Reshape Graphic**         | Allows you to interactively reshape currently selected polygon or curve graphics.                                                                                                                                                                                                                                                                                                                    |\n| **Align Selected Controls** | Opens a cascading menu you can use to line up objects. This item is disabled if no object or only one object is selected.                                                                                                                                                                                                                                                                            |\n| **Left**                    | Moves the selected controls so their left edges are lined up with the left edge of the first control selected.                                                                                                                                                                                                                                                                                       |\n| **Right**                   | Moves the selected controls so their right edges are lined up with the right edge of the first control selected.                                                                                                                                                                                                                                                                                     |\n| **Top**                     | Moves the selected controls so their top edges are lined up with the top edge of the first control selected.                                                                                                                                                                                                                                                                                         |\n| **Bottom**                  | Moves the selected controls so their bottom edges are lined up with the bottom edge of the first control selected.                                                                                                                                                                                                                                                                                   |\n| **Make Widths Equal**       | Resizes the selected controls so that the width of each one is equal to the width of the first control selected.                                                                                                                                                                                                                                                                                     |\n| **Make Heights Equal**      | Resizes the selected controls so that the height of each one is equal to the height of the first control selected.                                                                                                                                                                                                                                                                                   |\n| **Send to Back**            | Moves the selected objects behind all other objects on the card. This item is disabled if no object is selected.                                                                                                                                                                                                                                                                                     |\n| **Move Backward**           | Moves the selected objects back one layer.                                                                                                                                                                                                                                                                                                                                                           |\n| **Move Forward**            | Moves the selected objects forward one layer.                                                                                                                                                                                                                                                                                                                                                        |\n| **Bring to Front**          | Moves the selected objects in front of all other objects on the card.                                                                                                                                                                                                                                                                                                                                |\n\n### The Text Menu\n\nThe Text menu contains commands to change the appearance of text.\n\n| Menu Item | Action |\n|------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **Text Style Options** | Applies or removes the selected style from the selected text or the selected object. These items are disabled if nothing is selected.                                                                                                                                                         |\n| **Link**               | Makes the selected text, or all text in the selected object into a link. Linked text has special properties in LiveCode, for example linked text will receive a linkClicked message when clicked on. For more details, see the section on the *Field* object.                                 |\n| **Subscript**          | Moves the selected text below the baseline and makes it smaller.                                                                                                                                                                                                                              |\n| **Superscript**        | Moves the selected text above the baseline and makes it smaller.                                                                                                                                                                                                                              |\n| **Font**               | Opens a cascading menu you can use to change the font face used for the selected text or objects.                                                                                                                                                                                             |\n| **Use Owner's Font**   | Causes the font face of the object's owner (if an object is selected) or the object the text is in (if text is selected) to be used, removing any font face specific to the selected text or objects. For more information on font inheritance, see the section on the *Message Hierarchy*.   |\n| **Size**               | Opens a cascading menu you can use to change the font size used for the selected text or objects.                                                                                                                                                                                             |\n| **Use Owner's Size**   | Causes the font size of the object's owner (if an object is selected) or the object the text is in (if text is selected) to be used, removing any font size specific to the selected text or objects. For more information on font inheritance, see the section on the *Message Hierarchy*.   |\n| **Color**              | Opens a cascading menu you can use to change the font color used for the selected text or objects. (This item is disabled if nothing is selected.)                                                                                                                                            |\n| **Use Owner's Color**  | Causes the font color of the object's owner (if an object is selected) or the object the text is in (if text is selected) to be used, removing any font color specific to the selected text or objects. For more information on font inheritance, see the section on the *Message Hierarchy*. |\n| **Pen Color**          | Changes the selected text, or text used in any selected objects, to use the current ‘pen color’ setting (used to draw graphics from the main tool palette).                                                                                                                                   |\n| **Align**              | Opens a cascading menu you can use to change the text alignment (justification) used for the text in the selected objects.                                                                                                                                                                    |\n\n### The Development Menu\n\nThe Development menu contains commands for debugging and for using \ncustom tool stacks.\n\n| Menu Item | Action |\n|---------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **Plugins**               | Opens a cascading menu you can use to open custom tool stacks stored in the Plugins folder.                                                                                                                                                                                                                                                                    |\n| **Plugin Settings**       | Customizes which messages are handled by the custom tool stacks stored in the Plugins folder.                                                                                                                                                                                                                                                                  |\n| **Test**                  | Simulates deployment to the selected test target.                                                                                                                                                                                                                                                                                                              |\n| **Test Target**           | Opens a cascading menu you can use to select what device or simulator to use when simulating deployment.                                                                                                                                                                                                                                                       |\n| **Script Debug Mode**     | If this item is checked, the debugger is enabled: the debugger window appears when a breakpoint is encountered during script execution, and you can enter the debugger when an execution error occurs. If unchecked, the debugger is disabled. For more details, see the section on *Debugging*.                                                               |\n| **Clear All Breakpoints** | Removes all breakpoints that you've used the Script Editor to mark, in all open stacks. Note: This menu item does not affect breakpoints set with the *breakpoint* command.                                                                                                                                                                                      |\n| **Message Watcher**       | Opens the Message Watcher window, used to view and track messages, function calls, getProp calls, and setProp triggers as they are sent to objects.                                                                                                                                                                                                            |\n| **Suppress Errors**       | Prevents display of the error window when LiveCode encounters a script error. |\n| **Suppress Messages**     | Prevents system messages (such as openCard and closeCard) from being sent during normal navigation. This option will also cancel any currently *pending* messages. |\n| **Suspend Development Tools** | Hides LiveCode's menus, palettes, and other parts of the development environment, so that you can preview how your application will look and behave as a standalone, outside the development environment. |\n\n> **Caution:** Suppressing errors will cause your scripts to fail \nsilently instead of giving an error message in the event LiveCode \nencounters an error.\n\n> **Tip:** To also suspend LiveCode libraries, hold down the Shift key \nwhile choosing the **Suspend Development Tools** menu item.\n\n### The View Menu\n\nThe View menu contains commands to move around the current stack and to \nshow or hide development tools.\n\n| Menu Item | Action |\n|-----------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **Go First**                      | Goes to the first card in the current stack.                                                                                                                                                                                                                                                                                                                         |\n| **Go Prev**                       | Goes back to the previous card in the current stack.                                                                                                                                                                                                                                                                                                                 |\n| **Go Next**                       | Goes forward to the next card in the current stack.                                                                                                                                                                                                                                                                                                                  |\n| **Go Last**                       | Goes to the last card of the current stack.                                                                                                                                                                                                                                                                                                                          |\n| **Go Recent**                     | Goes back to the card you were on before navigating to the current card.                                                                                                                                                                                                                                                                                             |\n| **Toolbar Text**                  | Shows or hides the text labels in the Toolbar at the top of the screen. To hide the Toolbar completely, uncheck both this item and \"Toolbar Icons\".                                                                                                                                                                                                                  |\n| **Toolbar Icons**                 | Shows or hides the icons in the Toolbar at the top of the screen.                                                                                                                                                                                                                                                                                                    |\n| **Palettes**                      | Shows or hides all open LiveCode palettes.                                                                                                                                                                                                                                                                                                                           |\n| **Rulers**                        | Shows or hides a ruler at the left and bottom edges of each open stack.                                                                                                                                                                                                                                                                                              |\n| **Grid**                          | If this item is checked, dragging and resizing objects is constrained by a pixel grid. If unchecked, you can drag and resize objects to any location. You can alter the grid spacing in Preferences.                                                                                                                                                                 |\n| **Backdrop**                      | Shows or hides a solid or patterned backdrop behind LiveCode's windows.                                                                                                                                                                                                                                                                                              |\n| **Show IDE Stacks in Lists**      | If this item is checked, elements of the LiveCode development environment appear in lists: for example, development environment stacks appear in the Application Browser, and LiveCode custom properties appear in the Custom Properties pane of the property inspector. If unchecked, elements of the LiveCode development environment do not appear in such lists. |\n| **Show Invisible Objects**        | If this item is checked, objects whose visible property is set to false are shown. If unchecked, objects whose visible property is set to false remain hidden.                                                                                                                                                                                                       |\n\n### The Window menu\n\nThe Window menu contains the names of open stack windows.\n\n| Menu Item | Action |\n|-------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **Send Window To Back** | Shuffles the frontmost stack window to the back and brings the second window to the front. (This item is disabled if only one stack is open or the active window is not a stack.) |\n\n### The Help Menu\n\nThe Help menu contains commands which allow you to find out more about \nusing LiveCode, license your copy of LiveCode, get technical support via \nemail, and check the LiveCode site for software updates. For more \ninformation, see the section on *Using the Documentation*.\n\n| Menu Item | Action |\n|-------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **Dictionary (API)**    | Opens the main LiveCode documentation window, where you can get information about all aspects of developing in LiveCode.                                                                                                                                       |\n| **Start Center**        | Opens the Start Center.                                                      \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t           |\n| **Sample Stacks**       | Launches revOnline in an external browser                                                     \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   |\n| **Sample Scripts**      | Opens the Resource Center, which contains many sample scripts, including tutorials on text processing and using databases.                                                      \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   |\n| **Beginner's Guide**    | Opens the beginner's guide in an external browser                                                                    \t                                                      \t    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   |\n| **All Guides**          | Opens the main LiveCode documentation window, which contains all of the user guides\t                                                         \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   |\n| **Tutorials**           | Launches the online LiveCode lessons portal in an external browser                                                      \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   |\n| **User Guide**          | Opens the old user guide in an external PDF viewer                                                   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                                         \t\t\t\t\t   |\n| **Forums**              | Navigates to the LiveCode discussion forums in an external browser                                                  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                                         \t   |\n| **Technical Questions** | Navigates to questions tagged LiveCode on StackOverflow in an external browser                                                 \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                                       |\n| **Discussion List**     | Navigates to the LiveCode discussion list in an external browser                                                  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                                         \t\t   |\n| **Newsletters**         | Navigates to LiveCode news letters and blogs in an external browser                                                  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                                         \t   |\n| **Release Notes**       | Opens the release notes in an external PDF viewer                                                   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                                         \t\t\t\t\t   |\n| **License Agreement**   | Opens the license agreement in an external text editor                                                   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                                         \t\t\t\t   |\n| **User Guide**          | Opens the old user guide as a PDF document                                                   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                                         \t\t\t\t\t\t\t   |\n| **Support…**            | Loads the support section of the LiveCode web site in your web browser.                                                                                                                                                                                        |\n| **Buy a license…**      | Loads the LiveCode store in your web browser.                                                                                                                                                                                                                  |\n| **Check for Updates…**  | Checks online to see if an update to LiveCode is available.                                                                                                                                                                                                    |\n| **Re-license LiveCode** | Deletes your LiveCode licensing information and restarts LiveCode allowing you to enter a new license key.                                                                                                                                                     |\n\n## The Property Inspector\n\nThe Property Inspector allows you to view and edit the properties for\nany selected object. Properties control how an object looks and some\naspects of an object’s behavior. The Inspector can be accessed by double\nclicking on a selected object, from the toolbar, from the *Object* menu\nand from context sensitive menus.\n\n![](images/image38.png)\n\nFigure 9 - Properties Inspector\n\n| &nbsp;| &nbsp;|\n|-------|-------|\n| **Lock icon**     \t\t| The lock icon locks the Inspector to the object currently being inspected. Once locked, the Inspector will not update when you change selection or switch to *Run* mode by choosing the *Browse tool*. This allows you to used a locked Inspector to change an object’s properties while interacting with your project. Selecting another object and choosing Inspect will create another Inspector to inspect the new object. You can use this facility to compare the properties of two objects. |\n| **Pane Selector** \t\t| This menu allows you to access each of the different panes within the inspector for a given object.                                                                                                                                                                                                                                                                                                                                                                                                |\n| **Action menu** \t\t\t| Use the action menu to select another object, edit the script of the current object or send a message to current object.                                                                                                                                                                                                                                                                                                                           \t\t\t\t\t\t\t\t\t\t\t\t |\n| **Settings menu**  \t\t| Use the settings menu to configure the settings of the property inspector.\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t |\n| **Property text** \t\t| Edit the contents of a property by typing into the text area within the Inspector. Press return to set the property and leave the current option selected. Press tab to set the property and move on to the next editable text property.                                                                                                                                                                                                                                                           |\n| **Property description** \t| This text describes the object property. By default this text is an English-like description of the property. However you can change this to contain the name of the LiveCode property in the Preferences or the settings menu. You may prefer to view the LiveCode property names if you are writing scripts that set object properties.                                                                                                                                                          |\n\n> **Important:** For documentation on what each individual object\n> property does, hover the mouse over the object until you see the\n> script property equivalent. Then look that term up in the LiveCode\n> Dictionary.\n\n### Property Inspector settings\n\n| &nbsp;| &nbsp;|\n|-------|-------|\n| **Tab display style**  | Controls whether to use icons or text for the pane selections. |\n| **Header/Footer size**  | Controls how large the pane selector icons are. \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t |\n| **Property labels**  | Controls whether to use the LiveCode script tokens for property labels or not. |\n\n## The Script Editor\n\nThe Script Editor within LiveCode has been designed specifically for\nLiveCode coding. It includes features to help make code more\nunderstandable. These include code indentation and color coded syntax\nhighlighting, as well as other integrated tools such as a Debugger and\nsyntax Dictionary. You can access the Script Editor for an object by\nselecting the object then choosing Script from the Tool bar. The Script\nEditor is also available from the Object menu, and from a number of\nother context sensitive menus detailed elsewhere in this guide. Each of\nthe Script Editor's components are outlined below.\n\n![](images/image39.png)\n\n### Main Script Area\n\nDisplay and edit scripts in this area. For more details on how to write\na script, see the section on Coding in LiveCode. The Script Editor will\ncolorize and format scripts automatically. When typing press tab to\nmanually format the script. Press Enter (on the numeric keypad) to\ncompile the script. Press Enter again to close the Script Editor.\n\n> **Note:** It is not necessary to close the Script Editor to run a\n> script, all that is required is that the script is applied using the\n> Apply button.\n\n### Breakpoints Area\n\nClick next to a line of script to set or remove a breakpoint. A\nbreakpoint specifies a point at which script execution should pause and\nthe debugger be loaded. For more details, see the section on Debugging.\n\n### Apply Button\n\nCompiles the script instantly. Any syntax errors will appear in the\nError Display and the script will not compile. A compiled script is not\nsaved until the stack that contains it is saved.\n\nPress *Enter* (on the numeric keypad) to activate the Compile button.\nPress *Enter* again to close the Script Editor.\n\nNote that *none* of the message handlers within the script will be\navailable if there is a Script Error during compilation, as none of the\nscript will have compiled.\n\n### Errors Pane\n\nCompile and execution errors will appear here. Double click the icon\nnext to the error details to highlight the line the error occurred on in\nthe script (if applicable).\n\n![](images/image40.png)\n\n### Handler List\n\nThe handler list displays all the functions, commands and handlers which\nare part of the current script. When a handler name is clicked, the\nscript will jump to that handler.\n\nThe currently displayed list of handlers can be filtered by typing in \nthe filter box below it.\n\n### Documentation Pane\n\nThe Script Editor also has a built-in syntax dictionary. When this tab \nis active a summary of the dictionary entry for the keyword which you \nare currently typing will be displayed. The full dictionary entry can be\nviewed by clicking Launch Documentation. Alternatively you can choose to\nview the entire entry in place by toggling the Full Document check box\nat the bottom of the documentation pane.\n\n![](images/image41.png)\n\n### Search Results Pane\n\nWhen you perform a 'find all' operation the results will be displayed \nunder this tab.\n\n![](images/image42.png)\n\n### Script Tabs\n\nWhen multiple scripts are open they will appear as tabs in the Script\nEditor. Right clicking on the tabs brings up a menu which allows a tab\nto be moved to a new window, closed, or kept while closing all other\ntabs. Clicking a tab will bring up the script it represents.\n\n## The Debugger\n\nThe Debugger helps you track bugs and understand code, by allowing you\nto pause the execution of your programs or step through them line by\nline. You cause execution to pause by setting breakpoints. When you run\nyour script, execution will pause at a breakpoint and you will be able\nto observe or edit variable values, continue execution or set another\nbreakpoint later in the code. Each debugger feature is outlined below:\n\n![](images/image43.png)\n\n### Continue\n\nWhen in debug mode, the Continue button will start running the code from\nthe current position. The program will run until the end is reached or\nanother breakpoint is found.\n\nWhen you are not in debug mode, the continue button can be used to\nexecute a handler. When you press it, a dialog will appear asking which\nhandler you would like to call and, if applicable, which parameters\nyou'd like to pass. On clicking OK the Script Editor will call the handler\nyou specified. It will also remember the handler for next time. To\nchange the handler called later, choose Entry Point… from the Debug menu.\n\n### Stop Debugging\n\nWill halt execution at the current point and stop debugging. You will\nthen be able to edit the script.\n\n### Show Next Statement\n\nThe Show Next statement option will return the debugger to the currently\nexecuting statement. This is useful if you have switched tabs or\nscrolled during debugging.\n\n### Step Into Next Statement\n\nUse Step Into to execute the next statement. If the next statement is a\ncommand or function ‘Step Into’ will jump to that function or command\nallowing you to execute it line by line.\n\n![](images/image44.png)\n\n### Step Over Next Statement\n\nUse Step Over to execute a command or function call without stepping\nthrough it line by line. The code within the handler will run at full\nspeed and execution will pause on the line after the handler call.\n\n![](images/image45.png)\n\n### Step Out\n\nThe Step Out function allows you to exit a command or function that you\nhave previously ‘stepped into’. When selected, the rest of the current\nhandler will run and execution will pause on the line after the handler\ncall. This is useful to avoid stepping through a long command or\nfunction line by line when you have identified that the error you are\nlooking for is not within that command or function.\n\n![](images/image46.png)\n\n### Debug Context\n\nThe Debug Context shows you the path of execution up to the current\nstatement you are paused on in the debugger. This allows you to identify\nwhere you are in your program and which handlers called the current\nhandler you are in. Changing the debug context allows you to view\nvariables from different parts of the program. Use this feature to find\nan erroneous command call or a call where wrong parameters were used.\n\n### Variable Watcher\n\nThe Variable Watcher tab allows you to examine the value of variables\nwithin your program while it is executing. As you step through your code\nthese values will be updated. The variable name is shown in the left\ncolumn and its value adjacent on the right. If a variable's value is too\nlarge to be displayed in the pane it will have a magnifying glass next\nto it. Clicking this will bring up a watch window which allows the\nvariable's value to be changed. Variables can also be edited by double\nclicking on their value in the variable watcher.\n\n> **Tip:** You can see the value of a variable by moving the mouse over\n> the variables’ name in the script field while debugging.\n\n### Breakpoint Management\n\nUse breakpoints to specify where to pause execution in the debugger. You\nset breakpoints by clicking in the gutter, or by right clicking in the\nBreakpoint Manager at the bottom of the Script Editor and selecting “New\nBreakpoint”. Each breakpoint is associated with a line of code and\nexecution is paused when that line is reached. Alternatively, a\ncondition can be assigned to the breakpoint. In this case, execution\nwill only pause if the condition is true when the line is reached.\n\n![](images/image47.png)\n\n> **Tip:** To see a list of all the breakpoints within a stack,\n> including the script they are in, which line they are on, and whether\n> there is a condition attached, click the Breakpoints Manager at the\n> bottom of the Script Editor. The check box to the left of each\n> breakpoint can be used to enable or disable the breakpoint. Double\n> click a breakpoint to go to that line in the associated object's\n> script. To edit a breakpoint, including adding a condition or changing\n> the line number, click the pencil icon. This can also be done by\n> right-clicking on the breakpoint, either in the Breakpoints Manager,\n> or the Script Editor's gutter.\n\n![](images/image48.png)![](images/image49.png)\n\nThe Breakpoint Manager also allows you to set watches. These are\nassociated with variables rather than lines of code and will pause\nexecution when the value of the variable you are watching changes.\nAlternatively, if the watch has a condition attached, execution will\nonly pause if, when the variable's value is changed, the condition is\ntrue. To add a watch, right click in the Breakpoint Manager and choose\n“New Breakpoint”.\n\n![](images/image50.png)\n\n## The Script Editor Menubar\n\nThe Script Editor menubar contains commands to help you edit scripts.\n\n### The File Menu\n\nThe File menu contains commands to print a script or close the Script\nEditor, with or without saving changes to the script.\n\n| &nbsp;| &nbsp;|\n|-------------|------------------------------------------------------------------|\n| **Compile** | Compiles the current script.                                     |\n| **Save**    | Saves the current stack.                                         |\n| **Close**   | Closes the current script.                                       |\n| **Print**   | Prints the current script.                                       |\n| **Quit**    | Exits LiveCode. Will prompt you to save your work if applicable. |\n\n### The Edit Menu\n\nIn addition to the standard commands to select, cut, copy and paste\ntext, the Edit menu contains the following, script-specific commands:\n\n| &nbsp;| &nbsp;|\n|-----------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **Revert**            | Takes any changes which haven't been compiled, and removes them from the current script.                                                                                                                                                                                                                                 |\n| **Comment**           | Places a comment character at the beginning of the selected text. If more than one line is selected a comment character is placed at the beginning of each line.                                                                                                                                                         |\n| **Uncomment**         | Removes comment characters from the selected text.                                                                                                                                                                                                                                                                       |\n| **Quick Find**        | Opens the “find” field within the Script Editor.                                                                                                                                                                                                                                                                         |\n| **Find and Replace…** | Brings up the Script Editor's find and replace dialog.                                                                                                                                                                                                                                                                   |\n| **Go**                | Brings up a dialog box which lets you enter a line number to jump to in the script.                                                                                                                                                                                                                                      |\n| **Variable Checking** | Variable checking causes LiveCode to perform a stricter check of your scripts. Using any variable without declaring it first, or using a literal string without encloning it in quotes causes a compile error. This behavior can be useful in tracking down certain subtle problems such as misspelling a variable name. |\n\n### The Debug Menu\n\nThe Debug menu contains commands to aid in debugging scripts:\n\n| &nbsp;| &nbsp;|\n|---------------|-----------------------------------------------------------------------------------------------------------------------------------|\n| **Show Next** | Highlights the next line of code to be executed. This is useful if you have changed tab or scrolled your script during debbuging. |\n\n| &nbsp;| &nbsp;|\n|---------------|--|\n| **Step Into** | Executes the next line of the handler being debugged. If the next line is a call to another handler, this command steps into that handler. This menu item is disabled if the debugger is not running. |\n\n> **Tip:** Press F11 to step into the next line.\n\n| &nbsp;| &nbsp;|\n|---------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **Step Over** | Executes the next line of the handler being debugged. If the next line is a call to another handler, this command steps over that call, skipping it and staying within the current handler. |\n\n> **Tip:** Press F10 to step over the next line.\n\n| &nbsp;| &nbsp;|\n|---------|----------------------------------------------------------------------------------------|\n| **Run** | Resumes normally executing the handler being debugged, starting from the current line. |\n\n> **Tip:** Press F5 to activate the Run button.\n\n| &nbsp;| &nbsp;|\n|-----------|-------|\n| **Abort** | Stops running the handler being debugged. |\n\n> **Tip:** Press control-period (or command-period) to activate the\n> Abort button.\n\n| &nbsp;| &nbsp;|\n|-----------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **Toggle Breakpoint** | Adds/removes a breakpoint from/to the currently selected line.                                                                                                                                                                                                                                            |\n| **Variables**         | Changes the tab view at the bottom of the Script Editor to the Variable Watcher tab.                                                                                                                                                                                                                        |\n| **Breakpoints**       | Changes the tab view at the bottom of the Script Editor to the Breakpoint Manager.                                                                                                                                                                                                                          |\n| **Entry Point**       | Lets you define which handler execution should begin at when debugging a script.                                                                                                                                                                                                                          |\n| **Script Debug Mode** | If this item is checked, the debugger is enabled: the execution of the program will pause when a breakpoint is encountered during script execution, and you can enter the debugger when an execution error occurs. If unchecked the debugger is disabled. For more details, see the section on Debugging. |\n\n### The Handler Menu\n\nThe Handler menu contains a list of all handlers in the current script.\nChoose a handler to go to that handler in the script.\n\n### The Window Menu\n\nThe Window menu contains the names of open script editor windows.\n\n### Autocomplete\n\n> **Note:** Autocomplete is available in LiveCode CommunityPlus and above\n\n#### Using Autocomplete\n\nWhile typing in the script editor a filtered list of available completions\nwill appear below the selection. Use the following keys to navigate the\ncompletion list:\n\n- right arrow - apply the completion or enter group of completions\n- left arrow - leave group of completions\n- up arrow - move up the list\n- down arrow - move down the list\n\nMoving the mouse will hide the completion list to avoid it remaining in\nplace over an area you would like to select. Completions include\nplaceholder fields which you can navigate with the tab key. Some\ncompletions may have multiple placeholders with the same name which\nwill be edited together. Clicking within a placeholder will select it.\n\n#### Autocomplete Pro\n\n> **Note:** Autocomplete Pro is available in LiveCode Indy and above\n\nAutocomplete Pro provides the following additional features:\n\n- Completions generated dynamically by introspecting\nthe object being edited and its message path\n- An Autocomplete Snippet Manager dialog is accessible from the script\neditor menubar to manage a custom set of completions.\n\n#### Autocomplete Snippet Manager\n\nAn autocomplete snippet provides the information required to match and\ncomplete some code in the script editor. The Autocomplete Snippet Manager\nallows the user to manage a custom set of completion snippets.\n\nCreate a new completion snippet by clicking the **+** icon and delete the\ncurrently selected snippet by clicking the **-** icon.\n\nThe dialog allows entry of the following:\n\n**Display Name** - choose a completion snippet to edit or change the\ndisplay name of the current snippet.\n\n**Priority** - A value between 1 and 100 indicating the order the\ncompletions should be matched in. Higher priorities will be listed\nbefore lower priorities.\n\n**Match Scope** - Choose whether the completion should try and match when\nthe selection is outside a handler, inside a handler or anywhere. A\ncomment completion might be anywhere, a statement completion (unless\nlocal, global or constant) would be only inside a handler and a handler\ncompletion would be outside a handler.\n\n**Match Words** - Choose whether to match only all the words of a line,\njust the word being written or either. A statement would be all the words\non a line, an expression would be just the current word and a comment\nwould be either.\n\n**Alternate Match String** - When matching completion snippets the text\nof the completion is matched first but in some cases that is not suitable\nor another string would be better to match. Enter a string to try matching\nif the completion fails to match.\n\n**Summary** - This field is optional and provides some detail below the\ncompletion in the script editor.\n\n**Completion** - This is the string to be used when replacing the\nselection after choosing a completion. The completion may be any script\nand any length. Add placeholders to the completion in the following form:\n\n    ${<name>:<type>}\n\nWhere:\n\n- name - is the text seen in the script editor\n- type - is used to filter the completions presented for the placeholder\none of:\n\n  - statement - any LiveCode command\n  - expression - any LiveCode expression\n  - identifier - a variable or handler name\n\nAdditionally, it is possible to include multiple placeholders with the\nsame name. When a multiple placeholder is selected they are edited\nat the same time. In this example completion as the user enters the\ncondition a comment is appended to the `end if` with the condition text.\nOnce the condition is complete the user may tab to the `-- code` line\nand enter a statement. The tab order is always top to bottom and left to\nright:\n\n    if ${condition:expression} then\n        ${-- code:statement}\n    end if # ${condition}\n\n## The Message Box\n\nThe Message Box is a command line tool that allows you to run scripts or\nperform automated editing operations. It allows you to try out short\nscripts, test parts of your program, provides a convenient output window\nfor debugging and can be used for editing and setting properties.\n\n> **Tip:** The Message Box is one of the more useful components in\n> LiveCode when you are starting out and wanting to try out simple\n> scripts. You will find you can try out many of the script examples in\n> this User's Guide or in the getting started materials on our website\n> simply by copy-pasting them into the Message Box.\n\nThe message box has the following modes:\n\n**Single Line** – execute single line and short scripts\n\n**Multiple Lines** – execute multiple line scripts\n\n**Global Properties** – view and edit global properties\n\n**Global Variables** – view and edit global variables\n\n**Pending Messages** – view, cancel and edit pending messages\n\n**Front Scripts** – view and edit frontScripts\n\n**Back Scripts** – view and edit backScripts\n\n![](images/image51.png)\n\nFigure 10 – The Message Box in Single Line Mode\n\n| &nbsp;| &nbsp;|\n|--------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **Command area**   | Type valid LiveCode code into this area. In *Single Line* mode, separate multiple lines with **;** (semi-colon) and press *Return* to execute. In *Multiple Line* mode, press return to separate lines, and press *Enter* to execute.<br><br>For example, in Single Line mode, to move all controls on the current card 10 pixels to the left you would run:                                                                                                                                                                                                                                                                                                                                        `repeat with i = 1 to the number of controls`;` move control i relative –10,0`;`end repeat`<br><br>In Multiple Line Mode:`repeat with i = 1 to the number of controls`<br><br>`move control i relative –10,0`                                                                                                                                                                                                                                                                                                                                                                                                                        <br><br>`end repeat`<br><br>Type **control-m** to focus the command area and start typing, whenever the Message Box does not have the focus. Press **control-u** when typing to clear the command area.<br><br>In *Single Line* mode press the **Up Arrow** key to cycle backwards through the history of previously entered and executed scripts. Press the **Down Arrow** key to cycle forwards. In *Multiple Line* mode, press **alt-up arrow** or **alt-down arrow** to cycle forwards or backwards, respectively. Press **control-u** to clear the current command area.<br><br>Typing the name of a global variable or property on its own will result in the line being auto-completed to include **put** in front of the global variable or property, thus the contents of that global will be placed into the results area. For example typing:<br><br>`time`<br><br>Will be auto completed to:                                                                                                                                                                                                                                                                                                                                                                                                                             <br><br>`put the time`<br><br>The current time will be placed in the results area.                                                                                                                                                                                                                                                                                                                                                                                                   |\n| **Results area**   | Displays:<br><br>The *result* function after running code in the *command area*.                                                                                                                                                                                                                                                                                                                                                                                        <br><br>Any script that uses the **put** command without a destination container.<br><br>Any script compile error created as a result of attempting to run code placed in the command area.<br><br>Any execution error created as a result of attempting to run code placed in the command area.<br><br>The **msg** special global will be updated whenever anything is placed in the results area, either by script or by directly editing the content of the results area. You can set or retrieve the content of this variable in any script. For example, try running the following in the command area:<br><br>`put the clipBoardData; replace return with return & return in msg`<br><br>The result placed into the results area will contain the current contents of the clipboard, with every return character replaced with a second return character.                                                                                                                                                                                                                                                                                       |\n| **Stack selector** | Select a stack to work on. Prior to executing any script the *defaultStack* will be set to the stack displayed in this menu. By default the Message Box will choose the front most editable stack. The menu is updated whenever you change the front most stack or click on the Message Box. You can use this menu to choose an alternative open stack. For example, running the following script in the command area of the single line message box:<br><br>`put the number of controls`<br><br>Would place the number of controls in the current card of the *stack displayed in the menu*, into the results area.                                                                                                                                                                                                                                                                                                                                    |\n| **Lock icon**      | This option prevents the Stack selector from updating automatically when you change stacks. Use this option if you want to run a number of commands on a specific stack regardless of which stack is currently in front.                                                                                                                                                                                                                              |\n| **Settings menu**  | Use the settings menu to configure the settings of the message box. \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t |\n| **Target action**  | Click the target icon to navigate to the last line of script that executed a **put** command with the message box as its target.                                                                                                                                                                                                                            |\n\n\n### Message Box settings\n\n| &nbsp;| &nbsp;|\n|--------------------|--------|\n| **Tab display style**  | Controls whether to use icons or text for the mode selections. |\n| **Header/Footer size**  | Controls how large the mode selector icons and footer action icons are. \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t |\n| **Auto update pending messages**  | Toggles whether the pending messages as displayed in message box in pending messages mode are updated automatically or manually. \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t |\n| **Select intelligence object**  | The Message Box will attempt to auto complete the typing of a name of an object property, resulting in putting the contents of that property into the results area. You can choose whether the auto-complete should attempt to use the currently selected object, or the object directly underneath the mouse. For example, with an object selected, entering:<br><br>`width`<br><br>Will result in:<br><br>`put the width of the selObj`<br><br>The width of the currently selected object will be placed in the results area. The `selObj`will be substituted with the `mouseControl`if you choose this option. In the example above, that would result in the width of the object underneath the mouse being placed in the results area instead. For more details on the `selObj`function or the `mouseControl`functions, see the LiveCode Dictionary.                                                   |\n\n### Single and Multiple Line Modes\n\nUse the Single and Multi-Line modes to execute short scripts.\n\n### Global Properties\n\nThe Global Properties mode allows you to view and edit all global\nproperties. Scroll to select a property from the list on the left and\nselect it to view or edit it. Typing a portion of the property name into\nthe Filter field at the top will filter the list of properties. Changes\nto global properties take effect immediately. If a property is ‘read\nonly’ this will be indicated when you select it and editing it will have\nno effect. For more details on Global Properties, see the section on\n*Global Properties.*\n\n### Global Variables\n\nThe Global Variables mode allows you to view and edit all global\nvariables. Environment variables are shown first, followed by other\nvariables. Scroll to find a variable from the list on the left and\nselect it to view or edit it. Typing a portion of the variable name into\nthe Filter field at the top will filter the list of variables. Changes\nto global properties take effect immediately. The Show LiveCode UI\nVariables is an advanced option, discussed in the section on Editing the\nLiveCode User Interface. For more details on Global Variables, see the\nsection on *Global Variables*.\n\n### Pending Messages\n\nThe Pending Messages mode allows you to view all the current timer based\nmessages that are pending. This is the same as the global property the\n**pendingMessages**. You can select a pending message to edit its script\nor cancel it.\n\n> **Tip:** You can cancel all current pending messages using the\n> **Suppress Messages** button on the toolbar.\n\nPressing update refreshes the list with the current list of pending\nmessages. The Auto Update mode refreshes the list continuously. Note\nthat the Auto Update takes place every 200 milliseconds. If your\nmessages fire more quickly they may not be displayed. For more details\non Pending Messages, see the section on *Timer Based Messaging*. The\nShow LiveCode UI Messages is an advanced option, discussed in the\nsection on *Editing the LiveCode User Interface*.\n\n### Front Scripts & Back Scripts\n\nThese modes list all the scripts currently available as libraries at the\nfront or back of the message path. This is the same as the global\nproperties the **frontScripts** and the **backScripts**. Select a front\nor back script to remove it or edit its script. For more details on\nlibrary scripts, see the section on *Extending the Message Path*. The\nShow LiveCode UI Scripts is an advanced option that displays all of the\nlibraries used by the LiveCode IDE. This is discussed in the section on\n*Editing the LiveCode User Interface*.\n\n### Stacks In Use\n\nThis mode is the same as the Front and Back scripts mode, except that it\ndisplays the **stacksInUse** global property. You can also add a stack\ndirectly using the Add button.\n\n## The Toolbar\n\nThe main toolbar provides easy access to commonly used functions.\n\n![](images/image52.png)\n\nFigure 11 – The Main Toolbar\n\nFor details on what each toolbar icon does, see the section on the Menu\nBar (above).\n\nTo hide and show the text or icons on the tool bar, use \n**View -\\> Toolbar Text** and **View -\\> Toolbar Icons**. To hide the \nToolbar completely, uncheck both options.\n\n## Find and Replace\n\nThe Find and Replace dialog allows you to search your entire\napplication, a portion of the application, multiple files in a\ndirectory, or stacks specified in your application’s **stackFiles**\nproperty. You can search for object names, scripts, field & button text,\ncustom properties, and other properties. After performing a search you\ncan replace the search term with a replacement term, either in all of\nthe results or on a selection of the results.\n\n![](images/image53.png)\n\nFigure 12 – Find and Replace\n\n| &nbsp;| &nbsp;|\n|--------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **Find field**     | Enter a search term.                                                                                                                                                                                         |\n| **Search In menu** | A menu with the following options:<br><br>**The current selection** – Searches the currently selected objects<br><br>**This card** – Searches the current card of the front most editable stack<br><br>**This stack** – Searches the front-most editable stack<br><br>**This stack File** – Searches the mainStack and all of the subStacks within the stack file associated with the current front most editable stack<br><br>**This stack file and its stack files** – Includes the stacks referenced in this stacks stackFiles property. For more details on the stackFiles property, see the section on *Structuring Your Application*.<br><br> > **Important:** StackFiles are normally set on the mainStack of your application. Ensure that you bring the mainStack to the front before searching its stackFiles. If you search using this option when a subStack is in front, your search will not include any stackFiles.<br><br>**All open stacks** – Searches all open stack files that are currently on screen<br><br>**All open stack files** – Searches all open stacks, including all mainStacks and subStacks in each file<br><br>**Specific open stack file** – Allows you to select a specific open stack file to search<br><br>**All stack files in a folder** – Searches all the stacks in a folder you specify<br><br>**Global variable contents** – Searches the contents of currently declared global variables |\n| **Find button**    | Performs the search |\n| **Case Sensitive** | Specifies that the search should be case sensitive (e.g. \"a\" and \"A\" are treated as different characters) |\n| **Regular Expression**                   | Specifies that the Find Field contains a regular expression instead of plain text. A regular expression allows you to describe a pattern of text to match. For more details on using regular expressions, see the section on *Using Regular Expressions* below. |\n| **Obey dontSearch properties**           | Specifies that fields, cards or groups with their dontSearch property set to true should be excluded from the search. For more details on the *dontSearch* property, see the LiveCode Dictionary.                                                               |\n| **Search marked or unmarked cards only** | Specified that the search should be restricted to either marked or unmarked cards. For more details on marked and unmarked cards, see *mark* in the LiveCode Dictionary.                                                                                        |\n| **Search in…**                           | Allows you to specific which object properties to search:                                                                                                                                                                                                       |\n| **Name**                                 | Searches an object’s *short name* property.                                                                                                                                                                                                                     |\n| **Script**                               | Searches an object’s *script* property.                                                                                                                                                                                                                         |\n| **Custom**                               | Searches and objects custom properties and custom property sets. For more details on Custom properties, see the section on *Custom Properties*.                                                                                                                 |\n| **Field Text**                           | Searches within field text.                                                                                                                                                                                                                                     |\n| **Button Text**                          | Searches button text. This includes text in menus. For more information on buttons and menus, see the section on *Control Types*.                                                                                                                               |\n| **All Other**                            | Searches all other commonly used object properties. For more details on exactly what is included, see the *properties* entry in the LiveCode Dictionary.                                                                                                        |\n| **Results column header**                | Allows you to sort search results by clicking. Drag between the column headers to change column widths.                                                                                                                                                         |\n| **Search Results Area**                  | Displays a list of objects that match the search parameters.                                                                                                                                                                                                    |\n| **Remove from List**                     | Removes the currently selected search result in the Search Results area from the list. Once removed, the object will no longer be included in any replace operation.                                                                                            |\n| **Replace With**                         | Specifies a term to use to replace the search term with.                                                                                                                                                                                                        |\n| **Replace in All**                       | Replaces the Find Field with the Replace With field in all objects currently listed in the Search Results Area.                                                                                                                                                 |\n\n## Keyboard Shortcuts\n\n| **The Development Environment**  | **Windows / Linux** | **Mac OS X**|\n|------|--------|-------|\n| Choose run (browse) tool                       | Control-9                               | Command-9                               |\n| Choose edit (pointer) tool                     | Conttrol-0                              | Command-0                               |\n| Toogle between run and edit tools              | Control-alt-tab                         | Command-option-tab                      |\n| Hide or show palettes                          | Control-tab                             | Command-control-tab                     |\n| Display context menus when running             | Control-shift-right click               | Command-control-shift-click             |\n| Save all open stacks                           | Control-alt-s                           | Command-option-s                        |\n| Apply default button in Save dialog            | Return                                  | Return                                  |\n| Apply non-default button in save dialog        | Control-1<sup>st</sup> letter of button | Command-1<sup>st</sup> letter of button |\n\n| **Navigation** | **Windows / Linux** | **Mac OS X**|\n|------|--------|-------|\n| Go to the first card                           | Control-1                               | Command-1                               |\n| Go to the previous card                        | Control-2                               | Command-2                               |\n| Go to the next card                            | Control-3                               | Command-3                               |\n| Go to the last card                            | Control-4                               | Command-4                               |\n| Go to the recent card                          | Control-5                               | Command-5                               |\n| Go to the top or bottom of a field             | Control-up/down arrow                   | Command-up/down arrow                   |\n\n| **Objects**  | **Windows / Linux** | **Mac OS X**|\n|------|--------|-------|\n| Select all                                     | Control-a                               | Command-a                               |\n| Duplicate                                      | Control-d                               | Command-d                               |\n| Create card                                    | Control-n                               | Command-n                               |\n| Nudge control                                  | Arrow keys                              | Arrow keys                              |\n| Nudge control by 10 pixels                     | Shift-arrow-keys                        | Shift-arrow-keys                        |\n| Open object inspector for selection            | Return                                  | Return                                  |\n| Open stack inspector                           | Control-K                               | Command-K                               |\n| Remove styles from selected text               | Control-;                               | Command-;                               |\n| Equalize heights of selected controls          | Control-shift-=                         | Command-shift-=                         |\n| Equalize width of selected controls            | Control-=                               | Command-=                               |\n| Magnify image with paint tool                  | Control-right-click                     | Command-click                           |\n| Apply transparency with paint tool             | Control-click                           | Control-click                           |\n| Constrain paint tool selection to a square     | Shift                                   | Shift                                   |\n| Constrain object aspect ratio                  | Shift                                   | Shift                                   |\n\n| **The Code Editor**  | **Windows / Linux** | **Mac OS X**|\n|------|--------|-------|\n| Edit script of selected object                 | Control-e                               | Command-e                               |\n| Edit card script                               | Control-shift-c                         | Command-shift-c                         |\n| Edit stack script                              | Control-shift-s                         | Command-shift-s                         |\n| Edit script of object under mouse              | Control-alt-click                       | Command-option-click                    |\n| Apply changes                                  | Enter                                   | Enter                                   |\n| Apply changes and close                        | Enter twice                             | Enter twice                             |\n| Apply changes and save stack                   | Control-s                               | Command-s                               |\n| Comment out selected lines                     | Control-hyphen                          | Command-hyphen                          |\n| Remove comments                                | Control-shift-hyphen                    | Command-shift-hyphen                    |\n| Switch to find mode                            | Control-f                               | Command-f                               |\n| Find next                                      | Control-g                               | Command-g                               |\n| Find selected text                             | Control-Option-f                        | Command-Option-f                        |\n| Format handler or move to next placeholder     | Tab                                     | Tab                                     |\n| Next tab in Editor                             | Control-tab                             | Control-tab                             |\n| Previous tab in Editor                         | Control-shift-tab                       | Control-shift-tab                       |\n| Show completions palette                       | F1                                      | F1                                      |\n\n| **The Message Box** |  **Windows / Linux** | **Mac OS X**|\n|------|--------|-------|\n| Open/close message box                         | Control-m                               | Command-m                               |\n| Switch to first tab in message box             | Control-m                               | Command-m                               |\n| Clear message field                            | Control-u                               | Command-u                               |\n| Scroll through recent messages (single line)   | Up/down arrow                           | Up/down arrow                           |\n| Scroll through recent messages (multiple line) | Alt-up/down arrow                       | Option-up/down arrow                    |\n| Execute message (single line)                  | Return                                  | Return                                  |\n| Execute message (multiple line)                | Enter<br>Control-Return                 | Enter<br>Control-Return                 |\n\n| **The Debugger** |  **Windows / Linux** | **Mac OS X**|\n|------|--------|-------|\n| Step Into                                      | F11                                     | F11                                     |\n| Step Over                                      | F10                                     | F10                                     |\n| Step Out                                       | Shift-F11                               | Shift-F11                               |\n| Run                                            | F5                                      | F5                                      |\n| Stop                                           | Shift-F5                                | Shift-F5                                |\n| Abort                                          | Control-.                               | Command-.                               |\n\n| **The Project Browser** |  **Windows / Linux** | **Mac OS X**|\n|------|--------|-------|\n| Scroll through objects                         | Up/down arrow                           | Up/down arrow                           |\n| Expand/contract child objects                  | Right/left arrow                        | Right/left arrow                        |\n| Open object                                    | Return                                  | Return                                  |\n| Edit script of object                          | Shift-Return                            | Shift+Return                            |\n| Edit behavior script of object                 | Shift-Alt-Return                        | Shift-Alt-Return                        |\n| Inspect object                                 | Control-Return                          | Command-Return                          |"
	},	{
	"name":"deploying_your_application",
	"display name":"Deploying Your Application",
	"location":"ide",
	"group":"Deployment",
	"data":"# Deploying Your Application\n\n## Introduction\n\nWith LiveCode, it is easy to deploy your application to anyone.\n\nUsing the standalone building capability in LiveCode you can create a native \napplication for each operating system you want to support. Users who do not have LiveCode \ncan run these applications like any other application they download and install. \nStandalone applications can have their own identity as true applications, include\nicons, document associations and more.\n\n## Building a Standalone Application\n\nWhen you have finished your LiveCode application and what to distribute it you can build \nit into a standalone application. These applications do not require users to have LiveCode.\nAll of LiveCode's feature set is available for use in a standalone application, with the \nexception that you cannot set scripts on objects.\n\nThe builder itself will let you build standalone applications for any platform it supports, \nfrom any platform it supports with the exception that iOS standalones must be\nbuilt on Mac OS X. For example you can build a Windows standalone on a Mac OS X\nmachine. However, you may wish to check that your application looks and behaves correctly \non each platform you intend to support. Please note it is inherently harder to debug an \napplication that has been built as a standalone, so you should test your application as \nthoroughly as possible before building it.\n\nRelated lessons:\n\n* [Building Standalone Applications](http://lessons.livecode.com/m/4603/l/44282-building-standalone-applications)\n* [How do I Develop Cross-Platform in LiveCode?](http://lessons.livecode.com/m/4069/l/28092-how-do-i-develop-cross-platform-in-livecode)\n\n### Step by step\n\nDeploying an app to standalone is straightforward:\n\n1) Open your stack in the LiveCode IDE\n\n2) Select **File → Standalone Application Settings...** from the menu bar\n\n3) Select the settings for your app\n\n4) Make sure that checkboxes for each platform you wish to build for are checked\n\n5) Close the standalone settings window\n\n6) Select **File → Save as Standalone Application...** from the menu bar\n\nYour application will be packaged up and placed in the selected output folder.\n\n### Standalone Applications Settings\n\nThe Standalone Applications Setting dialog allows you to create settings for your \nstandalone application. This dialog can be found in the File menu. The settings you enter \nare applied to the current front most editable stack and are saved with the stack. This \nmeans you only need to enter the settings once for each application you create. The same \nsettings will apply if you do another build in the future.\n\nRelated lessons:\n\n* [The Standalone Application Settings](http://lessons.livecode.com/m/4603/l/685074-the-standalone-application-settings)\n\n#### General Settings\n\n![](images/standalone-settings-general.png)\n\nFigure 1 – Standalone Settings – General Tab\n\n| &nbsp;| &nbsp;|\n|-------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **Mode Selector**       | Choose between the different standalone application settings screens.                                                                                                                                                                                                                                               |\n| **Standalone Name**     | Set the name of your standalone application. This should be the name you want your finished application to have. Don’t include a file extension (.exe on Windows or .app on Mac OS X) as the standalone builder can create standalones for multiple platforms and will add the appropriate extension automatically. |\n| **Inclusions Selector** | Choose the components you want to include in a standalone. You may either choose to search for required inclusions automatically, or manually select the components you want to include.                                                                                                                            |\n\n**Search for Inclusions**\n\nThis is the default option. When selected, LiveCode will search your application stack file \n(main stack and sub stacks) to attempt to determine what components your application uses. \nIt will then include those items.\n\n**Select Inclusions for the Standalone Applications**\n\nSelect this option if you want to specify the components to include manually. You may wish \nto use this option if your application dynamically loads components that cannot be searched \nat this point automatically, or if you know exactly what components your application uses \nand wish to speed up the standalone building process by skipping the automatic search step.\n\nIt is important that you choose to include all the components that your application uses \nor it may fail. If you do not include your own custom error reporting or LiveCode’s \nstandalone error reporting dialog (discussed below) such failure may be silent – i.e. an \noperation in your standalone will simply cease working without displaying anything to the \nuser|\n\n| &nbsp;| &nbsp;|\n|----------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **Profiles Settings**                        | Choose between the Property Profile settings options. You only need to alter settings in this area if you have used Property Profiles (see the section on *Property Profiles* in Chapter 4, Builder a User Interface above)                        |\n| **Remove all profiles**                      | Removes all profiles and builds the standalone using the currently active profile on each object. Select this option if you don't need to change profile in the standalone and want to save disk space by removing extraneous profile information. |\n| **Set all objects to profile**               | Set all objects to a specific profile then remove the profile data from objects.                                                                                                                                                                   |\n| **Include profiles and the profile library** | Include the profile library and allow switching between profiles in the standalone application. You can choose whether to include specific profiles or all profiles.                                                                               |\n\n\n#### Including Additional Stacks\n\n![](images/standalone-settings-stacks.png)\n\nFigure 2 – Standalone Settings – Stacks Tab\n\n| &nbsp;| &nbsp;|\n|------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **Stack Files**                          | Use this section to add additional stack files to your application. Any stacks you add to this section will be added to the `stackFiles`property of the main stack of your standalone. This means that any scripts within your standalone application will be able to locate and reference these stacks by name. |\n| **Advanced Options**                     | Use this section to control exactly how multiple stack files are managed in your standalone.                                                                                                                                                                                                                    |\n| **Move substacks into individual files** | If you select this option, each of the sub stacks in the stack files you select will be moved into their own individual file, located in the data folder or within the application bundle of your standalone.                                                                                                   |\n| **Rename stackfiles generically**        | Renames each sub stack file using a number on disk (instead of using the name of the sub stack). Select this option if you do not want the names you have selected for stacks to be visible to the end user in the filing system.                                                                               |\n| **Create folder for stackfiles**         | Creates a folder and places the stack files into that folder, instead of storing them at the same level as the standalone executable. All references in the `stackFiles`property will refer to this folder using a relative path so the stacks can still be located by the standalone application.               |\n| **Individual stack options**             | Select a stack file on the left then an individual stack from within the file to set options on that stack.                                                                                                                                                                                                     |\n| **Set destroyStack to true**             | Set this option if you want the selected stack file to be removed from memory when it is closed. This option is useful if you are loading large stacks into memory and want them to be removed when they are closed.                                                                                            |\n| **Encrypt with password**                | Secures the scripts within the selected stack file with a password. This provides a basic level of encryption that prevents someone from casually reading the scripts in the stack by opening the file in a binary file viewer.                                                                                 |\n\n> **Note:** A stack file directly attached to a standalone application cannot have changes\nsaved to it. This stack is bound directly to the executable file that runs. The OS locks \nan executable file while it is running. If you want to save changes in your standalone \napplication, split your stack up until multiple files. A common technique is to create a \n\"splash screen\" stack that contains a welcome screen and then loads the stacks that make \nup the rest of your application. These stacks are referenced as `stackFiles`on this pane \nin the standalone settings screen. It is thus possible to automatically update these \ncomponent stacks, or to save changes to them. You may also want to consider creating \npreference files in the appropriate location on your end user's system (see the \n`specialFolderPath`function and query/setRegistry functions for more information).\n\n> **Note:** Adding additional stacks to the stacks tab is not supported for iOS,\nAndroid or HTML5 standalones. Additional stacks may be included via the Copy\nFiles tab.\n\n#### Including Additional Files\n\n![](images/standalone-settings-copy-files.png)\n\nFigure 3 – Standalone Settings – Copy Files\n\n| &nbsp;| &nbsp;|\n|----------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **Non-stack files in the application** | List other files to be included in the standalone. Use this feature to include help documents, read me files and other resources that you want to include with your standalone each time you build.                                                                    |\n| **Copy Referenced Files**              | Loops over all image and player objects in stacks and copies any files referenced in the `fileName`property of these objects into the standalone. Then automatically sets the `fileName`property to reference these files in the standalone using referenced file paths. |\n| **Destination folder**                 | Create a subfolder within your standalone to copy the image and movie files to.                                                                                                                                                                                        |\n\n#### Including Additional Resources \n\n![](images/standalone-settings-inclusions.png)\n\nFigure 4 – Standalone Settings – Inclusions\n\nThe list of resources available to select for inclusion in a standalone\napplication are a combination of currently installed LiveCode Builder\nextensions, externals and database drivers (both built-in and those \nfound in user folders), and built-in resources and script libraries.\n\nThe following built-in resources are available by default:\n\n| &nbsp;| &nbsp;|\n|----------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **Ask Dialog**       | This option is required if any of your scripts use the \"ask\" or \"ask password\" commands. The standalone builder will copy the stack \"ask dialog\" from the IDE into your standalone as a sub stack. The standalone builder makes a copy of your stack before adding resources to it as part of the build process, so your original stack is unaltered.                                                                                                                                                                                                                                           |\n| **Answer Dialog**    | This option is required if any of your scripts use the \"answer\" command. Note that this only applies to the dialog form of the command. The answer file / printer / color / effect / folder / page setup / printer and record forms of the command do *not* require this option. The standalone builder will copy the stack \"answer dialog\" into your standalone.                                                                                                                                                                                                                               |\n| **Browser**   \t   | This option is required if your application uses the embedded browser or any `revBrowser` command.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              |\n| **Browser (CEF)**    | This option is required if your application uses the embedded CEF browser or any `revBrowser` command.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          |\n| **Brushes**          | This option is required if your application uses any of LiveCode's brush cursors. It is not required if your application does not make use of the painting commands. It copies the stack \"brushes\" into your standalone.                                                                                                                                                                                                                                                                                                                                                                        |\n| **Cursors**          | This option is required if your application uses any of LiveCode's cursors. It is not required if your application only uses OS cursors. It copies the stack \"cursors\" into your standalone.                                                                                                                                                                                                                                                                                                                                                                                                    |\n| **Database**         | This option is required if your application uses database access or any `revDatabase` command.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |\n| **Magnify**\t\t   | This option is required if your application uses the magnify palette|\n| **PDF Printer**      | This option is required if your application uses the \"open printing to pdf\" command.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            |\n| **Print Dialog**     | This option is required if your application uses LiveCode's built-in print or page setup dialogs (e.g. for use on Linux without GTK installed). It is not required if you only display the system printer and page setup dialogs. It copies the stack \"print dialog\" and \"page setup\" into your standalone.                                                                                                                                                                                                                                                                                     |\n| **SSL & Encryption** | This option is required if your application uses any SSL or encryption related commands                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         |\n| **XML**              | This option is required if your application uses any `revXML` commands|\n\n\nThe following script libraries are available by default:\n\n| Library Name | Automatic inclusion condition |\n|----------------------|----------------------------------------------------------------------|\n| **Animation** \t   | This library is unsupported.                                         |\n| **DataGrid**         | DataGrid object.                                                     |\n| **Geometry**         | Geometry properties or commands.                                     |\n| **Internet**         | Internet access, including URL, ftp & POST                           |\n| **Printing**         | `revPrintField`, `revShowPrintDialog` and `revPrintText`             |\n| **Zip**              | All `revZip` commands (but not required for `compress`/`decompress`) |\n| **Speech**           | `revSpeak` and revSpeechVoices                                       |\n| **Table**            | Use of the table object                                              |\n| **XMLRPC**           | Any `revXMLRPC` commands                                             |\n\nThe following database drivers are available by default:\n\n- ODBC\n- MySQL\n- SQLite\n- PostgreSQL\n\n#### Mac Deployment\n\n![](images/standalone-settings-mac.png)\n\nFigure 5 – Standalone Settings – Mac\n\n| &nbsp;| &nbsp;|\n|-----------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **Build for Mac OS X 32-bit**                                   | Build a standalone that includes a 32 bit slice.                                                                                                                                                                                                                                                                                                                                                                              |\n| **Build for Mac OS X 64-bit**                                   | Build a standalone that includes a 64 bit slice.                                                                                                                                                                                                                                                                                                                                                                              |\n| **Application Icon**                                            | Choose an application icon to represent the application in the Finder. The icon should be in icns format.                                                                                                                                                                                                                                                                                                                     |\n| **Document Icon**                                               | Choose a document icon to represent your application's documents in the Finder. The icon should be in icns format.                                                                                                                                                                                                                                                                                                            |\n| **Icons for ask / answer dialogs**                              | Choose an icon to display whenever you use the ask or answer commands to display a dialog. On Mac OS X, the convention is that these dialogs should display your application icon. The icon should be stored in your stack as an image, or selected from LiveCode's built-in icons. If you have used a built-in icon, be sure to select the relevant inclusion on the General tab (if you are selecting inclusions manually). |\n| **PLIST – enter information and have LiveCode write the PLIST** | Have LiveCode fill out the PLIST for your application automatically. The PLIST is a settings file stored in XML format stored as part of every Mac OS X application. It contains information about the application, including its name, version number, copyright notice and document associations. Having LiveCode create this file for you is the recommended option. For more information about PLISTs consult [Apple's developer documentation](http://developer.apple.com/documentation/Darwin/Reference/ManPages/man5/plist.5.html)|\n| **Choose a file to import into the application bundle**         | Choose to import a PLIST file instead of having LiveCode create one. Select this option if you have created your own highly customized PLIST that you want to use for your application in each build you create.                                                                                                                                                                                                              |\n| **Short version / long version**                                | The version information to be included with your standalone.                                                                                                                                                                                                                                                                                                                                                                  |\n| **Get info string**                                             | The visible text displayed in your application's Get Info window by the Finder.                                                                                                                                                                                                                                                                                                                                               |\n| **Copyright notice**                                            | The copyright notice for your application.                                                                                                                                                                                                                                                                                                                                                                                    |\n| **Bundle identifier**                                           | A unique identifier for your application used by Mac OS X to identify your application.                                                                                                                                                                                                                                                                                                                                       |\n\nRelated lessons:\n\n* [Signing and Uploading apps to the Mac App Store](http://lessons.livecode.com/m/4071/l/876834-signing-and-uploading-apps-to-the-mac-app-store)\n\n#### Windows Deployment\n\n![](images/standalone-settings-windows.png)\n\nFigure 6 – Standalone Settings – Windows\n\n| &nbsp;| &nbsp;|\n|--------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **Build for Windows x86**      | Build a 32-bit standalone for the Microsoft Windows OS.                                                                                                                                                                                                                                 |\n| **Build for Windows x86_64**   | Build a 64-bit standalone for the Microsoft Windows OS.                                                                                                                                                                                                                                 |\n| **Application icon**           | Choose an application icon to represent the application in Windows. The icon should be in .ico format.                                                                                                                                                                           |\n| **Document icon**              | Choose a document icon to represent your application's documents in Windows. The icon should be in .ico format.                                                                                                                                                                  |\n| **Version information**        | The version information to be stored as part of your application and displayed in the Windows property inspector and dialogs.                                                                                                                                                    |\n| **UAC Execution Level**        | Select the user account control level that applies to your application. For more information, consult [MSDN](https://msdn.microsoft.com/en-us/library/bb384608.aspx)                                                                                                             |\n\n#### Linux Deployment\n\n![](images/standalone-settings-linux.png)\n\nFigure 7 – Standalone Settings – Linux\n\n| &nbsp;| &nbsp;|\n|---------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **Build for Linux**             | Build a standalone for 32-bit Linux                                                                                                                                                                                                                          |\n| **Build for Linux x64**         | Build a standalone for 64-bit Linux                                                                                                                                                                                                                          |\n| **Include**                     | Select built-in LiveCode dialogs to include. These dialogs are useful if your application may be run on a system that does not include these dialogs as part of the OS. You do not need to include these dialogs if you are running a recent version of GTK. |\n\n#### iOS Deployment\n\n![](images/standalone-settings-ios-basic.png)\n\nFigure 8 – Standalone Settings – iOS Basic Settings\n\n| &nbsp;| &nbsp;|\n|---------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **Build for iOS iPod, iPhone and iPad**             | Build a standalone iOS iPod, iPhone and iPad                                                                                                                                                      |\n| **Build for iOS iPod and iPhone**                   | Build a standalone iOS iPod and iPhone                                                                                                                                                            |\n| **Build for iOS iPad**                              | Build a standalone iOS iPad                                                                                                                                                                       |\n| **Minimum version**                                 | Choose the minimum version of iOS that your application should run on                                                                                                                             |\n| **Build 32-bit slice only**                         | Only include the 32 bit slice in the standalone instead of both the 32 bit and 64 bit slice                                                                                                       |\n| **Display Name**                                    | The name of the application                                                                                                                                                                       |\n| **Version**                                         | The version number of the application                                                                                                                                                             |\n| **Beta version**                                    | Enable Test Flight distribution                                                                                                                                                                   |\n| **Build No.**                                       | The build number of the application                                                                                                                                                               |\n| **Internal App ID**                                 | The application identifier for your application. This should begin with a reverse domain name of a domain you own.                                                                                |\n| **Profile**                                         | The provisioning profile to sign the application with.                                                                                                                                            |\n| **iPhone Status Bar**                               | Choose whether to show or hide the status bar while the application is running on iPhone                                                                                                          |\n| **iPad Status Bar**                                 | Choose whether to show or hide the status bar while the application is running on iPad                                                                                                            |\n| **Status Bar Style**                                | Set the style of the status bar while the application is running                                                                                                                                  |\n| **iPhone Initial Orientation**                      | Set the orientation on iPhone of the application on the screen when it initialy starts                                                                                                            |\n| **iPad Supported Initial Orientation**              | Set the possible orientations on iPad of the application on the screen when it initialy starts                                                                                                    |\n| **Custom URL Scheme**                               | Add a custom url scheme to the application so that it will launch when a url is opened that uses the scheme                                                                                       |\n| **Mapping file**                                    | Set a font name mapping file which should contain lines of `<mapped name>=<PostScript name>`                                                                                                      |\n| **Telephony**                                       | Choose whether telephony is required, prohibited or not applicable in order for the application to function                                                                                       |\n| **Peer-Peer**                                       | Choose whether peer to peer is required, prohibited or not applicable in order for the application to function                                                                                    |\n| **SMS**                                             | Choose whether SMS is required, prohibited or not applicable in order for the application to function                                                                                             |\n| **Still Camera**                                    | Choose whether a still camera is required, prohibited or not applicable in order for the application to function                                                                                  |\n| **Auto-focus Camera**                               | Choose whether an auto-focus camera is required, prohibited or not applicable in order for the application to function                                                                            |\n| **Front-facing Camera**                             | Choose whether a front-facing camera is required, prohibited or not applicable in order for the application to function                                                                           |\n| **Accelerometer**                                   | Choose whether an accelerometer is required, prohibited or not applicable in order for the application to function                                                                                |\n| **Location Services**                               | Choose whether location services is required, prohibited or not applicable in order for the application to function                                                                               |\n| **GPS**                                             | Choose whether GPS is required, prohibited or not applicable in order for the application to function                                                                                             |\n| **Magnetometer**                                    | Choose whether a magnetometer is required, prohibited or not applicable in order for the application to function                                                                                  |\n| **Microphone**                                      | Choose whether a microphone is required, prohibited or not applicable in order for the application to function                                                                                    |\n| **Game-Kit**                                        | Choose whether Game-Kit is required, prohibited or not applicable in order for the application to function                                                                                        |\n| **WiFi**                                            | Choose whether WiFi is required, prohibited or not applicable in order for the application to function                                                                                            |\n| **Magnetometer**                                    | Choose whether a magnetometer is required, prohibited or not applicable in order for the application to function                                                                                  |\n| **OpenGL ES 1.1**                                   | Choose whether OpenGL ES 1.1 is required, prohibited or not applicable in order for the application to function                                                                                   |\n| **OpenGL ES 2.0**                                   | Choose whether OpenGL ES 2.0 is required, prohibited or not applicable in order for the application to function                                                                                   |\n\n![](images/standalone-settings-ios-requirements.png)\n\nFigure 9 – Standalone Settings – iOS Requirements\n\n| &nbsp;| &nbsp;|\n|---------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **Location Authorization Type**             | Choose whether to authorize location services for just when the application is in use or for background use also                                                                                          |\n| **Persistent WiFi**                         | Indicate the application requires persistent WiFi in order to function                                                                                                                                    |\n| **File Sharing**                            | Indicate the application uses file sharing                                                                                                                                                                |\n| **Local Notifications**                     | Indicate the application sends local notifications                                                                                                                                                        |\n| **Push Notifications**                      | Indicate the application sends push notifications                                                                                                                                                         |\n| **Disable ATS**                             | Disabling ATS allows your application to load insecure websites (not recommended).                                                                                                                        |\n| **Enable Background Execution**             | By default LiveCode applications will exit when the user suspends them. This option allows the applications to remain open while in the background.                                                       |\n| **Background Audio**                        | Enable if the application plays audio while in the background.                                                                                                                                            |\n| **Location Update**                         | Enable if the application recieves location updates while in the background.                                                                                                                              |\n| **VoIP**                                    | Enable if the application handles VoIP calls while in the background.                                                                                                                                     |\n| **Newsstand Downloads**                     | Enable if the application recieves newsstand downloads while in the background.                                                                                                                           |\n| **External Accessory Communication**        | Enable if the application communicates with external accessories while in the background.                                                                                                                 |\n| **Use Bluetooth Low Energy Accessories**    | Enable if the application communicates with bluetooth low energy accessories while in the background.                                                                                                     |\n| **Acts as Bluetooth Low Energy Accessory**  | Enable if the application acts as a bluetooth low energy accessory while in the background.                                                                                                               |\n| **Background Fetch**                        | Enable if the application fetches data while in the background.                                                                                                                                           |\n| **Remote Notifications**                    | Enable if the application handles remote notifications while in the background.                                                                                                                           |\n| **App URL Query Whitelist**                 | Specify a list of url schemes the application needs to query to determine if there is an application on the device capable of handling the scheme.                                                        |\n\n![](images/standalone-settings-ios-icons.png)\n\nFigure 10 – Standalone Settings – iOS Icons\n\n| &nbsp;| &nbsp;|\n|---------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **Prerendered Icon**            | Indicate the icons are prerendered for display                                                                                                                                                                                                               |\n| **AppStore**                    | Choose a 1024x1024 pixel png image                                                                                                                                                                                                                           |\n| **iPhone**                      | Choose a 57x57 pixel png image                                                                                                                                                                                                                               |\n| **Hi-Res iPhone**               | Choose a 114x114 pixel png image                                                                                                                                                                                                                             |\n| **iOS 7 Hi-Res iPhone**         | Choose a 120x120 pixel png image                                                                                                                                                                                                                             |\n| **iPhone 6 Plus**               | Choose a 160x160 pixel png image                                                                                                                                                                                                                             |\n| **iPhone X**                    | Choose a 180x180 pixel png image                                                                                                                                                                                                                             |\n| **iPad**                        | Choose a 72x72 pixel png image                                                                                                                                                                                                                               |\n| **Hi-Res iPad**                 | Choose a 144x144 pixel png image                                                                                                                                                                                                                             |\n| **iOS 7 iPad**                  | Choose a 76x76 pixel png image                                                                                                                                                                                                                               |\n| **iOS 7 Hi-Res iPad**           | Choose a 152x152 pixel png image                                                                                                                                                                                                                             |\n| **iPad Pro 12.9**               | Choose a 167x167 pixel png image                                                                                                                                                                                                                             |\n\n![](images/standalone-settings-ios-splash.png)\n\nFigure 11 – Standalone Settings – iOS Splash\n\n| &nbsp;| &nbsp;|\n|---------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **iPhone**                      | Choose a 320x480 pixel png image                                                                                                                                                                                                                           |\n| **Hi-Res iPhone**               | Choose a 640x960 pixel png image                                                                                                                                                                                                                           |\n| **4 inch iPhone**               | Choose a 640x1136 pixel png image                                                                                                                                                                                                                           |\n| **iPhone 6/7/8**                | Choose a 750x1334 pixel png image                                                                                                                                                                                                                           |\n| **iPhone 6/7/8+ Portrait**      | Choose a 1242x2208 pixel png image                                                                                                                                                                                                                           |\n| **iPhone 6/7/8+ Lscape**        | Choose a 2208x1242 pixel png image                                                                                                                                                                                                                           |\n| **iPhone X/XS Portrait**        | Choose a 1125x2436 pixel png image                                                                                                                                                                                                                           |\n| **iPhone X/XS Lscape**          | Choose a 2436x1125 pixel png image                                                                                                                                                                                                                           |\n| **iPhone XR Portrait**          | Choose a 828x1792 pixel png image                                                                                                                                                                                                                           |\n| **iPhone XR Lscape**            | Choose a 1792x828 pixel png image                                                                                                                                                                                                                           |\n| **iPhone XSMAX Portrait**       | Choose a 1242x2688 pixel png image                                                                                                                                                                                                                           |\n| **iPhone XSMAX Lscape**         | Choose a 2688x1242 pixel png image                                                                                                                                                                                                                           |\n| **iPad Portrait**               | Choose a 768x1024 pixel png image                                                                                                                                                                                                                           |\n| **iPad Lscape**                 | Choose a 1024x768 pixel png image                                                                                                                                                                                                                           |\n| **Hi-Res iPad Portrait**        | Choose a 1536x2048 pixel png image                                                                                                                                                                                                                           |\n| **Hi-Res iPad Lscape**          | Choose a 2048x1536 pixel png image                                                                                                                                                                                                                           |\n| **iPad Pro 12.9 Portrait**      | Choose a 2048x2732 pixel png image                                                                                                                                                                                                                           |\n| **iPad Pro 12.9 Lscape**        | Choose a 2732x2048 pixel png image                                                                                                                                                                                                                           |\n\nRelated lessons:\n\n* [How do I Become an iOS Developer?](http://lessons.livecode.com/m/4069/l/565715-how-do-i-become-an-ios-developer)\n* [How do I build an iOS application?](http://lessons.livecode.com/m/4069/l/565713-how-do-i-build-an-ios-application)\n\n#### Android Deployment\n\n![](images/standalone-settings-android.png)\n\nFigure 12 – Standalone Settings – Android\n\n| &nbsp;| &nbsp;|\n|---------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **Build for Android armv7**     | Include armv7 binaries in the Android standalone                                                                                                                                                                                      |\n| **Build for Android arm64**     | Include arm64 binaries in the Android standalone                                                                                                                                                                                      |\n| **Build for Android x86**       | Include x86 binaries in the Android standalone                                                                                                                                                                                        |\n| **Build for Android x86_64**    | Include x86_64 binaries in the Android standalone                                                                                                                                                                                     |\n| **Label**                       | The application name                                                                                                                                                                                                                  |\n| **Identifier**                  | The application identifier for your application. This should begin with a reverse domain name of a domain you own.                                                                                                                    |\n| **Version Name**                | The version number of your application                                                                                                                                                                                                |\n| **Version Code**                | The build number of your application                                                                                                                                                                                                  |\n| **Icon**                        | The application icon                                                                                                                                                                                                                  |\n| **Splash**                      | The application splash screen (applicable to the Educational Personal license only)                                                                                                                                                   |\n| **Signing**                     | Choose to sign for development, with your own key or not to sign.                                                                                                                                                                     |\n| **Key**                         | Choose a Java keystore file to sign with.                                                                                                                                                                                             |\n| **Install Location**            | Allow installation onto external storage.                                                                                                                                                                                             |\n| **Custom URL Scheme**           | Add a custom url scheme to the application so that it will launch when a url is opened that uses the scheme.                                                                                                                          |\n| **Push Sender ID**              | The project number from Google's Cloud Messaging API. See the [How do I use Push Notifications with Android?](http://lessons.livecode.com/m/4069/l/59312-how-do-i-use-push-notifications-with-android) lesson.                        |\n| **Status Bar Icon**             | The icon shown in the status bar for a notification                                                                                                                                                                                   |\n| **Hardware Accelerated**        | Enable hardware acceleration of the application                                                                                                                                                                                       |\n| **Initial Orientation**         | The orientation on the device when the application initially launches                                                                                                                                                                 |\n| **Status Bar**                  | Set the visibility of the status bar                                                                                                                                                                                                  |\n| **In App Purchasing**           | Specify the store used for the in-app purchasing API                                                                                                                                                                                  |\n| **Minimum Android Version**     | Choose the minimum version of Android the application should run on                                                                                                                                                                   |\n| **Camera**                      | Choose whether a camera is required, prohibited or not applicable in order for the application to function                                                                                                                            |\n| **Camera Autofocus**            | Choose whether camera autofocus is required, prohibited or not applicable in order for the application to function                                                                                                                    |\n| **Camera Flash**                | Choose whether a camera flash is required, prohibited or not applicable in order for the application to function                                                                                                                      |\n| **Front Camera**                | Choose whether a front camera is required, prohibited or not applicable in order for the application to function                                                                                                                      |\n| **Accelerometer**               | Choose whether an accelerometer is required, prohibited or not applicable in order for the application to function                                                                                                                    |\n| **Telephony**                   | Choose whether telephony is required, prohibited or not applicable in order for the application to function                                                                                                                           |\n| **Telephony CDMA**              | Choose whether CDMA telephony is required, prohibited or not applicable in order for the application to function                                                                                                                      |\n| **Telephony GSM**               | Choose whether GSM telephony is required, prohibited or not applicable in order for the application to function                                                                                                                       |\n| **Fake Touch**                  | Choose whether fake touch is required, prohibited or not applicable in order for the application to function                                                                                                                          |\n| **Touchscreen**                 | Choose whether a touchscreen is required, prohibited or not applicable in order for the application to function                                                                                                                       |\n| **Multitouch**                  | Choose whether multitouch is required, prohibited or not applicable in order for the application to function                                                                                                                          |\n| **Multitouch Distinct**         | Choose whether multitouch distinct is required, prohibited or not applicable in order for the application to function                                                                                                                 |\n| **Multitouch Jazzhand**         | Choose whether multitouch jazzhand is required, prohibited or not applicable in order for the application to function                                                                                                                 |\n| **Write External Storage**      | Request permission to write to external storage                                                                                                                                                                                       |\n| **Internet**                    | Request permission to for internet access                                                                                                                                                                                             |\n| **Camera**                      | Request permission to access the camera                                                                                                                                                                                               |\n| **Read Contacts**               | Request permission to read the user's contact data                                                                                                                                                                                    |\n| **Write Contacts**              | Request permission to write to the user's contact data                                                                                                                                                                                |\n| **NFC Tag Reading**             | Request permission to read NFC tags                                                                                                                                                                                                   |\n| **Fine Location**               | Request permission to access the device's fine location                                                                                                                                                                               |\n| **Course Location**             | Request permission to access the device's course location                                                                                                                                                                             |\n| **Vibration**                   | Request permission to vibrate the device                                                                                                                                                                                              |\n| **Idle Timer**                  | Request permission for the idle timer                                                                                                                                                                                                 |\n| **Ad Support**                  | Request permission for ad support                                                                                                                                                                                                     |\n\nRelated lessons:\n\n* [LiveCode and Android Studio](http://lessons.livecode.com/m/4069/l/985962-livecode-and-android-studio)\n* [The Basics: How do I Create Hello World on Android?](http://lessons.livecode.com/m/4069/l/27733-the-basics-how-do-i-create-hello-world-on-android)\n\n#### HTML5 Deployment\n\n![](images/standalone-settings-html5.png)\n\nFigure 13 – Standalone Settings – HTML5\n\n| &nbsp;| &nbsp;|\n|---------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **Build for HTML5**             | Build a standalone for HTML5                                                                                                                                                                                                                          |\n\nAlmost every Internet-connected device has a web browser.  If your application\ncan run in a browser, your app can be used anywhere and by anyone, without any\nneed to download or install it.\n\nRelated lessons:\n\n* [How Do I Put My First App On the Web](http://lessons.livecode.com/m/4071/l/800867-how-do-i-put-my-first-app-on-the-web)\n\n##### Supported browsers\n\nThe following browsers are supported:\n\n* [Mozilla Firefox](https://www.mozilla.org/firefox/new/) 40.0 (or newer)\n* [Google Chrome](https://www.google.com/chrome/) 44 (or newer)\n* [Safari for Mac](https://support.apple.com/HT204416) 9.0 (or newer)\n\n##### HTML5 engine features\n\nThe HTML5 engine in this release of LiveCode has a limited range of features.\nYou can:\n\n* deploy single or multiple stack applications with embedded resources. Stacks\nother than the main stack will open in their own floating container windows.\n* use most of the engine's built-in controls and graphics capabilities.\n* read and write temporary files in a special virtual filesystem (which is\nerased when the user navigates away from the page)\n* use LiveCode Builder widgets and extensions\n* interact with JavaScript code in the web page using `do <script> as \"JavaScript\"`\n* call JavaScript from LiveCode Builder widgets and extensions using the\ncom.livecode.emscripten module\n* implement widgets by embedding DOM elements as native layers\n* perform basic networking operations using the **load** command\n\nSeveral important features are not yet supported:\n\n* multimedia (the \"player\" control)\n\nTwo important unsupported features are unlikely to be added in the near future:\n\n* operations that need to pause the script while something happens\n  (e.g. `wait 10`)\n* externals (including revdb)\n\n##### Contents of the HTML5 standalone\n\nThe HTML5 standalone contains four files:\n\n* A standalone archive, named `standalone.zip` by default.  This file contains\nyour application and all of the resources that it depends on.  When the engine\nruns, the filesystem that's visible to the engine (e.g. via the `open file`\nsyntax) is based on the contents of the standalone archive.\n\n* The engine itself, which consists of two files.  The `.js` file contains the\nengine's executable code, and the `.html.mem` file contains essential data\nthat's needed for the engine to run.  These files are always the same, and only\nchange when LiveCode is upgraded.\n\n* A test HTML page.  This can be opened in a browser and will correctly prepare,\ndownload and start your HTML5 app in a convenient test environment.\n\n##### Advanced: HTML5 standalone filesystem\n\nJavaScript applications running in a browser don't have access to the host\nsystem's filesystem.  Instead, the filesystem-related features of LiveCode, such\nas `open file`, use a virtual filesystem (VFS) that exists only in memory.  This\nfilesystem is initialised before the engine starts, and is reset and its content\ndiscarded when the engine stops (when the user closes the browser view or\nnavigates to a different page).\n\nDuring engine startup, the VFS is populated from the contents of the\n`standalone.zip` file that's created by the HTML5 deployment process.  All of\nthe initial files are stored in `/boot/` in the VFS.\n\nThere are several special files & directories in the `/boot/` directory:\n\n* `/boot/__startup.data`: the standalone data including the mainstack,\nextensions and auxiliary stackfiles and startup script.\n* `/boot/fonts/basefont.ttf`: the font used by the engine\n* `/boot/standalone/`: the `defaultFolder` when the engine starts, and the\nlocation where additional assets selected using the \"Copy files\" page of the\nstandalone builder are placed\n\nIn general, if you wish to add new files or directories to the `standalone.zip`\narchive, it is best to add them outside the `/boot/` directory tree.\n\n##### Advanced: Embedding an HTML5 standalone in a web page\n\nThe default HTML5 page provided by the HTML5 standalone builder is designed for\ntesting and debugging purposes.  However, you may want to embed the standalone\nengine in a more visually appealing page.  To do this, you require three\nelements: 1) a canvas, 2) a JavaScript `Module` object, and 3) an HTML\n`<script>` element that downloads the engine.\n\n##### The canvas\n\nThe engine renders into a HTML5 `<canvas>` element contained within a `<div>`\nelement. There are some important considerations when creating the canvas &\ndiv:\n\n* both the canvas and div must have absolutely no border, or mouse coordinate\ncalculations will be incorrect\n\n* they will be automatically resized by the engine to match the size of your\nstack, so don't attempt to set their size using HTML or CSS\n\n* the canvas should be the only element within the containing div, which may be\nused to hold additional elements as native layers are added to the app.\n\n* the canvas needs to be easily uniquely identifiable, so that the engine can\nfind it.\n\nThe absolute minimum canvas element would look something like this:\n\n    <div><canvas style=\"border: 0px none;\" id=\"canvas\" oncontextmenu=\"event.preventDefault();\"></canvas></div>\n\nBy default, most web browsers will indicate when the canvas has focus by\ndisplaying a highlighted outline.  This helps users identify which part of\nthe web page is capturing their key presses.  You can usually disable this\noutline by adding `outline: none;` to the canvas's CSS styles.\n\n##### The Module object\n\nThe top-level JavaScript `Module` object contains the parameters that control\nhow the engine runs.  At minimum, you need only specify the `Module.canvas`,\nwhich should be your canvas element.\n\nThe absolute minimum `Module` object declaration would look something like:\n\n    <script type=\"text/javascript\">\n    var Module = {\n      canvas: document.getElementById('canvas'),\n    };\n    </script>\n\n##### Engine download\n\nThe engine is quite a large JavaScript file, so it's downloaded asynchronously\nin order to let the rest of the page finish loading and start being displayed.\n\nQuite straightforwardly:\n\n    <script async type=\"text/javascript\" src=\"standalone-<version>.js\"></script>\n\nMake sure to replace `<version>` as appropriate.\n\n##### Bringing it all together\n\nHere's the complete skeleton web page for an HTML5 standalone:\n\n    <html>\n       <body>\n          <div>\n             <canvas style=\"border: 0px none;\" id=\"canvas\" oncontextmenu=\"event.preventDefault()\"></canvas>\n          </div>\n\n         <script type=\"text/javascript\">\n           var Module = { canvas: document.getElementById('canvas')  };\n         </script>\n        <script async type=\"text/javascript\" src=\"standalone-community.js\"></script>\n      </body>\n    </html>\n\n##### Advanced: Speeding up engine download\n\nCurrently, the engine files are almost 30 MB, which is a lot to download before\nthe engine can start.  It is possible to speed up the download by enabling\ndeflate compression in the web server configuration.\n\nEnabling deflate compression reduces the total download size to around 6.3 MB.\nIt's recommended to pre-compress the engine with `gzip`, and then configure your\nweb server to serve the pre-compressed files.\n\n* For the Apache web server, configure `mod_deflate` to serve [pre-compressed content](https://httpd.apache.org/docs/2.4/mod/mod_deflate.html#precompressed)\n* For the NGINX web server, add [`gzip_static on;`](https://www.nginx.com/resources/admin-guide/compression-and-decompression/#send)\nto your configuration.\n\n##### Advanced: Customizing the Module object\n\nThere are a number of LiveCode-specific `Module` attributes that you can modify\nto affect how the engine behaves:\n\n* `Module.livecodeStandalone`: the filename of the standalone archive (default\n`standalone.zip`)\n* `Module.livecodeStandalonePrefixURL`: Prepended to the standalone archive\nfilename to construct its full URL (default empty)\n* `Module.livecodeStandaloneRequest`: If you assign a network request to this\nattribute (before the engine runs), then it will use that request for the\nstandalone archive instead of automatically starting a download for you. This\nmeans that you can, in your HTML, fire off a request for the standalone before\nthe engine script actually arrives.  For this to work, the network request\nshould be an `XMLHttpRequest` with its `responseType` set to `arraybuffer`.\n\nSee also Emscripten's [Module object documentation](https://kripken.github.io/emscripten-site/docs/api_reference/module.html).\n\n#### Bug Reports\n\n![](images/standalone-settings-bug-reports.png)\n\nFigure 14 – Standalone Settings – Bug Reports\n\n| &nbsp;| &nbsp;|\n|---------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **Include Error Reporting Dialog**    | Include an error reporting stack in your standalone. You should select this option if you are testing your application and want details of any errors in your standalone, or if you have not included your own error reporting routines in your stacks.                                                                                                                                    |\n| **htmlText for dialog**               | The text to display to the user in the dialog that comes up when an error is encountered. This text should be in LiveCode-compatible HTML format. Create and format the text in a LiveCode field then copy the field's HTMLText property.                                                                                                                                                  |\n| **Dialog icon**                       | The icon to display in the error dialog. This should be stored as an image in your stack.                                                                                                                                                                                                                                                                                                  |\n| **Allow user to enter comments**      | Display a box for the user to give you more information. This information will be included in the report.                                                                                                                                                                                                                                                                                  |\n| **Allow user to save report to file** | Allow the user to save the report to a file. Select this option if you want users to save an error report and send it to you.                                                                                                                                                                                                                                                              |\n| **Allow user to email report**        | Allow the user to email the report. Select this option if you want the user to be able to send you or your technical support department details of the error. This option loads up the system default email client and populates the email with the contents of the error report and the user's comments. The To: field is sent to the email address specified in the email address field. |\n\n## Testing Your Application\n\nTesting an app is straightforward:\n\n1) Open your stack in the LiveCode IDE\n\n2) Select **File → Standalone Application Settings...** from the menu bar\n\n3) Select the settings for your app\n\n4) Make sure that checkboxes for each platform you wish to build for are checked\nas the chosen platforms will govern which test targets are available.\n\n5) Close the standalone settings window\n\n6) Choose **Development → Test Target → _Your Target_** from the menu bar to\nselect the target to test deployment to\n\n7) Click the **Test** button or choose **Development → Test** from the menu bar\n\n8) The standalone will be built and deployed to the target and launched. In\nLiveCode Business Edition the remote debugger will detect any execution errors\nand present them.\n\n> **Note:** iOS devices connected via USB are detected as test targets in\nLiveCode Business Edition and apps will be installed on them, however, the will\nnot be automatically launched.\n\n"
	},	{
	"name":"extending_livecode",
	"display name":"Extending LiveCode",
	"location":"ide",
	"group":"Advanced",
	"data":"# Extending LiveCode\n\n## Introduction\n\nLiveCode has a simple way to extend the functionality or control set of \nyour app using separately compiled modules. This guide will take you \nthrough the process of installing and using these new widgets and \nlibraries and for the adventurous among you, provide a guide to building \nand sharing your own extensions. \n\n## LiveCode Builder Extensions\n\nTo make it possible to create extensions and plug them into the LiveCode \nengine we've created a new flavor of our language called ***LiveCode \nBuilder***. LiveCode Builder looks a lot like LiveCode Script so should \nfeel familiar for any seasoned LiveCode developer. There is lots of new \nsyntax which exposes parts of the LiveCode engine that were only \npreviously available to those who were skilled c/c++ developers.\n\nTo learn more about LiveCode Builder and creating extensions, read on.\n\n> *Warning:* It is important to stress right at the start that \n> ***no aspect of LiveCode Builder should be considered final***. \n> ***Every piece of syntax in LiveCode Builder is subject to change***.\n\n### Creating LiveCode Builder Extensions\n\nThe IDE provides an \"Extension Builder\" tool to help make development \nand packaging of extensions as easy as possible. \n\n> **Note:** LiveCode Builder is a different flavor of LiveCode so it is \n> not possible to edit LiveCode Builder scripts in the main LiveCode \n> Script IDE.\n\n### Extension Builder\n\nOpen the \"Extension Builder\" from the tools menu:\n\n\tTools > Extension Builder\n\n![Extension Builder plugin](images/extensions-plugin-overview.png)\n\n1. Shows the currently selected extension. \n2. Data that the builder was able to parse from the directory such as icons, resources, API's the user guides.\n3. Console: Shows status, error and log messages.\n4. Test: Creates a stack, compiles the extensions and creates an instance.\n5. Script: Opens the lcb script in an external default editor.\n6. Install: Installs the extension into the IDE\n7. Uninstall: Uninstalls the extension from the IDE\n8. Package: Creates a .lce package which can uploaded to the extension store. It is placed in the extension directory\n\n> **Note:** A great way to get started is to tweak the script of one of \n> our widget examples.\n\nUsing the selection dropdown (1), you can select the extension you wish \nto develop or click the \"open\" icon in the header back to locate an \nextension you've not loaded before. \n\n### Create your own simple widget\nThe main difference between widgets and libraries is that a widget draws \nto a pre-existing canvas. Apart from that, the authoring process is much \nthe same for both extension types.\n\n#### Create a .lcb file\nWe recommend using the Atom text editor, available at https://atom.io/. \nA LiveCode package is available which provides some colorization as well \nas indentation. \nIf you prefer to use TextWrangler, there is a colorizing script \n[here](https://github.com/livecode/livecode/tree/develop/contrib/TextWrangler). \nIt should be placed in /Application Support/TextWrangler/Language Modules/\n\nStart by creating a plain text file in a new directory and save it to \ndisk with the extension \"lcb\":\n\n\t/Desktop/widgettest/main.lcb\n\n> **Note:** The extension builder currently relies on there being only \n> one main module file in a given directory.\t\n\n#### Declare Type and Identifier\nStart by declaring the type of extension, either \"widget\" or \"library\" \nfollowed by your identifier (See \"Select A Developer ID\" below).\n\n\twidget community.livecode.beaumont.pinkCircle\n\t   ## Code for your widget\n\tend widget\n\nThis is the unique identifier by which your extension will be referred \nto by the LiveCode Engine.\n\n> **Note:** All LiveCode authored widgets are in the application package \n> at /Tools/Extensions/. To play with one of these extensions we \n> recommend copying the folder from the application package to your \n> desktop and loading it from there. Changing the extension identifier \n> in the source code will ensure it doesn't conflict with the existing \n> extension.\n\n#### Declare Metadata\nNext, provide metadata to help LiveCode display your widget correctly \nin the IDE and in the online portal.\n\n\twidget community.livecode.beaumont.pinkCircle\n\n\tmetadata title is \"My Pink Circle\"\n\tmetadata author is \"Benjamin Beaumont\"\n\tmetadata version is \"1.0.0\"\n\tmetadata platforms is \"desktop,mobile\"\n\n\tend widget\n\n> **Note:** If the module makes use of external code that is only\n> available on specific Operating Systems or Platforms, use the \"os\"\n> and/or \"platforms\" metadata keys. The values are the same as can be\n> found in the LiveCode Documentation Format Reference. This data will\n> also appear in the dictionary.\n\n#### Importing libraries\nThe LiveCode builder syntax is broken down into **modules**. There are 3 \nclasses of module:\n\nType|Description\n---|---\nDefault|These modules are part of LiveCode builder and are included by default. Their syntax is always available to you as a LiveCode developer.\nOptional|These modules are created and distributed by LiveCode Ltd and must be imported by the extension developer in order to make use of their syntax.\nCustom|These modules are created and distributed through the online portal and must be imported by the extension developer in order to make use of their syntax.\n\nLiveCode builder contains the following modules:\n\nModule|Type|Description\n---|---|---\ncom.livecode.canvas|Optional|Provides the syntax and types for 2D drawing allowing developers to draw to a canvas. Required if creating a widget.\ncom.livecode.widget|Optional|Contains syntax specific to widget building such as \"my width\" and \"the mouse position\".\ncom.livecode.engine|Optional|Contains syntax for all extension building such as \"dispatch\" and \"log\".\ncom.livecode.arithmetic|Default|Contains syntax for basic mathematical operations.\ncom.livecode.array|Default|Contains syntax for operations on arrays.\ncom.livecode.assert|Default|Contains syntax for making assertions about program state.\ncom.livecode.binary|Default|Contains syntax for operations on binary data.\ncom.livecode.bitwise|Default|Contains syntax for bitwise logical operators.\ncom.livecode.byte|Default|Contains syntax for operations on byte chunks.\ncom.livecode.char|Default|Contains syntax for operations on char chunks.\ncom.livecode.codeunit|Default|Contains syntax for operations on codeunit chunks.\ncom.livecode.date|Default|Contains syntax for accessing the date and time.\ncom.livecode.file|Default|Contains syntax for file I/O operations.\ncom.livecode.foreign|Default|Provides the type bindings for foreign types.\ncom.livecode.java|Default|Provides helper functions and types for interfacing with Java.\ncom.livecode.list|Default|Contains syntax for operations on lists.\ncom.livecode.logic|Default|Contains syntax for logical operators.\ncom.livecode.math|Default|Contains syntax for mathematical operations.\ncom.livecode.mathfoundation|Default|Contains syntax for foundational mathematical operations.\ncom.livecode.objc|Default|Provides helper functions and types for interfacing with Objective-C.\ncom.livecode.sort|Default|Contains syntax for sorting operations.\ncom.livecode.stream|Default|Contains syntax for stream I/O operations.\ncom.livecode.string|Default|Contains syntax for operations on strings.\ncom.livecode.system|Default|Contains syntax for accessing system information.\ncom.livecode.type|Default|Contains syntax for general operations on types.\ncom.livecode.typeconvert|Default|Contains syntax for conversions between types.\ncom.livecode.unittest|Default|Contains syntax for unit testing LiveCode Builder programs.\n\n> **Warning!** Module names are subject to change.\n\nThe LiveCode dictionary has a full list of all available syntax as \nwell as the module each belongs to. As a general rule we recommend \nimporting all three optional modules whenever developing widgets.\n\n\twidget community.livecode.beaumont.pinkCircle\n\n\tuse com.livecode.canvas\n\tuse com.livecode.widget\n\tuse com.livecode.engine\n\n\tmetadata title is \"My Pink Circle\"\n\tmetadata author is \"Benjamin Beaumont\"\n\tmetadata version is \"1.0.0\"\n\n\tend widget\n\n#### Core Handlers\n\nThere are several core handlers that any widget developer should \nimplement:\n\nHandler|Description\n------|------\nOnPaint|The *OnPaint* message is sent to your widget whenever LiveCode requires it to redraw. The performance of your widget is tied primarily to this handler and should be kept as efficient as possible.\nOnCreate|The *OnCreate* message is sent to your widget when it is first created by LiveCode. This can be used to initialise default data and where applicable, reduce the burden for calculating constants etc in the onPaint handler.\nOnGeometryChanged| The *OnGeometryChanged* message is sent when the control is changed in size.\nOnSave| The *OnSave* message is sent when your widget is about to be destroyed and enables the widget to save data set on the widget.\nOnLoad| The *OnLoad* message is sent when your widget is created and enables the widget to retrieve data saved on the widget.\n\nIn the first instance we are going to create a widget with no settable \nproperties, just using the `OnPaint` handler.\n\n\twidget community.livecode.beaumont.pinkCircle\n\n\tmetadata title is \"My Pink Circle\"\n\tmetadata author is \"Benjamin Beaumont\"\n\tmetadata version is \"1.0.0\"\n\n\tpublic handler OnPaint()\n\t   // Draw widget\n\tend handler\n\n\tend widget\n\n\n#### Draw a Pink Circle\n\n\twidget community.livecode.beaumont.pinkCircle\n\n\tmetadata title is \"My Pink Circle\"\n\tmetadata author is \"Benjamin Beaumont\"\n\tmetadata version is \"1.0.0\"\n\n\tuse com.livecode.canvas\n\n\tpublic handler OnPaint()\n\t   // Create a path with a radius of half the width of the canvas\n\t   variable tCirclePath as Path\n\t   put circle path centered at point [my width / 2, my height / 2] with radius (my width/2) into tCirclePath\n\t   \n\t   // Set the paint that will be used to fill the circle to a solid\n\t   // pink color\n\t   set the paint of this canvas to solid paint with color [1, 0, 1]\n\t   \n\t   // Fill the path\n\t   fill tCirclePath on this canvas\n\tend handler\n\n\tend widget\n\n#### Test the Code\n\nNow open the extension builder stack as shown above and click on the \nfolder icon at the top right to load your ***.lcb*** file into the \nbuilder.\n\n![enter image description here](images/extensions-widget-first.png)\n\nClick test. Your widget should be displayed on the new stack. If you \ncan't see it, check behind the extension stack.\n\n#### Properties\nIn order to make a widget useful to end users it is likely that you'll \nwant to expose properties that allow them to specify how your widget \nshould behave. \n\nTo specify a property you must provide a name and the method to get and \nset the property.\n\n\tproperty <name> get <variable/handler> set <variable/handler>\n\nThe simplest properties to get/set are numbers or strings. So lets \ncreate a `circleMargin` property that allows users to define a margin.\n\n\tproperty circleMargin get mMargin set setMargin\n\nIn the above example, when the **circleMargin** property is requested, \nthe variable `mMargin` is returned; when the property is set, the \nhandler **setMargin** is called. To have a property linked directly to \nthe value of a variable, simply provide the variable name. There will be\nno other side effects - notably, a redraw will not automatically be \ntriggered in the case that a variable name is used for a setter. To \nprocess the value coming from and going into LiveCode Script, or to add \nside-effects when getting and setting properties, provide handler names. \nIn our case we're defining a setter for the **circleMargin** property \nbecause we need to trigger a redraw when it is set.\n\n\tprivate variable mMargin as Real\n\nWe'll define a member variable to store the value for the margin. \nLiveCode Builder is typed so you must also specify the type of your \nvariable. Remember, the canvas you are drawing to has subpixel precision \nso our margin is a real number rather than an integer. For a full list \nof types available in LiveCode Builder please see the Typing section of \nthe language specification guide. \n\nWe also suggest a naming convention for variables in the section on \nvariable and case sensitivity.\n\nFinally we have to implement our `setMargin` handler.\n\n\tpublic handler setMargin(in pMargin as Real) returns nothing\n\t\tput pMargin into mMargin\n\t\tredraw all\n\tend handler\n\nImplementing the \"setter\" ourselves provides us with a little more \nflexibility. In this case when the property is set we want our pink \ncircle to immediately redraw to reflect the property change. We do this \nby calling \"redraw all\".\n\nTo test the property click \"test\" and from the message box set the \nproperty.\n\n\tset the cicleMargin of widget 1 to 15\n\n**Full Example**\n\n\twidget community.livecode.beaumont.pinkCircle\n\n\tmetadata title is \"My Pink Circle\"\n\tmetadata author is \"Benjamin Beaumont\"\n\tmetadata version is \"1.0.0\"\n\n\tuse com.livecode.canvas\n\tuse com.livecode.widget\n\tuse com.livecode.engine\n\n\t// Properties\n\tproperty circleMargin get mMargin set setMargin\n\n\t// Local variables\n\tprivate variable mMargin as Real\n\n\tpublic handler onCreate() \n\t\tput 0 into mMargin\n\tend handler\n\n\tpublic handler OnPaint()\n\t   // Create a path with a radius of half the width of the canvas\n\t   variable tCirclePath as Path\n\t   put circle path centered at point [my width / 2, my height / 2] with radius (my width/2) into tCirclePath\n\t   \n\t   // Set the paint that will be used to fill the circle to a solid\n\t   // pink color\n\t   set the paint of this canvas to solid paint with color [1, 0, 1]\n\t   \n\t   // Fill the path\n\t   fill tCirclePath on this canvas\n\tend handler\n\n\tpublic handler setMargin(in pMargin as Real)\n\t\tput pMargin into mMargin\n\t\tredraw all\n\tend handler\n\t\n\tend widget\n\n#### Loading and Saving widget data\nWhen a stack containing a widget is saved, the widget's *OnSave* \nhandler is called by the engine. The *OnSave* handler has an array out \nparameter - you can fill this array with whatever widget data is needed\nto reconstruct the widget. LiveCode saves this data along with instances \nof the widget in the stack file.\n\n\tpublic handler OnSave(out rProperties as Array)\n\t\tput the empty array into rProperties\n\t\n\t\tput mMargin into rProperties[\"margin\"]\n\t\n\t\treturn rProperties\n\tend handler\n\nThis same array is passed as a parameter to an *OnLoad* handler which is\ncalled when the stack the widget is on is loaded.\n\n\tpublic handler OnLoad(in pProperties as Array)\n\t\tput pProperties[\"margin\"] into mMargin\n\tend handler\n\n#### Understanding Error Messages\nClicking on the \"test\" button causes the extension builder to compile \nyour source code file (***.lcb***) and produce a compiled module file \n(***.lcm***). If an error is encountered it is output in the \"console\" \nsection of the builder:\n\n\tError: <source path>: <line number>: <char number>: <error message>\n\n* *source path* - The path the .lcb file that is being compiled\n* *line number* - The line number in the script on which the error occurred.\n* *char number* - The character number on which the error occurred. \n* *error message* - The description of the error.\n\n#### LiveCode Builder API\nTo start creating more complex widgets see the LiveCode Builder api in the documentation \nstack in the IDE.\n\n![enter image description here](images/extensions-canvas-docs.png)\n\n1. Open the dictionary (and stay in the 'API' tab)\n2. Click the drop-down button\n3. Choose the \"LiveCode Builder\" API\n4. The list of all the syntax available\n\n### Hello World library\nA extension library is written in much the same way as the above widget. \nThe only difference is that all the public handlers implemented are \ninserted into the message path when the extension is loaded.\n\nFor example, here is a simple library with one handler which simply \nreturns the string \"Hello World!\":\n\n\tlibrary community.livecode.elanorb.helloworld\n\n\tmetadata title is \"Hello World Library\"  \n\tmetadata author is \"Elanor Buchanan\"  \n\tmetadata version is \"1.0.0\"\n\n\tpublic handler sayHello()\n\t return \"Hello World!\"  \n\tend handler\n\n\tend library\n\nOnce this is compiled and loaded, the sayHello handler would be in the \nmessage path, before the backscripts. LiveCode Builder library handlers \ncan be invoked in both command and function form:\n\n\tsayHello\n\tput the result -- outputs \"Hello World!\"\n\t\n\tput sayHello() -- outputs \"Hello World!\"\n\n### Loading and Creating Widgets Manually\nTo load a compiled module file call:\n\n\tload extension <filepath.lcm>\n\nTo create a widget from script call:\n\n\tcreate widget <name> as <identifier>\n\ne.g.\n\n\tcreate widget \"myWidget\" as \"com.livecode.extensions.waddingham.clock\" \n\t\n### Extensions Course\n\nSee the online [extensions course](https://livecode.com/topic/introduction-2/) for a thorough\nintroduction to LiveCode Builder, complete with examples. The following\nextension examples are worked through:\n* Hello World library\n* Extended Hello World library\n* Rotated Text widget\n* Extended Rotated Text widget\n* Pie Chart widget\n* Modifying the Line Graph widget\n\t\t\n### Canvas API\n\nIf you are drawing to the widget canvas in the `OnPaint` handler (as \nopposed to [wrapping native views](#using-native-views-for-widgets)) it \nis a good idea to familiarise yourself with the canvas API. It provides\na set of operations for creating, measuring, transforming and drawing \npaths and text.\n\n#### Using path objects\n\nPaths corresponding to standard shapes can be created using the various\npath 'constructors':\n\n* Line: `line path from mFrom to mTo`\n* Rectangle: `rectangle path of mRect`\n* Circle: `circle path centered at mCenter with radius mRadius`\n* Ellips: `ellipse path centered at mPoint with radii mRadii`\n* Rounded Rectangle: `rounded rectangle path of mRect with (radius mRadius | radii mRadii )`\n* Arc: `arc path centered at mCenter with [ radius mRadius | radii mRadii ] from mStartAngle to mEndAngle`\n* Sector: `sector path centered at mCenter with [ radius mRadius | radii mRadii ] from mStartAngle to mEndAngle`\n* Segment: `segment path centered at mCenter with [ radius mRadius | radii mRadii ] from mStartAngle to mEndAngle`\n* List of points: `( polygon | polyline ) path with points mPoints`\n\nTo create a path using the path operations, start with an empty path \nobject:\n\n\t// Create a new empty path\n\tvariable tPath as Path\n\tput the empty path into tPath\n\t\nThen use the canvas path syntax to build the path. Simple paths with no\nsubpaths (i.e. ones you can draw without lifting the pencil), can be created using the following operations:\n\n* Line: `line to mPoint on mPath`\n* Arc: `arc through mThrough to mTo with radius mRadius on mPath`\n* Curve: `curve through mThroughA [ then mThroughB ] to mTo on mPath`\n* Elliptic arc:`arc to mEnd with radii mRadii rotated by mAngle [ taking ( largest | smallest ) ( clockwise | anticlockwise ) route ] on mPath`\n* Close path: `close path on mPath`\n\nPaths made up of disjoint subpaths (i.e. ones you need to lift the \npencil for) can be created using the move operation:\n\n* Move: `move to mPoint on mPath`\n\nFor example, to create a path consisting of a pair of parallel lines:\n\n\tpublic handler OnPaint()\n\t   // Create a new empty path\n\t   variable tPath as Path\n\t   put the empty path into tPath\n\n\t   // Begin a new subpath of tPath\n\t   move to point [50, 50] on tPath\n\n\t   // Add a line to tPath\n\t   line to point [100, 50] on tPath\n\n\t   // Begin a new subpath of tPath\n\t   move to point [50, 100] on tPath\n\n\t   // Add a line to tPath\n\t   line to point [100, 100] on tPath\n\n\t   stroke tPath on this canvas\n\tend handler\n\n![Path with subpaths](images/extensions_canvas_parallel_lines.png)\n\nThe following example illustrates how the parameters to elliptic arcs \nwork. Take the ellipse with horizontal radius 50 and vertical radius 25. \nThe red and green arcs start from the same point; the red is the \nsmallest clockwise route to a given point, the green is the largest \nanticlockwise route. Together they make up the whole ellipse:\n\n\tpublic handler OnPaint()\n\t   variable tSmallest as Path\n\t   put the empty path into tSmallest\n\n\t   // Start at [50, 50]\n\t   move to point [50, 50] on tSmallest\n\n\t   // Continue path with an arc to 100, 25\n\t   arc to point [100, 25] with radii [50, 25] rotated by 0 taking smallest clockwise route on tSmallest\n\n\t   variable tLargest as Path\n\t   put the empty path into tLargest\n\n\t   // Start at [50, 50]\n\t   move to point [50, 50] on tLargest\n\n\t   // Continue path with an arc to 100, 25\n\t   arc to point [100, 25] with radii [50, 25] rotated by 0 taking largest anticlockwise route on tLargest\n\n\t   set the paint of this canvas to solid paint with color [255,0,0]\n\t   stroke tSmallest on this canvas\n\n\t   set the paint of this canvas to solid paint with color [0,255,0]\n\t   stroke tLargest on this canvas\n\tend handler\n\n![Elliptic arcs](images/extensions_canvas_elliptic_arc.png)\n\nPaths may also be created using SVG instructions, for example:\n\n\tpublic handler OnPaint()\n\t\tvariable tPath as Path\n\t   put path \"M10,10 L50,100 Q100,100 100,50 C75,50 50,25 50,10z\" into tPath\n\t   stroke tPath on this canvas\n\tend handler\n\nProduces the following:\n\n![SVG path](images/extensions_canvas_svgpath.png)\n\n#### Rendering text\n\nThere is essentially only one piece of syntax for rendering text:\n\n\tfill text mText at (mPoint | mAlignment of mRect) on mCanvas\n\t\nfor example, a widget that simply displays its name at its center would\nhave the following `OnPaint` handler:\n\n\tpublic handler OnPaint()\n\t   fill text my name at center of my bounds on this canvas\n\tend handler\n\nText can be measured using the \n\n\tmeasure mText on mCanvas\n\t\nsyntax. This can be used for example to do text wrapping, by calculating\nthe widths of successive chunks of text and inserting line breaks where\nappropriate.\n\n#### Transformations\n\nBoth Path objects and canvases can be transformed using the standard\naffine transforms - either using the specific translate, rotate or scale\nsyntax, or arbitrary transform matrices.\n\n### Composed Widgets\nWidgets can either be 'host' widgets, as in the previous example, \ncreated when a widget is directly embedded in a stack, or 'child' \nwidgets which are created when a widget is  used as a child widget \nwithin another widget.\nThe syntax for composed widgets is included in the com.livecode.widget \nmodule.\n\n#### A simple composed widget\nThis composed widget example composes the clock widget and the selector \nwidget, to create a version of the clock widget with adjustable time \nzone.\n![enter image description here](images/extensions-composed.png)\nThe label at the top of the widget reflects which portion of the widget \nthe mouse is over.\n\n\twidget com.livecode.extensions.example.simplecomposed\n\n\tuse com.livecode.canvas\n\tuse com.livecode.widget\n\n\tmetadata title is \"Simple Composed Widget\"\n\tmetadata author is \"LiveCode\"\n\tmetadata version is \"1.0.0\"\n\n\tprivate variable mInsideChild as String\n\tprivate variable mInside as Boolean\n\n\tprivate variable mSelector as Widget\n\tprivate variable mClock as Widget\n\n\tpublic handler OnCreate()\n\t\tput false into mInside\n\t\tput the empty string into mInsideChild\n\n\t\tput a new widget \"com.livecode.extensions.livecode.selector\" into mSelector\n\t\tset property \"numSelections\" of mSelector to 6\n\t\tset annotation \"Name\" of mSelector to \"Selector\"\n\n\t\tput a new widget \"com.livecode.extensions.livecode.clock\" into mClock\n\t\tset annotation \"Name\" of mClock to \"Clock\"\n\n\t\tplace mSelector\n\t\tplace mClock\n\tend handler\n\t\n\tend widget\n\nNotice that Widget is a variable type. This widget stores references to \nits child widgets in private variables. In the `OnCreate` handler, the \nwidget objects are created, stored in the private variables and \n'placed'. Child widgets can be stored as variables and \nmanipulated without actually being drawn to a canvas if they are \nunplaced.\nProperties implemented by child widgets can be got and set using the \n`property <propName> of <child widget>` syntax.\nPlacing a widget ensures that they are drawn, in placement order. \nSetting an annotation of a child widget assigns it a tag so that when an \nunknown child widget is returned by an operator, its annotation can be \nused to identify it.\n\n\tpublic handler OnMouseEnter()\n\t\tput true into mInside\n\t\n\t\tif the target is not nothing then\n\t\t\tput annotation \"Name\" of the target into mInsideChild\n\t\tend if\n\n\t\tredraw all\n\tend handler\n\n\tpublic handler OnMouseLeave()\n\t\tif the target is not nothing then\n\t\t\tput the empty string into mInsideChild\n\t\tend if\n\n\t\tput false into mInside\n\n\t\tredraw all\n\tend handler\n\nIn the *OnMouseEnter* and *OnMouseLeave* handlers, *the target* is used \nto obtain a reference to the child widget that triggered the \n*OnMouseEnter* and *OnMouseLeave* events, and the previously assigned \nannotation put into the `mInsideChild` variable, which in turn \nis rendered to the canvas in the *OnPaint* handler.\n\n\tpublic handler OnPaint()\n\t\tset the paint of this canvas to solid paint with color [0.75, 0.75, 0.75]\n\t\tfill rectangle path of my bounds on this canvas\n\t\n\t\tif mInside then\n\t\t\tset the paint of this canvas to solid paint with color [1.0, 0.0, 0.0]\n\t\t\tset the stroke width of this canvas to 4.0\n\t\t\tstroke rectangle path of my bounds on this canvas\n\t\tend if\n\t\n\t\tif mInsideChild is not the empty string then\n\t\t\tset the paint of this canvas to solid paint with color [0.0, 0.0, 0.0]\n\t\t\tfill text mInsideChild at top of my bounds on this canvas\n\t\tend if\n\tend handler\n\nThe rectangle of each child widget is controlled using the following syntax:\n* ```the rectangle of <widget>``` - Enables manipulation of the rectangle property of a child widget.\n* ```the width of <widget>``` - Enables manipulation of the width property of a child widget.\n* ```the height of <widget>``` - Enables manipulation of the height property of a child widget.\n* ```the location of <widget>``` - Enables manipulation of the location property of a child widget.\n\n\tpublic handler OnGeometryChanged()\n\t\tset the rectangle of mSelector to rectangle [ 0, 20, my width, 50 ]\n\t\tset the rectangle of mClock to rectangle [ 0, 50, my width, my height ]\n\tend handler\n\nFinally, messages posted by child widgets can be handled in the direct \nparent by handling the appropriate message (prepending 'On'). For \nexample, the selector widget posts *optionChanged* when one of its \nnumbers is selected. This is handled by this composed widget example in \nan *OnOptionChanged* handler.\n\n\tpublic handler OnOptionChanged(in pIndex)\n\t\tset property \"timeZone\" of mClock to pIndex - 1\n\tend handler\n\n### Using native APIs for libraries\n\nOne of the most powerful features of LiveCode Builder is the foreign \nfunction interface (FFI). It can be used to access native APIs on all \nsupported platforms.\n\nThe fundamental concept involved in using the FFI is the foreign handler \nbinding. This is a string containing information about the native \nfunctionality that is being bound to.\n\nThe format of the binding string varies slightly depending on the \nlanguage of the foreign handler - for a complete specification, see the\nLiveCode Builder Language Reference.\n\n#### C\n\nIn order to bind to C functions from a dynamic library, there is one \nessential thing to know: the signature of the function. \n\n>**Note:** On Windows, it is also necessary to find out the calling \n> convention of the function. In the majority of cases if binding to \n> functions in the Windows API, the calling convention will be \n> `stdcall`.\n\nThe declared types of the foreign handler must match the signature, so\nthat the FFI call can be computed correctly. For example, to bind to the \n`atof` C standard library function that converts a C-string to a double,\n\n\tdouble atof(const char *str)\n\nWe could use:\n\n\tforeign handler C_AToF(in pString as ZStringNative) returns CDouble \\\n\t\tbinds to \"atof\"\n\nSee the [Language Reference](https://github.com/livecode/livecode/blob/develop/docs/guides/LiveCode%20Builder%20Language%20Reference.md#the-c-binding-string) \nfor more information on C binding strings. \n\n##### Callbacks\n\nWhen used in the context of a foreign handler definition, a foreign\nhandler type will cause automatic bridging of the LCB handler to a C\nfunction pointer which can be called directly by the native code.\n\nThe function pointers created in this fashion have lifetime\nequivalent to that of the calling context. In particular, for\nwidgets they will last as long as the widget does, for all other\nmodule types they will last as long as the module is loaded.\n\nFor example, suppose you have the following function in `myLib`:\n\nvoid qsort(void *base, size_t nitems, size_t size, int (*compar)(const void *, const void*))\n\n\tvoid c_function_with_callback(void* p_context, bool(*func)(void* p_context))\n\nThis can be bound to using the following:\n\n\tpublic foreign handler type CallbackType(in pContext as Pointer) returns CBool\n\t\n\tforeign handler CFunctionWithCallback(in pContext as Pointer, in pHandler as CallbackType) returns nothing \\\n\t\tbinds to \"myLib>c_function_with_callback\"\t\n\t\n\thandler MyCallback(in pContext as Pointer) returns CBool\n\t\t...\n\t\t\n\t\treturn true\n\tend handler\n\t\t\n\thandler CallCFunctionWithCallback(in pContext as Pointer)\n\t\tCFunctionWithCallback(pContext, MyCallback)\n\tend handler\n\n##### Using compiled libraries\n\nExtensions can include compiled libraries on which they depend. The\nlibraries must be compiled for each platform and architecture they are\nrequired on and placed folders named with a platform ID in the extension\ncode folder. The platform ID folder names are in the form:\n\n    <architecture>-<platform>[-<options>]\n\nSee the [platform ID](https://github.com/livecode/livecode/blob/develop/docs/development/platform-id.md)\nspecification for more details.\n\n###### Dynamic Linking\n\nOn all platforms with the exception of iOS devices only dynamically linked\nlibraries are supported. Static linking is not yet supported in iOS simulator\nbuilds. On iOS 8+ devices dynamically linked frameworks (`.framework`) are\nsupported.\n\n###### Static Code Libraries for iOS Device Builds\n\nStatic libraries and frameworks for iOS must be compiled into a lcext object.\nUse the [build-module-lcext-ios.sh shell script](https://github.com/livecode/livecode/blob/develop/tools/build-module-lcext-ios.sh)\nas an example of how to do so.\n\nThe script has the following inputs in order:\n\n- The path to the module compiled to C++ with using `lc-compile` with the\n`--forcebuiltins --outputauxc OUTPUTFILE` options. The output file inclues both\nthe module and shims for any C foreign bindings. Use a `.cpp` extension so the\ncompiler treats the file correctly.\n- The deps file which is a text file listing required dependencies when linking\nthe object where each line is in the form `{library | [weak-]framework} <name>`\n- Lcext output file path (must use the lcext extesion).\n- The full name of the module. For example, `com.livecode.library.timezone`.\n- The output file path for the ios module. This should be named `module.lcm` and\nbe next to the lcext object in the code folder. This is a dummy module we include\nin standalones that is just the name to be loaded as the actual module code is\nalready linked into the executable.\n- one or more full paths to static libraries. If linking a static framework the\nstatic library is located at `<name>.framework/<name>`\n\n###### Java and Android Libraries\n\nLibraries to load on android (`.jar` & `.aar`) may be placed in the code\nfolder `jvm-android`. \n\nJava libraries to load on all platforms supporting Java may be placed in the\ncode folder `jvm`.\n\n###### Example Directory Structure\n\n    module.lcm\n    manifest.xml\n    api.lcdoc\n    library.lcb\n    resources/image.png\n    code/universal-mac/library.dylib\n    code/x86-win/library.dll\n    code/x86-linux/library.so\n    code/x86_64-linux/library.so\n    code/armv6-android/library.so\n    code/jvm-android/library.aar\n    code/jvm/library.jar\n    code/universal-ios-iphoneos11.4/library.lcext\n    code/universal-ios-iphoneos11.4/module.lcm\n    code/universal-ios-iphonesimulator11.4/library.dylib\n\n#### Java\n\nJava bindings are currently supported on Android, Mac and Linux. On \ndesktop platforms the IDE will attempt to find the correct setting for\nthe `JAVA_HOME` environment variable. As this can vary from distro to\ndistro on Linux, this may fail - in this case ensure you set `JAVA_HOME` \nin script or using the message box. \n\n##### Java Platform API\n\nOn any of the supported platforms, it is possible to bind to methods and\nfields of classes in the Java Platform API.\n\nFor example, take the [java.util.UUID class](https://docs.oracle.com/javase/7/docs/api/java/util/UUID.html) . \nHere is a simple library which uses this class to return a new \npseudo-randomly generated UUID as a string:\n\n\t// The following comment block forms the top-level documentation of\n\t// this library\n\t/**\n\tThis library allows the creation of a UUID using the Java Platform\n\tAPI. \n\t*/\n\tlibrary com.livecode.library.javauuid\n\n\tmetadata title is \"Java UUID\"\n\tmetadata author is \"LiveCode\"\n\tmetadata version is \"1.0.0\"\n\t\n\t// Bind to the static randomUUID() method of the java.util.UUID class\n\t__safe foreign handler JNI_RandomUUID() returns JObject \\\n\t\tbinds to \"java:java.util.UUID>randomUUID()Ljava/util/UUID;!static\"\n\t\t\n\t// Bind to the toString() instance method of the java.util.UUID class\n\t__safe foreign handler JNI_UUIDToString(in pUUID as JObject) returns JString \\\n\t\tbinds to \"java:java.util.UUID>toString()Ljava/lang/String;\"\n\n\t// Library public handler - this will be accessible from LiveCode\n\t// when this library is loaded. The following comment block will\n\t// be used to generate the documentation\n\t/**\n\tReturns a new random UUID.\n\t\n\tReturns (String): \n\tThe string representation of a type 4 (pseudo randomly generated) \n\tUUID.\n\t*/\n\tpublic handler GetRandomUUIDJava() returns String\n\t    // Call the static randomUUID method to return an instance of \n\t    // the UUID class\n\t\tvariable tUUID as JObject\n\t\tput JNI_RandomUUID() into tUUID\n\t\t\n\t\t// Call the toString method on the UUID instance to obtain the \n\t\t// (java) string representation of the UUID\n\t\tvariable tUUIDString as JString\n\t\tput JNI_UUIDToString(tUUID) into tUUIDString\n\t\t\n\t\t// Convert to a LiveCode String and return\n\t\treturn StringFromJString(tUUIDString)\n\tend handler\n\n\tend library\n\n### Other binding examples\n\n* Binding to a class constructor with no parameters:\n\n\t__safe foreign handler CreateJavaObject() returns JObject binds to \"java:java.lang.Object>new()\"\n\n* Binding to a class constructor with parameters:\n\n\t__safe foreign handler CreateJavaString(in pBytes as JByteArray) returns JString binds to \"java:java.lang.String>new([B)\"\n\n* Binding to a class instance method\n\n\t__safe foreign handler JavaStringIsEmpty(in pString as JString) returns JBoolean binds to \"java:java.lang.String>isEmpty()Z\"\n\t\n* Binding to a class static method\n\n\t__safe foreign handler CallJavaAdd(in pLeft as JInt, in pRight as JInt) returns JInt binds to \"java:java.lang.Math>addExact(JJ)J!static\"\n\n* Binding to a class field\n\n\t__safe foreign handler JavaCalendarSetTime(in pCalendar as JObject, in pTime as JLong) returns nothing binds to \"java:java.util.Calendar>set.time(J)\"\n\t__safe foreign handler JavaCalendarGetTime(in pCalendar as JObject) returns JLong binds to \"java:java.util.Calendar>get.time()J\"\n\n* Binding to a class constant\n\n\t__safe foreign handler GetJavaPi() returns JDouble binds to \"java:java.lang.Math>get.PI()D!static\"\n\n##### Android API\n\nOn Android it is possible to access the standard platform APIs using\nJava FFI.\n\nhttps://github.com/livecode/livecode/blob/develop/extensions/libraries/toast/toast.lcb\n\n##### Third-party libraries\n\nThe standalone builder will look for .jar files in the `code/jvm` folder\nof an extension package and load them automatically on startup of a\nstandalone. Due to the way things currently work, testing extensions \nwith jar files in the IDE is not supported. However it can be done by \nsetting the CLASSPATH environment variable before the Java Virtual\nMachine is initialized. See [Custom Java classes](#custom-java-classes) \nfor an example of how to do this.\n\nFor android, the possibilities for including third-party libraries \nexpands substantially. The `code/jvm-android` folder of an extension \npackage can contain .jar and .aar files, and obviously the .jar files\ncan make use of the Android API.\n\nClasses in .jar files (either included directly, or within .aar \npackages) can be accessed using Java FFI in exactly the same way as\nclasses in the Android API.\n\n.aar packages can also contain resources and AndroidManifest.xml files - \nthese are merged with the manifest and resources generated by LiveCode\nwhen building an Android application.\n\n##### Custom Java classes\n\nAs .jar file code resources are supported, you can write and compile \ncustom Java classes for use with an LCB extension. \n\nAssuming the current folder is the root of an extension, consider the \nfollowing java code, in a file \njava/com/livecode/library/helloworldjava/HelloWorld.java:\n\n\tpackage com.livecode.library.helloworldjava;\n\n\tpublic class HelloWorld \n\t{\n\t\tpublic static String sayHello()\n\t\t{\n\t\t\treturn \"Hello World!\"\n\t\t}\n\t}\n\nThis can be compiled and packaged using java command-line tools:\n\n\tjavac java/com/livecode/library/helloworldjava/HelloWorld.java\n\tjar cvf code/jvm/HelloWorld.jar -C java .\n\nNow there should be a HelloWorld.jar file in the appropriate location \nrelative to the extension.\n\nIn helloworld.lcb,\n\n\tlibrary com.livecode.library.helloworldjava\n\n\tuse com.livecode.foreign\n\tuse com.livecode.java\n\t\n\t__safe foreign handler JNI_SayHello() returns JString \\\n\t\tbinds to \"java:com.livecode.library.helloworldjava.HelloWorld>sayHello()Ljava/lang/String;\"\n\t\t\n\tpublic handler SayHello() returns String\n\t\treturn StringFromJString(JNI_SayHello())\n\tend handler\n\t\n\tend library\n\nA standalone including this extension would be able to execute the \nscript\n\n\tanswer SayHello() \n\t\nto pop up an answer dialog with the text \"Hello World!\". Obviously that \nis a rather circuitous route when you can already do \n\n\tanswer \"Hello World!\"\n\t\nbut it does open up a lot of possibilities for interoperation with Java\nlibraries.\n\nOne such application would be the ability to record .wav files on \nAndroid. The MediaPlayer class does not come equipped with this \nfunctionality. \n\nThis can be compiled and packaged using java command-line tools, \nensuring the appropriate android.jar is included in the dependencies \n(here we assume the location of the android toolchain is standard and\nthe android-23 platform is downloaded):\n\n\tjavac -cp ~/android/toolchain/android-sdk/platforms/android-23/android.jar java/src/com/livecode/library/androidwavrecorder/ExtAudioRecorder.java\n\t\n\tjar cvf code/jvm-android/AndroidWavRecorder.jar -C java/src .\n\nNow there should be a AndroiWavRecorder.jar file in the appropriate \nlocation relative to the extension. \n\n#### Objective-C\n\nThe types used in Objective-C foreign handler declarations are the usual \nC types, plus a few special ones for handling Obj-C `id` objects. These\nare:\n\n* `ObjcId` - an id with no implicit action on its reference count\n* `ObjcRetainedId` - an id which is expected to already have been retained. (i.e. the caller or callee expects to receive it with +1 ref count)\n* `ObjcAutoreleasedId` - an id which has been placed in the innermost autorelease pool before being returned to the caller\n\nThe `ObjcObject` type is a wrapper round the raw `ObjcId` types, which \nmanages the lifetime of the obj-c object it contains. It should \ngenerally be used when using obj-c objects within LCB.\n\nObjective-C binding strings mirror as closely as possible the structure \nof method declarations in Objective-C. For example, the class \n`NSSpeechSynthesizer` has methods\n\n\t- (id)initWithVoice:(NSString *)voice;\n\t- (BOOL)startSpeakingString:(NSString *)string;\n\nIn order to create an instance of the class, we first use the superclass \n`NSObject`'s\n\n\t+ (id)alloc;\n\nmethod to allocate an instance, and then call `initWithVoice:` on it:\n\n\tforeign handler Objc_NSSpeechSynthesizerAlloc() returns ObjcRetainedId \\\n\t\tbinds to \"objc:NSSpeechSynthesizer.+alloc\"\n\t\t\nThe `+` indicates this is a class method, i.e. we don't require an \ninstance of the class to call the method. \n\n\tforeign handler Objc_NSSpeechSynthesizerInitWithVoice(in pSynthesizer as ObjcRetainedId, in pVoice as optional ObjcId) returns optional ObjcRetainedId \\\n\t\tbinds to \"objc:NSSpeechSynthesizer.-initWithVoice:\"\n\t\t\nThe `-` here indicates this is an instance method, i.e. we require an \ninstance of the class to call the method. This is always the first \nparameter. We can then create and initialize an NSSpeechSynthesizer \nusing the following. We pass `nothing` to `initWithVoice:` to use the\ndefault voice.\n\n\thandler CreateSpeechSynthesizer() returns ObjcObject\n\t\tvariable tSynthesizer as ObjcObject\n\t\tput Objc_NSSpeechSynthesizerAlloc() into tSynthesizer\n\t\t\n\t\treturn Objc_NSSpeechSynthesizerInitWithVoice(tSynthesizer, \\\n\t\t\tnothing)\n\tend handler\n\nTo speak, we would bind to the `startSpeakingString:` method:\n\n\tforeign handler Objc_NSSpeechSynthesizerStartSpeaking(in pSynthesizer as ObjcId, in pString as ObjcId) returns CBool \\\n\t\tbinds to \"objc:NSSpeechSynthesizer.-startSpeakingString:\"\n\t\nThen expose a public library handler to enable calls from LiveCode.\n\n\tprivate variable mSynthesizer as optional ObjcObject\n\tpublic handler SynthesizeSpeech(in pString as String) returns Boolean\n\t\tif mSynthesizer is nothing then\n\t\t\tput CreateSpeechSynthesizer() into mSynthesizer\n\t\tend if\n\t\t\n\t\tObjc_NSSpeechSynthesizerStartSpeaking(mSynthesizer, \\\n\t\t\tStringToNSString(pString))\n\tend handler\n\n##### Callbacks\n\nCallbacks are usually handled by creating delegates. A class delegate \nhandles the events associated with that class and marshalls the \ncallback message.\n\nObjective-C delegate objects with LCB implementations of protocol \nmethods can be created using the `CreateObjcDelegate` and \n`CreateObjcInformalDelegate` handlers, provided by the com.livecode.objc \nmodule.\n\nIn order to create a delegate to handle a particular protocol method, \npass in the protocol name as the first argument and the mapping from \nmethod names to LCB handlers as the second argument. For example, to \ncreate a selectionChanged message for an `NSTextView`, we need to create \na handler\n\n\tprivate handler DidChangeSelection(in pNotification as ObjcObject) returns nothing\n\t\tpost \"selectionChanged\"\n\tend handler\n\nand create a `NSTextViewDelegate`:\n\n\tvariable tDelegate as optional ObjcObject\n\tput CreateObjcDelegate( \\\n\t\t\"NSTextViewDelegate\", \\ \t\n\t\t{\"textViewDidChangeSelection:\": DidChangeSelection}, \\\n\t\t) into tDelegate\n\tif tDelegate is not nothing then\n\t\tput tDelegate into mTextViewDelegate\n\tend if\n\t\nOptionally, a context parameter can be passed in at delegate creation\ntime:\n\n\tput CreateObjcDelegateWithContext( \\\n\t\t\"NSTextViewDelegate\", \\ \t\n\t\t{\"textViewDidChangeSelection:\": DidChangeSelectionContext}, \\\n\t\ttContext) into tDelegate\n\t\t\n\tif tDelegate is not nothing then\n\t\tput tDelegate into mTextViewDelegate\n\tend if\n\nIn this case the context variable will be passed as first argument of \nthe corresponding LCB callback:\n\n\tprivate handler DidChangeSelectionContext(in pContext, in pNotification as ObjcObject) returns nothing\n\t\tpost \"selectionChanged\" with [pContext]\n\tend handler\n\nSome protocols consist of purely optional methods. In this case the \ninformation about the protocol's methods are not available from the \t\nobjective-c runtime API. For this eventuality there are also handlers\n`CreateObjcInformalDelegate` and `CreateObjcInformalDelegateWithContext`.\n\nThese handlers take a list of foreign handlers as their first argument\ninstead of a protocol name. The foreign handlers' information is used to\nresolve incoming selectors so that the desired LCB callback is called. \nFor example the `NSSoundDelegate` protocol has only one method, and it \nis optional, \n\n\t- (void)sound:(NSSound *)sound didFinishPlaying:(BOOL)aBool;\n\nSo in order to create an `NSSoundDelegate`, we need to create a list of\nforeign handlers, in this case just the following:\n\n\tforeign handler NSSoundDidFinishPlaying(in pSound as ObjcId, in pDidFinish as CSChar) binds to \"objc:.-sound:didFinishPlaying:\"\n\t\nand create the informal delegate\n\t\n\thandler DidSoundFinish(in pSound as ObjcId, in pDidFinish as Boolean) returns nothing\n\t\tif pDidFinish then\n\t\t\tpost \"soundFinished\"\n\t\tend if\n\tend handler\n\t\n\tforeign handler Objc_SetSoundDelegate(in pSound as ObjcId, in pDelegate as ObjcId) returns nothing \\\n\t\tbinds to \"objc:NSSound.-setDelegate:\"\n\t...\n\t\n\tvariable tDelegate as optional ObjcObject\n\tput CreateObjcInformalDelegate( \\\n\t\t[NSSoundDidFinishPlaying], \\ \t\n\t\t{\"textViewDidChangeSelection:\": DidChangeSelection}) \\\n\t\tinto tDelegate\n\tend if\n\tif tDelegate is not nothing then\n\t\tput tDelegate into mSoundDelegate\n\t\tObjc_SetSoundDelegate(tSound, tDelegate)\n\tend if\n\n> *Note:* Delegate properties are usually 'assigned' rather than \n> 'retained', so it is necessary to store them in module variables \n> until they are no longer needed. Generally the pattern required is\n> as follows:\n\n\thandler OnOpen()\n\t\t-- Create native view and set native layer\n\t\t-- Set native view delegate property\n\t\t-- Store view and delegate in module vars\n\tend handler\n\n\thandler OnClose()\n\t\t-- Set native view delegate property to nothing\n\t\t-- Put nothing into view and delegate module vars\n\t\t-- Set native layer to nothing\n\tend handler\n\nFor our speech synthesizer example, suppose we want to post a message \nwhen the speaking is finished. In NSSpeechSynthesizer.h, we can see the\ndefinition of the `NSSpeechSynthesizerDelegate`:\n\n\t@protocol NSSpeechSynthesizerDelegate <NSObject>\n\t@optional\n\t- (void)speechSynthesizer:(NSSpeechSynthesizer *)sender didFinishSpeaking:(BOOL)finishedSpeaking;\n\t...\n\t\nThe first thing to note is that the protocol methods are all optional.\nThis means that we have to use an informal delegate. To attach an LCB \nhandler to the didFinishSpeaking event, we need to define both the \nforeign handler that binds to the protocol method and the LCB handler \nthat should be called. Again this is an instance method of the delegate \nclass, so the first parameter will be the delegate itself. \n\nAgain since the protocol method is optional, it will not be found if we\nbind to \n`NSSpeechSynthesizerDelegate.-speechSynthesizer:didFinishSpeaking:`, so \nit is necessary to use dynamic binding for the foreign handler (i.e. \nsimply omitting the class in the binding string):\n\n\tforeign handler Objc_SpeechSynthesizerDidFinishSpeaking(in pSynthesizerDelegate as ObjcId, in pSynthesizer as ObjcId, in pFinished as CBool) returns nothing \\\n\t\tbinds to \"objc:.-speechSynthesizer:didFinishSpeaking:\"\n\n\thandler OnDidFinishSpeaking(in pSynthesizerDelegate as ObjcId, in pSynthesizer as ObjcId, in pFinished as CBool) returns nothing\n\t\tpost \"finishedSpeaking\"\n\tend handler\n\t\n\tforeign handler Objc_SpeechSynthesizerSetDelegate(in pSynthesizer as ObjcId, in pDelegate as ObjcId) returns nothing \\\n\t\tbinds to \"objc:NSSpeechSynthesizer.-setDelegate:\"\n\t\n\thandler SetSpeechSynthesizerDelegate()\n\t\tvariable tDelegate as ObjcObject\n\t\tput CreateObjcInformalDelegate( \\\n\t\t\t[Objc_SpeechSynthesizerDidFinishSpeaking], \\\n\t\t\t{ \"speechSynthesizer:didFinishSpeaking:\": \\\n              OnDidFinishSpeaking }) into tDelegate\n              \n        Objc_SpeechSynthesizerSetDelegate(mSynthesizer, tDelegate)\n\tend handler\n\t\n### Using native views for widgets\n\nThe key piece of syntax for creating widgets that hook into native view \nobjects is `my native layer`:\n\n\tset my native layer to tView\n\t\nThe `tView` object is different on each platform, as is the method of \nspecifying LCB handlers for native view event callbacks. We will use the\nexample of a native button on each platform to illustrate this, where\npossible.\n\nThe native layer should be created and destroyed every time the card\nthe widget is on is opened and closed respectively. Therefore the \npattern that should be adopted when writing a native widget is to use\nthe `OnOpen` and `OnClose` messages as follows:\n\n\tprivate variable mNativeLayer as optional Pointer\n\thandler OnOpen()\n\t\tput CreateNativeLayer() into mNativeLayer\n\t\tset my native layer to mNativeLayer\n\tend handler\n\t\t\n\thandler OnClose()\n\t\tset my native layer to nothing\n\t\tput nothing into mNativeLayer\n\tend handler\n\nWhen using a native layer, a widget's `OnPaint` handler is not called.\nHowever it is recommended to provide some sort of placeholder `OnPaint`\nmethod to represent the widget when the native layer is not supported\non the current platform.\n\n#### Android\n\n##### Native view\n\nNative views on Android are classes derived from android.view.View. \nThe Android button widget's native layer is an instance of the \n`android.widget.Button` class:\n\n\t↳\tandroid.view.View\n\t\t↳\tandroid.widget.TextView\n\t\t\t↳\tandroid.widget.Button\n\nThe following snippet shows how to bind to the button constructor and \nset the native layer:\n\n\t// Bind to Android engine methods in order to fetch the application\n\t// Context\n\t__safe foreign handler _JNI_GetAndroidEngine() returns JObject \\\n\t\tbinds to \"java:com.runrev.android.Engine>getEngine()Lcom/runrev/android/Engine;!static\"\n\t__safe foreign handler _JNI_GetEngineContext(in pEngine as JObject) returns JObject \\\n\t\tbinds to \"java:android.view.View>getContext()Landroid/content/Context;\"\n\n\t// Bind to the android.widget.Button constructor\n\t__safe foreign handler _JNI_ButtonNew(in pContext as JObject) returns JObject \\\n\t\tbinds to \"java:android.widget.Button>new(Landroid/content/Context;)?ui\"\n\n\t// Store a reference to the native view\n\tprivate variable mNativeView as optional JObject\n\t\n\thandler CreateNativeLayer() returns Pointer\n\t\t// Fetch the application Context\n\t\tvariable tContext as JObject\n\t\tput _JNI_GetEngineContext(_JNI_GetAndroidEngine()) into tContext\n\t\t\n\t\t// Create an instance of the android.widget.Button class\n\t\tput _JNI_ButtonNew(tContext) into mNativeView\n\t\t\n\t\treturn PointerFromJObject(mNativeView)\n\tend handler\n\t\n\thandler SetNativeLayer()\n\t\tset my native layer to CreateNativeLayer()\n\tend handler\n\t\nView objects on Android always require the application Context in their\nconstructors.\n\nView objects should always be created on the UI thread.\n\n##### Event handlers\n\nA button widget is obviously not complete without an action callback. We\nwant a message to be received by the widget object in LiveCode whenever\nthe native view is clicked. \n\nOn Android, the general procedure is to attach a `Listener` to an \nobject. In Java, `Listener`s are classes which implement a specified set\nof callback methods defined in that listener's interface. The general \nmethod of defining [interface callbacks on Android](#interface-proxy-callbacks)\nis used to create listeners with LCB handler callbacks. \n\nThe following snippet shows how to attach an `OnClickListener` to the \nButton instance:\n\n\t// Define handler type for button click callback. This matches\n\t// the android.view.View.OnClickListener's \n\t// \t\tabstract void onClick(View v)\n\t// method.\n\thandler type ClickCallback(in pView as JObject) returns nothing\n\t\n\t// Bind to the interface proxy method. Since there is only one \n\t// method to be implemented for the OnClickListener interface,\n\t// we just pass in a handler of the appropriate type.\n\t__safe foreign handler _JNI_OnClickListener(in pHandler as ClickCallback) returns JObject \\\n\t\tbinds to \"java:android.view.View$OnClickListener>interface()\"\n\t\t\n\t// Bind to the method used to set the OnClickListener on the\n\t// Button object.\n\t__safe foreign handler _JNI_SetOnClickListener(in pButton as JObject, in pListener as JObject) returns nothing \\\n\t\tbinds to \"java:android.view.View>setOnClickListener(Landroid/view/View$OnClickListener;)V?ui\"\n\t\n\t// Actual handler (of type ClickCallback) that will be called\n\t// when the button is clicked\n\thandler OnButtonClick(in pView as JObject) returns nothing\n\t\t// The widget object in LiveCode will receive the posted message\n\t\tpost \"mouseUp\"\n\t\t\n\t\t// Ensure the engine thread is notified of a pending event\n\t\tMCEngineRunloopBreakWait()\n\tend handler\n\t\n\t// Store the OnClickListener object in a private variable\n\tprivate variable mOnClickListener as optional JObject\n\t\n\t// Set the OnClickListener\n\thandler SetOnClickListener(in pButton as JObject) returns nothing\n\t\t// Pass the OnButtonClick handler in the call to create a \n\t\t// listener\n\t\tput _JNI_OnClickListener(OnButtonClick) into mOnClickListener\n\t\t\n\t\t// Set the OnClickListener on a Button instance\n\t\t_JNI_SetOnClickListener(pButton, mOnClickListener)\n\tend handler\n\nSometimes listener interfaces have multiple callback methods, for \ndifferent events. In this case, you must pass an array mapping callback \nmethod names to handlers so that the correct handler is called for each\nevent. This can also be done with single-method interfaces, and indeed\nis the recommended style to use as it will continue to work even if\nadditional callback methods are added to the interface in subsequent \nAPI levels.\n\nSwitching to this style would require two small tweaks to the above code:\n\n\t// Bind to the interface proxy method.\n\t__safe foreign handler _JNI_OnClickListener(in pMapping as Array) returns JObject \\\n\t\tbinds to \"java:android.view.View$OnClickListener>interface()\"\n\n\t...\n\t\n\t// Set the OnClickListener\n\thandler SetOnClickListener(in pButtonView as JObject) returns nothing\n\t\t// Map the OnButtonClick handler to the onClick method\n\t\tput _JNI_OnClickListener({\"onClick\":OnButtonClick}) \\\n\t\t\tinto mOnClickListener\n\t\t\n\t\t// Set the OnClickListener on a Button instance\n\t\t_JNI_SetOnClickListener(pButtonView, mOnClickListener)\n\tend handler\t\t\n\n##### Hooking up properties\n\nProperties of Android native views can be set using methods of the view \n(or one of its parent classes). For example, to hook up the enabled \nproperty of the button, we bind to the `setEnabled` method of the parent\n`TextView` class:\n\n\t__safe foreign handler _JNI_SetTextViewEnabled(in pView as JObject, in pValue as JBoolean) returns nothing \\\n\t\tbinds to \"java:android.view.View>setEnabled(Z)V?ui\"\n\n\thandler SetEnabled(in pButtonView as Pointer)\n\t\t_JNI_SetTextViewEnabled(pButtonView, my enabled)\n\tend handler\n\t\n#### iOS\n\n##### Native view\n\nNative views on iOS are classes derived from UIView. The iOS button \nwidget's native layer is an instance of the \n`UIButton` class.\n\nThe following snippet shows how to bind to the button constructor and \nset the native layer:\n\n\t// Define an alias for CULong\n\tprivate type NSUInteger is CULong\n\t\n\t// Bind to the UIButton class method buttonWithType:\n\tprivate foreign handler ObjC_UIButtonButtonWithType(in pType as NSUInteger) returns ObjcId binds to \"objc:UIButton.+buttonWithType:?ui\"\n\n\t// For a standard push button we need the type to be \n\t// UIButtonTypeSystem, which is 1\n\tconstant UIButtonTypeSystem is 1\n\t\n\t// Store a reference to the native view\n\tprivate variable mNativeView as optional ObjcObject\n\tunsafe handler CreateNativeLayer() returns Pointer\n\t\t// Create an instance of the UIButton class\n\t\tvariable tButtonInstance as ObjcObject\n\t\tput ObjC_UIButtonButtonWithType(UIButtonTypeSystem) \\\n\t\t\tinto mNativeView\n\t\t\n\t\t// Return the pointer\n\t\treturn PointerFromObjcObject(mNativeView)\n\tend handler\n\t\n\thandler SetNativeLayer()\n\t\tset my native layer to CreateNativeLayer()\n\tend handler\n\t\n##### Event handlers\n\nViews on iOS relay information about user interactions using either the \n[target-action paradigm](https://developer.apple.com/library/content/documentation/General/Conceptual/Devpedia-CocoaApp/TargetAction.html) \nor [delegation](https://developer.apple.com/library/content/documentation/General/Conceptual/DevPedia-CocoaCore/Delegation.html)\n\nIn general, simple widgets will use the target-action paradigm. In \ngeneral, refer to the documentation for the particular class you are \nwrapping. According to the `UIButton` [API](https://developer.apple.com/documentation/uikit/uibutton), in the\nsection 'Responding to Button Taps', the `UIButton` class uses the \ntarget-action paradigm.\n\nSo, we can post a message to the widget script object in response to \nthe click action as follows:\n\n\t// Bind to the UIButton addTarget:action:forControlEvents: method\n\tprivate foreign handler ObjC_UIButtonAddTargetActionForControlEvents(in pObj as ObjcId, in pTarget as ObjcId, in pAction as UIntPtr, in pControlEvents as NSUInteger) returns nothing binds to \"objc:UIButton.-addTarget:action:forControlEvents:?ui\"\n\t\n\t// Actual handler that will be called when the button is clicked\n\thandler OnButtonClick(in pSender as ObjcObject, in pContext as optional any) returns nothing\n\t\t// The widget object in LiveCode will receive the posted message\n\t\tpost \"mouseUp\"\n\t\t\n\t\t// Ensure the engine thread is notified of a pending event\n\t\tMCEngineRunloopBreakWait()\n\tend handler\n\t\n\t// Store the action proxy object in a private variable\n\tprivate variable mButtonProxy as optional ObjcObject\n\t\n\t// The push button action type is UIControlEventTouchUpInside,\n\t// which is 1 << 6. Constants cannot be evaluated expressions, so\n\t// just define the bit shift\n\tconstant UIControlEventTouchUpInsideBit is 6\n\t\n\t// Add the target action\n\tunsafe handler AddTargetAction(in pButtonView as ObjcObject) returns nothing\n\t\t// Create a proxy for the button object. This will receive the \n\t\t// button events and call the provided callback handler\n\t\tput ObjcProxyGetTarget(OnButtonClick, nothing) into mButtonProxy\n\n\t\t// Add the target-action to the button view\n    \tObjC_UIButtonAddTargetActionForControlEvents(pButtonView, \\\n    \t\tmButtonProxy, ObjcProxyGetAction(), \\\n    \t\t1 shifted left by UIControlEventTouchUpInsideBit bitwise)\n\tend handler\n\nMore complex views on iOS require creation of delegates. For example, \nthere are several different user interactions possible with then \n`UITextField` view. In order to handle these interactions, we create\na `UITextFieldDelegate` - see the [API](https://developer.apple.com/documentation/uikit/uitextfielddelegate?language=objc)\nfor the list of events that can be handled. \n\nIn this example we hook up `openField` and `textChanged` messages:\n\n\t// Bind to the text field's delegate property setter\n\tprivate foriegn handler Objc_SetTextFieldDelegate(in pTextField as ObjcId, in pDelegate as ObjcId) returns nothing \\\n\t\tbinds to \"objc:UITextField.-setDelegate:?ui\"\n\n\t// Handler to be called when the field is opened\n\thandler OnOpenField(in pField as ObjcId) returns nothing\n\t\t// The widget object in LiveCode will receive the posted message\n\t\tpost \"openField\"\n\t\t\n\t\t// Ensure the engine thread is notified of a pending event\n\t\tMCEngineRunloopBreakWait()\n\tend handler\t\n\t\n\t// Define the NSRange type, one of the parameters in the \n\t// textFieldShouldChangeCharactersInRange method\n\tpublic foreign type NSRange binds to \"MCAggregateTypeInfo:ff\"\n\t\n\t// Handler to be called when the field text is changed\n\thandler OnTextChanged(in pField as ObjcId, in pRange as NSRange, in pReplacement as ObjcId) returns CBool\n\t\t// The widget object in LiveCode will receive the posted message\n\t\tpost \"textChanged\"\n\t\t\n\t\t// Ensure the engine thread is notified of a pending event\n\t\tMCEngineRunloopBreakWait()\n\t\t\n\t\t// Allow the text to be changed\n\t\treturn true\n\tend handler\t\t\n\t\n\t// Store the delegate in a private variable\n\tprivate variable mTextFieldDelegate as optional ObjcObject\n\t\n\t// Set the delegate\n\tunsafe handler SetTextFieldDelegate(in pTextFieldView as ObjcObject) returns nothing\n\t\t// Create a delegate mapping the textFieldDidBeginEditing: \n\t\t// method to OnOpenField, and the \n\t\t// textFieldShouldChangeCharactersInRange: method to \n\t\t// OnTextChanged\n\t\t\n\t\t// First define the mapping\n\t\tvariable tMapping as Array\n\t\tput { \"textFieldDidBeginEditing:\": OnOpenField, \\\n\t\t\t  \"textField:shouldChangeCharactersInRange:replacementString:\": \\\n\t\t\t  OnTextChanged } into tMapping\n\t\t\n\t\tput CreateObjcDelegate(\"UITextFieldDelegate\", tMapping) \\\n\t\t\tinto mTextFieldDelegate\n\t\t\t\n\t\tObjc_TextFieldSetDelegate(pTextFieldView, mTextFieldDelegate)\n\tend handler\n\n##### Hooking up properties\n\nProperties of iOS native views can be set using methods of the view (or\none of its parent classes). For example, to hook up the enabled \nproperty:\n\n\tforeign handler ObjC_UIButtonSetEnabled(in pObj as ObjcId, in pEnabled as CBool) returns nothing \\\n\t\tbinds to \"objc:UIButton.-setEnabled:?ui\"\n\n\thandler SetEnabled(in pButtonView as Pointer)\n\t\tObjC_UIButtonSetEnabled(pButtonView, my enabled)\n\tend handler\n\n#### Mac\n\nNative views on Mac are classes derived from NSView. The Mac button \nwidget's native layer is an instance of the \n`NSButton` class.\n\nThe following snippet shows how to bind to the button constructor and \nset the native layer:\n\n\t// Define an alias for CULong\n\tprivate type NSUInteger is CULong\n\n\t// Bind to the NSButton class method to allocate a new NSButton\n\tprivate foreign handler ObjC_NSButtonAlloc() returns ObjcRetainedId binds to \"objc:NSButton.+alloc\"\n\t\n\t// Bind to the NSButton instance method to initialize an NSButton\n\tprivate foreign handler ObjC_NSButtonInit(in pObj as ObjcId) returns ObjcId binds to \"objc:NSButton.-init\"\n\t\n\t// Bind to NSButton instance methods setButtonType:, setBezelStyle:,\n\t// and -setBordered:\n\tprivate foreign handler ObjC_NSButtonSetButtonType(in pObj as ObjcId, in pStyle as NSUInteger) returns nothing binds to \"objc:NSButton.-setButtonType:\"\n\tprivate foreign handler ObjC_NSButtonSetBezelStyle(in pObj as ObjcId, in pStyle as NSUInteger) returns nothing binds to \"objc:NSButton.-setBezelStyle:\"\n\tprivate foreign handler ObjC_NSButtonSetBordered(in pObj as ObjcId, in pBordered as CBool) returns nothing binds to \"objc:NSButton.-setBordered:\"\n\n\t// For a standard push button we need:\n\t// buttonType to be NSMomentaryPushInButton = 7\n\t// bezelStyle to be NSRoundedBezelStyle = 1\n\tconstant kNSMomentaryPushInButton is 7\n\tconstant kNSRoundedBezelStyle is 1\n\t\n\t// Store a reference to the native view\n\tprivate variable mNativeView as optional ObjcObject\n\t\n\tunsafe handler CreateNativeLayer() returns Pointer\n\t\t// Create an instance of the NSButton class\n\t\tvariable tButtonInstance as ObjcObject\n\t\tput ObjC_NSButtonInit(ObjC_NSButtonAlloc()) into mNativeView\n\t\t\n\t\t// Set the properties we need for a push button\n\t\tObjC_NSButtonSetButtonType(mNativeView, kNSMomentaryPushInButton)\n\t\tObjC_NSButtonSetBezelStyle(mNativeView, kNSRoundedBezelStyle)\n\t\tObjC_NSButtonSetBordered(mNativeView, true)\t\t\n\n\t\t// Return the pointer\n\t\treturn PointerFromObjcObject(mNativeView)\n\tend handler\n\t\n\thandler SetNativeLayer()\n\t\tset my native layer to CreateNativeLayer()\n\tend handler\n\nViews on Mac relay information about user interactions using either the \n[target-action paradigm](https://developer.apple.com/library/content/documentation/General/Conceptual/Devpedia-CocoaApp/TargetAction.html) \nor [delegation](https://developer.apple.com/library/content/documentation/General/Conceptual/DevPedia-CocoaCore/Delegation.html)\n\nIn general, simple widgets will use the target-action paradigm. In \ngeneral, refer to the documentation for the particular class you are \nwrapping. The `NSButton` uses the target-action paradigm.\n\nSo, we can post a message to the widget script object in response to \nthe click action as follows:\n\n\n\tprivate foreign handler ObjC_NSButtonSetTarget(in pObj as ObjcId, in pTarget as ObjcId) returns nothing binds to \"objc:NSButton.-setTarget:\"\n\tprivate foreign handler ObjC_NSButtonSetAction(in pObj as ObjcId, in pAction as UIntPtr) returns nothing binds to \"objc:NSButton.-setAction:\"\n\n\t// Actual handler that will be called when the button is clicked\n\thandler OnButtonClick(in pSender as ObjcObject, in pContext as optional any) returns nothing\n\t\t// The widget object in LiveCode will receive the posted message\n\t\tpost \"mouseUp\"\n\t\t\n\t\t// Ensure the engine thread is notified of a pending event\n\t\tMCEngineRunloopBreakWait()\n\tend handler\n\n\t// Store the action proxy object in a private variable\n\tprivate variable mButtonProxy as optional ObjcObject\n\n\t// Add the target action\n\tunsafe handler AddTargetAction(in pButtonView as ObjcObject) returns nothing\t\n\t\tput ObjcProxyGetTarget(OnButtonClick, nothing) \\\n\t\t\tinto mButtonProxy\n\t\tObjC_NSButtonSetTarget(pButtonView, mButtonProxy)\n\t\tObjC_NSButtonSetAction(pButtonView, ObjcProxyGetAction())\n\tend handler\n\nMore complex views on Mac require creation of delegates. See the \ndiscussion of delegates on iOS for more information.\n\n##### Hooking up properties\n\nProperties of Mac native views can be set using methods of the view (or\none of its parent classes). For example, to hook up the enabled \nproperty:\n\n\tforeign handler ObjC_NSButtonSetEnabled(in pObj as ObjcId, in pEnabled as CBool) returns nothing \\\n\t\tbinds to \"objc:NSButton.-setEnabled:\"\n\n\thandler SetEnabled(in pButtonView as Pointer)\n\t\tObjC_NSButtonSetEnabled(pButtonView, my enabled)\n\tend handler\n\n#### Windows\n\n> **Important:** It is not yet possible to write a fully functional\n> native widget on Windows, as there is no method to capture events on\n> the native view and pass them back to LiveCode Builder. This will be\n> addressed in future releases.\n\n##### Native view\n\nNative views on Windows are HWNDs. The `CreateWindowEx` function is used\nto create HWNDs with specified properties. See the \n[API documentation](https://msdn.microsoft.com/en-us/library/windows/desktop/ms632680(v=vs.85%29.aspx) \nfor details on the parameters taken by `CreateWindowEx`.\n\nThe following snippet shows how to bind to `CreateWindowEx`, and use it \nto set the native layer to a button HWND:\n\n\t// Alias the types used in native calls\n\tpublic type DWORD is CULong\n\tpublic type WIDESTRING is ZStringUTF16\n\tpublic type HINSTANCE is Pointer\n\tpublic type HMENU is Pointer\n\tpublic type HWND is Pointer\n\n\t// Bind to the CreateWindowEx function. It is defined in the \n\t// user32.dll library (hence `user32>` in the binding string). \n\t// The CreateWindowEx function definition is preceded by the WINAPI \n\t// macro, which means it uses the stdcall calling convention (hence\n\t// `!stdcall` in the binding string)\n\tforeign handler CreateWindow(in pEx as DWORD, \\\n\t\tin pString as WIDESTRING, in pLabel as WIDESTRING, \\\n\t\tin pStyle as DWORD, in pX as CInt, in pY as CInt, \\\n\t\tin pWidth as CInt, in pHeight as CInt, in pParent as HWND, \\\n\t\tin pMenu as optional HMENU, in pInstance as optional HINSTANCE, \\\n\t\tin pParam as optional Pointer) \\\n\t\treturns HWND binds to \"user32>CreateWindowExW!stdcall\"\n\n\tprivate variable mNativeView as optional Pointer\n\n\t// Constants for the CreateWindow style parameter. We construct the\n\t// DWORD by taking the bitwise or of the styles that aree \n\t// appropriate.\n\t\n\t// BS_DEFPUSHBUTTON is the push button style constant\n\tconstant BS_DEFPUSHBUTTON is 1\n\t\n\t// WS_CHILD is the child window style constant. If this is not used\n\t// then `CreateWindowEx` creates a new main window.\n\tconstant WS_CHILD is 1073807361\n\t\n\t// CreateWindowEx requires the parent view pointer to be passed in\n\tunsafe handler CreateNativeView(in pParentView as Pointer)\n\t\t// Compute the style DWORD\n\t\tvariable tStyle as DWORD\n\t\tput WS_CHILD bitwise or BS_DEFPUSHBUTTON into tStyle\n\t\t\n\t\t// Pass in the predefined BUTTON window class\n\t\tvariable tWindowClass as String\n\t\tput \"BUTTON\" into tWindowClass\n\t\t\n\t\t// Call CreateWindow, with empty/default values for all other\n\t\t// parameters\n\t\tput CreateWindow(0, tWindowClass, \"\", tStyle, 0, 0, 0, 0, \\\n\t\t\tpParentView, nothing, nothing, nothing) \\\n\t\t\tinto mNativeView\n\t\n\t\treturn mNativeView\n\tend handler\n\n\tunsafe handler SetNativeLayer()\n\t\t// Get the parent view pointer\n\t\tvariable tParentView as Pointer\n\t\tMCWidgetGetMyStackNativeView(tParentView)\t\t\n\t\n\t\tset my native layer to CreateNativeLayer(tParentView)\n\tend handler\n\n\n##### Event handlers\n\nAs the general callback method has not yet been implemented on Windows,  \nunfortunately widgets that require user interaction are not yet \npossible. However, native widgets can be written that have only \nproperties and no user interaction, such as a progress indicator or\nlabel field.\n\n##### Hooking up properties\n\nProperties of Windows native views can be set using functions in the \nuser32 dll. For example, to hook up the enabled property of a Windows button:\n\n\tforeign handler EnableWindow(in pView as Pointer, in pEnable as CInt) \\\n\t\treturns CInt binds to \"user32>EnableWindow!stdcall\"\n\n\thandler SetEnabled(in pButtonView as Pointer)\n\t\tEnableWindow(pButtonView, my enabled)\n\tend handler\n\n#### Linux\n\n> **Important:** It is not yet possible to write a fully functional\n> native widget on Linux, as there are some issues with event handling\n> and focus. This will be addressed in future releases.\n\n##### Native view\n\nNative views on Linux are `GtkPlug`s. A `GtkSocket` is used internally \nto render the view from the process in which it is running. In most\ninstances you will want to embed a `GtkWidget` in a `GtkPlug`.\n\nThe following snippet shows how to bind to `gtk_button_new_with_label`, \nand use it to set the native layer to a suitable gtk plug id:\n\n\t// Bind to various useful functions in libgtk. We need to create a\n\t// GTK plug, and GTK button, add the button to the plug and then\n\t// show them. \n\tforeign handler GTK_PlugNew(in pType as CUInt) returns Pointer \\\n\t\tbinds to \"c:libgtk-x11-2.0.so>gtk_plug_new\"\n\t\t\n\tforeign handler GTK_ButtonNewWithLabel(in pLabel as ZStringNative) returns Pointer binds to \\\n\t\t\"c:libgtk-x11-2.0.so>gtk_button_new_with_label\"\n\t\n\tforeign handler GTK_ContainerAdd(in pContainer as Pointer, in pWidget as Pointer) returns nothing \\\n\t\tbinds to \"c:libgtk-x11-2.0.so>gtk_container_add\"\n\t\t\n\tforeign handler GTK_WidgetShow(in pWidget as Pointer) returns nothing binds to \\\n\t\t\"c:libgtk-x11-2.0.so>gtk_widget_show\"\n\t\t\n\t// The actual native layer will be set to the plug id\n\tforeign handler GTK_PlugGetId(in pPlug as Pointer) returns Pointer \\\n\t\tbinds to \"c:libgtk-x11-2.0.so>gtk_plug_get_id\"\t\t\n\n\t// Store references to both the plug and button\n\tprivate variable mPlug as optional Pointer\n\tprivate variable mNativeView as optional Pointer\n\n\tunsafe handler CreateNativeView() returns Pointer\n\t\t// Create a new default plug\n\t\tput GTK_PlugNew(0) into mPlug\n\n\t\t// Create a button with empty label\n\t\tput GTK_ButtonNewWithLabel(\"\") into mNativeView\n\n\t\t// Add the button to the plug\n\t\tGTK_ContainerAdd(mPlug, mNativeView)\n\n\t\t// Ensure both button and plug are visible\n\t\tGTK_WidgetShow(mNativeView)\n\t\tGTK_WidgetShow(mPlug)\n\t\t\n\t\t// Return the plug window id\n\t\treturn GTK_PlugGetId(mPlug)\n\tend handler\n\t\n\tunsafe handler SetNativeLayer()\n\t\tset my native layer to CreateNativeLayer()\n\tend handler\n\n##### Event handlers\n\nEvent callbacks are pretty simple on Linux, as you can pass a (foreign)\nhandler into `g_signal_connect_data` directly:\n\n\t// Define the callback foreign handler type\n\tpublic foreign handler type ClickCallback(in pWidget as Pointer, in pContext as optional Pointer) returns nothing\n\n\t// Bind to g_signal_connect_data to connect a foreign handler to \n\t// a gtk signal\n\tforeign handler GTK_SignalConnect(in pObj as Pointer, in pEvent as ZStringNative, \\\n\t\tin pHandler as ClickCallback, in pData as optional Pointer, \\\n\t\tin pNotify as optional Pointer, in pFlags as CUInt) returns CULong \\\n\t\tbinds to \"c:libgtk-x11-2.0.so>g_signal_connect_data\"\n\t\n\t// Actual handler that will be called when the button is clicked\n\thandler OnButtonClick(in pWidget as Pointer, in pContext as optional Pointer) returns nothing\n\t\t// The widget object in LiveCode will receive the posted message\n\t\tpost \"mouseUp\"\n\tend handler\n\n\tunsafe handler SignalConnect(in pButtonView as Pointer) returns nothing\n\t// Connect the foreign handler to the clicked signal. All other\n\t// parameters are empty/default\n\tGTK_SignalConnect(pButtonView, \"clicked\", OnButtonClick, \\\n\t\tnothing, nothing, 0)\n\tend handler\n\n##### Hooking up properties\n\nProperties of Linux native views can be set using the GTK Widget API.\nFor example, to hook up the enabled property of a Linux button (called\n_sensitive_ in the GTK API:\n\n\tforeign handler GTK_WidgetSetSensitive(in pWidget as Pointer, in pValue as CBool) returns nothing \\\n\t\tbinds to \"c:libgtk-x11-2.0.so>gtk_widget_set_sensitive\"\n\n\thandler SetEnabled(in pButtonView as Pointer)\n\t\tGTK_WidgetSetSensitive(pButtonView, my enabled)\n\tend handler\n\n#### HTML5\n\n##### Native view\n\nNative views on HTML5 are document elements, which can be created by\nevaluating JavaScript and returning the element.\n\nThe following snippet shows how to evaluate JavaScript using the \n`EvalJavaScript` handler from the emscripten module to create a new\nbutton element, and set the native layer of the widget.\n\n\t// Store the button element pointer\n\tprivate variable mNativeView as optional Pointer\n\t\n\thandler CreateNativeView() returns Pointer\n\t\t// Create an HTML5 button using JavaScript\n\t\tput EvalJavaScript(\"document.createElement('button')\") \\\n\t\t\tinto mNativeView\n\n\t\treturn PointerFromJSObject(mNativeView)\n\tend handler\n\n\thandler SetNativeLayer() returns nothing\n\t\tset my native layer to CreateNativeView()\n\tend handler\n\n##### Event handlers\n\nEvent handlers can be attached to native views again by evaluating \nJavaScript:\n\n\t// Utility function for adding an event listener\n\thandler AddJSEventHandler(in pElement as JSObject, in pEvent as String, in pHandler as JSObject)\n\tEvalJavaScriptWithArguments(\"arguments[0].addEventListener(arguments[1], arguments[2]);\", [pElement, pEvent, pHandler])\n\tend handler\n\n\t// Actual handler that will be called when the button is clicked\n\thandler OnJSClick(pEvent as JSObject) returns nothing\n\t\t// The widget object in LiveCode will receive the posted message\n\t\tpost \"mouseUp\"\n\tend handler\n\t\n\t// Store a reference to the JS handler\n\tprivate variable mOnClickHandler as optional Pointer\n\t\n\thandler AttachEventHandler(in pButtonView as Pointer)\n\t\t// Get a JS function that wraps the LCB callback\n\t\tput HandlerAsJSFunction(OnJSClick) into mOnClickHandler\n\t\t\n\t\t// Add the handler to the button for the click event\n\t\tAddJSEventHandler(pButtonView, \"click\", mOnClickHandler)\t\n\tend handler\n\n##### Hooking up properties\n\nOn HTML5, properties of the native view are manipulated by evaluating\nJavaScript. For example, the enabled of the HTML5 button can be \nimplemented as follows:\n\n\thandler SetEnabled(in pButtonView as JSObject)\n\t\t// Set button enabled using JavaScript\n\t\tEvalJavaScriptWithArguments( \\\n\t\t\t\"arguments[0].disabled=arguments[1];\", \\ \n\t\t\t[pButtonView, not my enabled])\n\tend handler\n\n## The extension package\nThe extension package is a zip file (with extension `.lce`) which, in \naddition to the actual compiled lcb file, contains various other \ncomponents related to the extension: icons, documentation, guides, a \nmanifest, sample stacks, extension resources and native code.\n\nPackages can be uploaded to the extensions store to be shared with other\nusers of LiveCode.\n\n### Documenting Your Extension\n\nExtensions can provide an API (Dictionary) and User Guide as part of the \ninstalled package. They are installed and viewable through the LiveCode \nDictionary stack.\n\n**API (Dictionary)**\n\n![enter image description here](images/extensions-documentation.png)\n\n1. Open the documentation stack from the menubar\n2. API chooser - Choose which API to view. By default, LiveCode 8.0 comes with the LiveCode Script API and the new LiveCode Builder API. Any extension that contains an API is displayed here.\n3. Category Filter - Click on the tags to filter the API entries. \n4. Search Filter - Enter a text string to filter the API entries by a specific search string\n5. History - Move back and forward through your API navigation history\n6. Entry List - Select the entry to display from this list\n7. Entry - The entry describing the syntax\n\n**User Guide**\n\n![enter image description here](images/extensions-guides.jpg)\n\n1. Click on the \"Guide\" tab at the top of the documentation stack\n2. Select the guide you wish to view\n\n#### Adding API Markup\nAny extension can include an API. To do so, either add a file called \n*api.lcdoc* to your widget folder alongside the other widget files or \nmarkup your source code inline.\n\nMarking up your scripts is simple and follows a similar model to other \ndocumentation formats.\n\nConsider the following handler\n\n\tpublic handler myHandler(in pString as String, in pNumber as Number)\n\t   # Code \n\tend handler\n\nTo add an entry to the API for this handler, place a formatted comment \nabove the handler definition:\n\n\t/**\n\tSummary: Use this handler to do an action\n\t\n\tParameters:\n\tpString: This parameter does x\n\tpNumber: This parameter does y\n\t\n\tDescription:\n\t# Markdown Title\n\tHere is a full description in markdown for how this function works.\t\t\n\tOnce again, any GitHub flavoured markdown is accepted.\n\t*/\n\tpublic handler myHandler(in pString as String, in pNumber as Number)\n\t   # Code \n\tend handler\n\nThe LiveCode API parser will combine the comment items with other data \npulled directly from your handler definition such as name, type and some \nparameter details.\n\nFor a full list of acceptable documentation elements please see the \nLiveCode Documentation Format guide.\n\n> **Important:** Documentation is only added to the LiveCode dictionary \n> when an extension is installed in the IDE.\n\n#### Adding a User Guide\nAny extension can include a user guide. To do so, add a markdown file \ncalled *guide.md* to your widget folder alongside the other widget \nfiles.\n\nAll GitHub flavoured markdown is accepted.\n\n### Packaging Extensions\nPackaging extensions is easy. Simply open the \"Extension Builder\" stack:\n\n\tTools > Extension Builder\n\nLoad your ***.lcb*** file and click \"Build Package\". A new file will \nappears in the same directory as your main file with the extension \n***.lce***. This is your final package file ready for upload to the \nextensions portal.\n\n#### Package requirements\nA valid package can be built from a minimum set of files:\n\n\twidget.lcb // Widget source file\n\tsupport/icon.png // 20x40 png image\n\tsupport/icon@extra-high.png // 40x80 png image\n\n## The Extension Store\n\nOnce you have created and packaged your extension you can make it \navailable to the LiveCode Community via the \n[Extension Store](https://livecode.com/products/extensions), in the \n[widgets](https://livecode.com/products/widgets/) section.\n\n### Registering as an Extension Developer\n\nThe first step is to \n[register](https://livecode.com/account/developer/register) as an \nExtension Developer.\n\n- Log in to your LiveCode Account\n- Select the Register option under the Developer section\n\n![enter image description here](images/extensions-developer_id.png)\n\nLiveCode Extensions must have unique identifiers. These identifiers use \nreverse domain notation.\n\nYou can sign up on this page for a LiveCode Community Developer ID. \nHaving a developer ID will allow you to use extension identifiers of the\nform: `community.livecode.developerID.extensionName`.\n\nChoose the Developer ID you want to use here. If your chosen ID is \nalready in use you will be asked to choose a different one.\n\n### Uploading Extensions to the Store\n\nTo upload a packaged extension to the store log in to your LiveCode \naccount and go to the \n[Extensions](https://livecode.com/account/developer/extensions) section \nof the Developer area.\n\nAny extensions you have uploaded will be shown here, and you have the \noption to add new extensions.\n\n- Click the \"Add New Extension\" button (if available)\n- Drag your packaged extension (`.lce`) file into the upload area\n- When the extension has uploaded it will appear in your list\n\n![enter image description here](images/extensions-upload.png)\n\n### Activating your Extension\n\nWhen an extension is first uploaded it is not active so will not show in \nthe Extension Store.\n\nTo activate your extension click \"activate\" under Status. At this stage \nyou will be warned if any information is missing and you can add it by \nclicking the \"Edit\" button.\n\n![enter image description here](images/extensions-activate.png)\n\nOnce your extension is activated its status will change to \"Active\".\n\n### The Extension Store in the Extension Manager\n\nYou can view and downlaod extensions via the Extension Store. To see the \nextensions that are available to download open the Extension Manager \nfrom the LiveCode Tools menu and select the \"Store\" tab.\n\n![enter image description here](images/extensions-store.png)\n\nYou can also download extensions from the [Widget \nStore](https://livecode.com/products/widgets/) on the LiveCode website \nthen install the downloaded extension using the Extension Manager.\n\n## Other ways to extend the Built-in Capabilities\n\nThere are many other ways to extend LiveCode. This section explains how \nto run shell commands, start other applications, read and write to \nprocesses, execute AppleScript, VBScript, send and respond to \nAppleEvents and communicate between multiple LiveCode-based \nprocesses. It also tells you where to get information to create external \ncommands and functions (code written in lower level languages).\n\n### Communicating with other process and applications\n\n#### Reading and writing to the command shell\n\nUse the **shell** function to run shell commands and return the result. \nThe following example displays a directory listing on Mac OS X:\n\n\tanswer shell(\"ls\")\n\nAnd this example stores a directory listing in a variable on Windows:\n\n\tput shell(\"dir\") into tDirectory\n\nOn Windows systems you can prevent a terminal window from being \ndisplayed by setting the **hideConsoleWindows** global property to true.\n\nYou can choose a different shell program by setting the **shellPath** global property. By \ndefault this is set to \"/bin/sh\" on Mac OS X and Linux and \"command.com\" on Windows.\n\n> **Tip:** The shell function blocks LiveCode until it is completed. If \n> you want to run a shell command in the background, write the shell \n> script to a text file then execute it \n> with the `launch`command.\n\n#### Launching other applications\n\nUse the **launch** command to launch other applications, documents or URLs. To launch an \napplication, supply the full path to the application. The following example opens a text \ndocument with TextEdit on OS X:\n\n\tlaunch \"/Users/someuser/Desktop/text document.rtf\" with \"/Applications/TextEdit.app\"\n\n> **Tip:** To get the path to an application, use the `answer file` \n> command to select the application then copy it into your script. Run \n> this in the message box: \n\n\t`answer file \"Select an application\"; put it`\n\nTo open a document with the application it is associated with use the \n**launch document** command.\n\n\tlaunch document \"C:/My document.pdf\"\n\nTo open a URL in the default web browser, use the **launch URL** \ncommand.\n\n\tlaunch URL \"<http://www.livecode.com/>\"\n\nFor more information on launching URLs and details on how to render web \npages within LiveCode, see the Transferring Information guide.\n\n#### Closing another application\n\nUse the **kill process** command to send a signal to another \napplication, to close it or to force it to exit. For more details, see \nthe LiveCode Dictionary.\n\n#### Communicating with other processes\n\nUse the **open process** command to open an application or process you \nwant to read and write data from. You can then read from the process \nwith the **read from process** command and write to it with the **write \nto process** command. To close a process you have opened, use the \n**close process** command. The **openProcesses** returns a list of \nprocesses you have opened and the **openProcessIDs** returns the process \nIDs of each one. For more details see the *LiveCode Dictionary*.\n\n#### Using AppleScript and VBScript (Open Scripting Architecture or \nWindows Scripting Host)\n\nTo execute commands using AppleScript on Mac OS or VBScript on Windows, \nuse the **do as** command. **do as** also allows you to use any other \n*Open Scripting Architecture* languages on Mac OS or languages installed \ninto the *Windows Scripting Host* on Windows. To retrieve a list of the \navailable installed languages, use the **alternateLanguages**.\n\nFor example, to execute an AppleScript that brings the Finder on OS X to \nthe front, enter the following into a field:\n\n*tell application \"Finder\"*\n*activate*\n*end tell*\n\nThen run:\n\n\tdo field 1 as \"appleScript\"\n\nTo retrieve a result from commands executed using `do as`, use `the \nresult` function. Any error message will also be returned in `the \nresult`. The following example displays `the result` of an addition \nperformed using VBScript:\n\n\tdo \"result = 1 + 1\" as \"vbscript\"\n\tanswer the result\n\nFor more information on the do as command, see the LiveCode Dictionary.\n\n#### AppleEvents\n\nTo send an AppleEvent, use the **send to program** command.\n\nIf LiveCode receives an AppleEvent it will send an **appleEvent** \nmessage to the current card. Intercept this message to perform actions \nsuch as handling a request to quit your application or opening a \ndocument. The following example shows how you could handle a request to \nquit:\n\n\ton appleEvent pClass, pID, pSender\n\t\tif pClass & pID is \"aevtquit\" then\n\t\t-- call a function that prompts the user to save changes\n\t\tput checkSaveChanges() into tOkToQuit\n\t\t-- returns false if the user presses \"cancel\"\n\t\tif tOkToQuit is true then quit\n\t\telse exit appleEvent\n\t\tend if\n\tend appleEvent\n\nTo retrive additional information passed with the appleEvent use the \n**request appleEvent data** command. The following example shows how you \ncould handle a request to open a stack:\n\n\ton appleEvent pClass, pID, pSender\n\t\t--appleEvent sent when stack is opened from the finder\n\t\tif pClass & pID is \" aevtodoc \" then\n\t\t\t-- get the file path(s)\n\t\t\trequest AppleEvent data\n\t\t\tput it into tFilesList\n\t\t\trepeat for each line l in tFilesList\n\t\t\t\tgo stack l\n\t\t\tend repeat\n\t\tend if\n\tend appleEvent\n\nFor more details see the *LiveCode Dictionary*.\n\n#### Using Local sockets\n\nIf you want to communicate between local applications a common technique \nthat can be used without code changes on all the platforms LiveCode \nsupports, is to open a local socket and communicate using that. You \nshould choose a port number that is not used by a standard protocol – \ntypically a high number.\n\nThis technique is commonly used when you want to create multiple \nprograms that run independently but communicate with each other. It is a \nviable technique for running background tasks and provides a \nstraightforward way to create an application that behaves as if threaded \n– i.e. with benefits of multiple threads. You can design your \napplication such that additional instances can be launched to perform \nprocessing, data transfer or other intensive activities. Modern OSes \nwill allocate each application to an appropriate processor core. By \nusing socket messaging to communicate with each one you can keep your \nmain application's user interface responsive and display status \ninformation. The following example shows you how to open a socket to the \nlocal machine:\n\n\topen socket to \"127.0.0.1:10000\" with message gotConnection\n\nA detailed discussion of how to create a protocol using sockets can be \nfound in the Transferring Information guide.\n\n> **Tip:** To simplify communication between multiple LiveCode programs, \n> consider writing a simple library that sends and receives a handler \n> name together with parameter data. To call a handler in the other \n> LiveCode program, send the handler name and data to the library. The \n> library will send the data over a socket. In the receiving program \n> intercept the incoming data from the socket and use it to call the \n> appropriate message with the parameter data received.\n\n## Externals – code written in lower level languages\n\nLiveCode provides an external interface which allows you to extend it \nusing a lower level language (often C). For example, if you have \npreexisting code that performs processing in a lower level language, you \ncan write a user interface in LiveCode and then call this library by \nwriting a simple wrapper around it using LiveCode's externals interface. \nLiveCode supports transmitting data to and from externals, as well as \ndrawing into image objects within LiveCode windows, manipulating the \nplayer object, and more.\n\n> **Important:** Much of what is provided by the externals API is now \n> supported by the foreign function interface in LiveCode Builder, \n> where it is not necessary to write any glue code in C. Whilst the \n> externals interface is still supported, LCB is now the recommended way \n> to wrap native code for LiveCode.\n\n> **Note:** Some aspects of the built in functionality are supplied in \n> the form of externals. These include the SSL library, the database \n> library, the revBrowser library, zip library and XML libraries. These \n> libraries can be included in a standalone application, or excluded if \n> they are not needed – saving disk space.\n\n### The Externals SDK\n\nOccasionally LiveCode Builder may not be what you need to create your extension. We provide a legacy developer kit for writing externals in C++ which includes documentation and examples. \n\nThe following newsletter articles will help you get started:\n\n* [External Writing for the Uninitiated – Part 1](http://newsletters.livecode.com/november/issue13/newsletter5.php)\n\n* [External Writing for the Uninitiated – Part 2](http://newsletters.livecode.com/november/issue14/newsletter3.php)\n\n* [Writing Externals for Linux with 2.9 or later](http://newsletters.livecode.com/october/issue34/newsletter1.php)"
	},	{
	"name":"livecode_builder_bytecode_reference",
	"display name":"LiveCode Builder Bytecode Reference",
	"location":"ide",
	"group":"Reference",
	"data":"\n# LiveCode Builder Bytecode Reference\n\n## Introduction\n\nThe LiveCode Builder Virtual Machine is a infinite register machine with a\nhigh-level and verifiable bytecode.\n\nAll bytecode runs in the context of a module instance with executing handlers\nforming a stack of activation frames. Each frame contains an array of registers,\nthe first part of which are parameters followed by handler-local variables and\nbytecode block registers.\n\nMost bytecode operations operate directly on registers, access to module level\ndefinitions (handlers, constants, variables) are indirected through the fetch\nand store operations.\n\nEach bytecode operation has an address which can be jumped to using the jump\noperations.\n\n## Operations\n\n### Jump\n\n    jump <label>\n\nThe jump operation sets the address of the next instruction to execute to\nthat identified by <label>.\n\n### Jump If False\n\n    jump_if_false <register>, <label>\n\nThe jump_if_true operation checks the value in <register> and jumps to <label>\nif it is 'false'.\n\nIf is a runtime error if <register> does not contain a boolean.\n\n### Jump If True\n\n    jump_if_true <register>, <label>\n\nThe jump_if_true operation checks the value in <register> and jumps to <label>\nif it is 'true'.\n\nIf is a runtime error if <register> does not contain a boolean.\n\n### Assign Constant\n\n    assign_constant <register>, <constant>\n\nThe assign_constant operation copies <constant> into <register>. Here <constant>\ncan be the nothing literal, the true or false literal, an integer literal, a\nreal literal, a string literal, a list literal or array literal.\n\nIf <register> is typed then it is a runtime error if the type of <constant>\ndoes not conform to that type.\n\n### Assign\n\n    assign <dst-register>, <src-register>\n\nThe assign operation copies the value in <src-register> to <dst-register>.\n\nIf <dst-register> is typed then it is runtime error if the type of the value\nin <src-register> does not conform to that type.\n\n### Return\n\n    return [ <result-reg> ]\n\nThe return operation exits the current handler, returning to the instruction after\nthe invoke operation which created it. If present, the value in <result-reg> is\ncopied as the return value. If not present then the return value will be 'nothing'.\nAdditionally any values in out or inout parameters are copied back to the caller.\n\nIf <result-reg> is not present, then the return value will be 'nothing'.\n\nIt is a runtime error if the type of the return value does not conform to the\nreturn type of the current handler's signature.\n\nIt is a runtime error if any out or inout parameters are unassigned at the point\nof return.\n\n### Invoke\n\n    invoke <handler>, <result-reg>, <arg1-reg>, ..., <argn-reg>\n\nThe invoke operation creates a new frame copying values from the argument registers\nfor any in or inout parameters. It then starts executing the bytecode attached\nto <handler>, a definition. The return value is placed into the register <result-reg>.\n\nIf is a runtime error if the number of arguments provided is different from the\nsignature of <handler>\n\nIf it a runtime error if for in and inout parameters, the contents of <arg_i>\ndoes not conform to the type of the parameter required by the signature.\n\n### Invoke Indirect\n\n    invoke <handler-reg>, <result-reg>, <arg1-reg>, ..., <argn-reg>\n\nThe invoke indirect operation functions identically to the invoke operation\nexcept that it calls the handler in <handler-reg>.\n\nIt is a runtime error if <handler-reg> does not contain a handler value.\n\n### Fetch\n\n    fetch <dst-register>, <definition>\n\nThe fetch operation copies the value of <definition> into <dst-register>. The\n<definition> may be a variable, constant or handler. In the case of a handler,\na handler value is created.\n\nIt is a runtime error if the type of the value of <definition> does not conform\nto the type of <dst-register>.\n\n### Store\n\n    store <src-register>, <definition>\n\nThe store operation copies the contents of <src-register> into <definition>. The\n<definition> must be a module level variable.\n\nIt is a runtime error if the type of the value in <src-register> does not conform\nto the type of <definition>.\n\n### Assign List\n\n    assign_list <dst-reg>, <element1-reg>, ..., <elementn-reg>\n\nThe assign_list operation builds a list value from <element1-reg> up to\n<elementn-reg>.\n\nIt is a runtime error if the type of <dst-reg> does not conform to list.\n\n### Assign Array\n\n    assign_array <dst-reg>, <key1-reg>, <value1-reg>, ..., <keyn-reg>, <valuen-reg>\n\nThe assign_array operation builds an array value from each key value pair\n<key1-reg>, <value1-reg> up to <keyn-reg>, <valuen-reg>.\n\nIt is a runtime error if the type of <dst-reg> does not conform to array.\n\n### Reset\n\n    reset <reg>\n\nThe reset operation performs default initialization of <reg>. If the type of\n<reg> has no default value, it reverts to unassigned."
	},	{
	"name":"livecode_builder_language_reference",
	"display name":"LiveCode Builder Language Reference",
	"location":"ide",
	"group":"Reference",
	"data":"\n# LiveCode Builder Language Reference\n\n## Introduction\nLiveCode Builder is a variant of the current LiveCode scripting language\n(LiveCode Script) which has been designed for 'systems' building. It is\nstatically compiled with optional static typing and direct foreign code\ninterconnect (allowing easy access to APIs written in other languages).\n\nUnlike most languages, LiveCode Builder has been designed around the\nidea of extensible syntax. Indeed, the core language is very small -\ncomprising declarations and control structures - with the majority of\nthe language syntax and functionality being defined in modules.\n\n> **Note:** It is an eventual aim that control structures will also be\n> extensible, however this is not the case in the current incarnation).\n\nThe syntax will be familiar to anyone familiar with LiveCode Script,\nhowever LiveCode Builder is a great deal more strict - the reason being\nit is intended that it will eventually be compilable to machine code\nwith the performance and efficiency you'd expect from any 'traditional'\nprogramming language. Indeed, over time we hope to move the majority of\nimplementation of the whole LiveCode system over to being written in\nLiveCode Builder.\n\n> **Note:** One of the principal differences is that type conversion is\n> strict - there is no automatic conversion between different types such\n> as between number and string. Such conversion must be explicitly\n> specified using syntax (currently this is using things like\n> *... parsed as number* and *... formatted as string*.\n\n## Tokens\n\nThe structure of tokens is similar to LiveCode Script, but again a\nlittle stricter. The regular expressions describing the tokens are as\nfollows:\n\n - **Identifier**: [A-Za-z_][A-Za-z0-9_.]*\n - **Integer**: [0-9]+\n - **Binary Integer**: 0b[01]+\n - **Hexadecimal Integer**: 0x[0-9a-fA-F]+\n - **Real**: [0-9]+\".\"[0-9]+([eE][-+]?[0-9]+)?\n - **String**: \"[^\\n\\r\"]*\"\n - **Separator**: Any whitespace containing at least one newline\n\nStrings use backslash ('\\') as an escape - the following are understood:\n\n - **\\n**: LF (ASCII 10)\n - **\\r**: CR (ASCII 13)\n - **\\t**: TAB (ASCII 9)\n - **\\q**: quote '\"'\n - **\\u{X...X}: character with unicode codepoint U+X...X - any number of nibbles may be specified, but any values greater than 0x10FFFF will be replaced by U+FFFD.\n - **\\\\**: backslash '\\'\n\n> **Note:** The presence of '.' in identifiers are used as a namespace\n> scope delimiter.\n\n> **Note:** Source files are presumed to be in UTF-8 encoding.\n\n## Comments\n\nLiveCode Builder supports single line comments, which begin with `//`\nor `--` and extend to the end of the line.  There are also block\ncomments, which begin with `/*` and end with `*/`, and can span\nmultiple lines.\n\n- **Single-line comment**: (--|//)[^\\n\\r]*\n- **Block comment**: /\\*([^*](\\*[^/])?)*\\*/\n\n> **Note:** A block comment that spans multiple lines terminates the\n> line of code that it begins on.\n\n## Line continuation\n\nA LiveCode builder statement or declaration can be continued onto\nmultiple lines of code by placing the line continuation character `\\`\nat the end each line.\n\n- **Line continuation**: \\\\[\\t ]*(\\n|\\r\\n|\\r)\n\n> **Note:** Tab and space characters are allowed after the `\\` and before the\n> newline, but no other characters.\n\n> **Note:** A line continuation cannot occur within a comment.\n\n### Case-Sensitivity\n\nAt the moment, due to the nature of the parser being used, keywords are\nall case-sensitive and reserved. The result of this is that, using all\nlower-case identifiers for names of definitions should be avoided.\nHowever, identifiers *are* case-insensitive - so a variable with name\npFoo can also be referenced as PFOO, PfOO, pfoO etc.\n\n> **Aside:** The current parser and syntax rules for LiveCode Builder\n> are constructed at build-time of the LiveCode Builder compiler and\n> uses *bison* (a standard parser generator tool) to build the parser.\n> Unfortunately, this means that any keywords have to be reserved as the\n> parser cannot distinguish the use of an identifier in context (whether\n> it is a keyword at a particular point, or a name of a definition).\n\nIt is highly recommended that the following naming conventions be used\nfor identifiers:\n\n - **tVar** - for local variables\n - **pVar** - for in parameterns\n - **rVar** - for out parameters\n - **xVar** - for inout parameters\n - **mVar** - for global variables in widgets\n - **sVar** - for global variables in libraries\n - **kConstant** - for constants\n - Use identifiers starting with an uppercase letter for handler and type names.\n\nBy following this convention, there will not be any ambiguity between\nidentifiers and keywords. (All keywords are all lower-case).\n\n> **Note:** When we have a better parsing technology we will be\n> evaluating whether to make keywords case-insensitive as well. At the\n> very least, at that point, we expect to be able to make all keywords\n> unreserved.\n\n## Typing\n\nLiveCode Builder is a typed language, although typing is completely\noptional in most places (the only exception being in foreign handler\ndeclarations). If a type annotation is not specified it is simply taken\nto be the most general type *optional any* (meaning any value, including\nnothing).\n\nThe range of core types is relatively small, comprising the following:\n\n - **nothing**: the single value *nothing*\n - **Boolean**: one of *true* or *false*\n - **Integer**: any integral numeric value (size limitations apply)\n - **Real**: any numeric value (size and accuracy limitations apply)\n - **Number**: any integer or real value\n - **String**: a sequence of UTF-16 code units\n - **Data**: a sequence of bytes\n - **List**: a sequence of any values\n - **Array**: a mapping from strings to values\n - **any**: a value of any type\n\nAdditionally, all types can be annotated with **optional**. An optional\nannotation means the value may be the original type or nothing.\n\n> **Note:** The current compiler does not do type-checking; all\n> type-checking happens at runtime. However, this is being worked on so\n> there will soon be a compiler which will give you type errors at\n> compile-time.\n\n## Modules\n\n    Module\n        : 'module' <Name: Identifier> SEPARATOR\n            { ( Definition | Metadata | Import ) SEPARATOR }\n          'end' 'module'\n\nThe smallest compilable unit of LiveCode Builder is the module. Each\nmodule is uniquely named using reverse DNS notation, and the names of\nmodules are considered to live in a global namespace.\n\nA module is a collection of public and private definitions, including\nconstants, variables, types and handlers.\n\nA module may depend on another module through import. An imported\nmodules public definitions become accessible to the importing module.\n\n> **Note:** For integration with the existing LiveCode system, there are\n> two module variants which may be used. Widgets (use 'widget' instead\n> of 'module') and Libraries (use 'library' instead of 'module'). A\n> widget appears in LiveCode as a control, whilst a library adds all its\n> public handlers to the bottom of the message path.\n\n## Metadata\n\n    Metadata\n        : 'metadata' <Name: Identifier> 'is' <Value: String>\n\nThe metadata clauses allow a set of key-values to be encoded in the\ncompiled module. These are not used in compilation or execution, but may\nbe used by the system loading and using the module.\n\nAt the moment, the following keys are understood:\n\n - title: a human-readable name for the module\n - description: a simple description of the module's purpose\n - version: a string in the form X.Y.Z (with X, Y and Z integers) describing the modules version\n - author: the name of the author of the module\n - os: the operating systems where the module can be used\n - platforms: the platforms where the module can be used\n\n> **Note:** The current metadata mechanism is unlikely to remain part of\n> the language. It is intended that it will be replaced by a package\n> description file, which will allow modules to be grouped together with\n> other resources.\n\n## Imports\n\n    Import\n        : 'use' <Name: Identifier>\n\nThe use clauses allow a module to refer to another module by importing\nall the target module's public definitions into its namespace.\n\nThe name of the module specified must be its full name, e.g.\ncom.livecode.canvas.\n\nA module may use any other module, as long as doing so does not cause a\ncycle in the dependency graph.\n\n> **Note:** The current IDE and extension installation system does not\n> yet implement arbitrary dependencies - the only dependencies it\n> understands are those which are builtin to the system (e.g.\n> com.livecode.canvas). However, you can still write and test out\n> modules with dependencies locally - they just cannot be uploaded to\n> the extensions portal.\n\n## Definitions\n\n    Definition\n      : ( 'public' | 'private' ) ConstantDefinition\n      | ( 'public' | 'private' ) TypeDefinition\n      | ( 'public' | 'private' ) HandlerTypeDefinition\n      | ( 'public' | 'private' ) VariableDefinition\n      | ( 'public' | 'private' ) HandlerDefinition\n      | ( 'public' | 'private' ) ForeignHandlerDefinition\n      | PropertyDefinition\n      | EventDefinition\n\nDefinitions are what are used to define usable entities in the language.\nAll definitions are named using a unique identifier (so you cannot have\ntwo definitions with the same name).\n\nDefinitions can be either *public* or *private* (the default is private\n- so there is no need to explicitly specify that). Public definitions\nare available when the module is used by another module whereas private\ndefinitions can only be used within the module.\n\n> **Note**: Properties and events are, by their nature, always public as\n> they define things which only make sense to access from outside.\n>\n> **Note**: When writing a library module, all public handlers are added\n> to bottom of the message path in LiveCode Script.\n\n### Constants\n\n    ConstantDefinition\n      : 'constant' <Name: Identifier> is <Value: Expression>\n\nA constant definition defines a named constant. The value can be any\nexpression which depends on only on constant values to evaluate.\n\n### Types\n\n    TypeDefinition\n      : 'type' <Name: Identifier> 'is' <TypeOf: Type>\n\nA type definition defines an alias, it names the given type with the\ngiven Name, allowing the name to be used instead of the type.\n\n    Type\n      : <Name: Identifier>\n      | 'optional' <Target: Type>\n      | 'any'\n      | 'nothing'\n      | 'Boolean'\n      | 'Integer'\n      | 'Real'\n      | 'Number'\n      | 'String'\n      | 'Data'\n      | 'Array'\n      | 'List'\n      | 'Pointer'\n\nA type clause describes the kind of value which can be used in a\nvariable or parameter.\n\nIf a type is an identifier, then this is taken to be a named type\ndefined in a type definition clause.\n\nAn optional type means the value can be either the specified type or\nnothing. Variables which are of optional type are automatically initial\nzed to nothing.\n\nThe remaining types are as follows:\n\n - **any**: any value\n - **Boolean**: a boolean value, either the value *true* or *false*.\n - **Integer**: any integer number value\n - **Real**: any real number value\n - **Number**: any number value\n - **String**: a sequence of UTF-16 code units\n - **Data**: a sequence of bytes\n - **Array**: a map from string to any value (i.e. an associative array, just like in LiveCode Script)\n - **List**: a sequence of any value\n - **nothing**: a single value *nothing* (this is used to describe handlers with no return value - i.e. void)\n - **Pointer**: a low-level pointer (this is used with foreign code interconnect and shouldn't be generally used).\n\n> **Note:** *Integer* and *Real* are currently the same as *Number*.\n\n> **Note:** In a subsequent update you will be able to specify lists and\n> arrays of fixed types. For example, *List of String*.\n\n> **Note:** In a subsequent update you will be able to define record\n> types (named collections of values - like structs in C) and handler\n> types (allowing dynamic handler calls through a variable - like\n> function pointers in C).\n\n### Handler Types\n\n    HandlerTypeDefinition\n      : [ 'foreign' ] 'handler' 'type' <Name: Identifier> '(' [ ParameterList ] ')' [ 'returns' <ReturnType: Type> ]\n\nA handler type definition defines a type which can hold a handler.\nVariables of such types can hold handlers (just like function pointers\nin C) which allows them to be called dynamically.\n\nIf the handler type is defined as foreign then automatic bridging to a C\nfunction pointer will occur when the type appears as the type of a\nparameter in a foreign handler definition.\n\n> **Note:** Passing an LCB handler to a foreign function requires\n> creation of a function pointer. The lifetime of the function pointer\n> is the same as the widget or module which created it.\n\n### Record Types\n\n    RecordTypeDefinition\n      : 'record' 'type' <Name: Identifier> SEPARATOR\n        { RecordTypeFieldDefinition }\n        'end' 'record'\n\n    RecordTypeFieldDefinition\n      : <Name: Identifier> [ 'as' <TypeOf: Type> ]\n\nA record type definition defines a type that consists of 0 or more\nnamed fields, each with its own optional type.\n\n### Variables\n\n    VariableDefinition\n      : 'variable' <Name: Identifier> [ 'as' <TypeOf: Type> ]\n\nA variable definition defines a module-scope variable. In a widget\nmodule, such variables are per-widget (i.e. instance variables). In a\nlibrary module, there is only a single instance (i.e. a private global\nvariable).\n\nThe type specification for the variable is optional, if it is not\nspecified the type of the variable is *optional any* meaning that it can\nhold any value, including being nothing.\n\nVariables whose type has a default value are initialized to that value at the\npoint of definition. The default values for the standard types are:\n\n- **optional**: nothing\n- **Boolean**: false\n- **Integer**: 0\n- **Real**: 0.0\n- **Number**: 0\n- **String**: the empty string\n- **Data**: the empty data\n- **Array**: the empty array\n- **List**: the empty list\n- **nothing**: nothing\n\nVariables whose type do not have a default value will remain unassigned and it\nis a checked runtime error to fetch from such variables until they are assigned\na value.\n\n### Handlers\n\n    HandlerDefinition\n      : [ 'unsafe' ] 'handler' <Name: Identifier> '(' [ ParameterList ] ')' [ 'returns' <ReturnType: Type> ] SEPARATOR\n          { Statement }\n        'end' 'handler'\n\nHandler definitions are used to define functions which can be called\nfrom LiveCode Builder code, invoked as a result of events triggering in\na widget module, or called from LiveCode Script if public and inside a\nlibrary module.\n\nThere is no distinction between handlers which return a value and ones\nwhich do not, apart from the return type. Handlers can be called either\nin expression context, or in statement context. If a handler which\nreturns no value (it is specified as *returns nothing*) is called in\nexpression context then its value is *nothing*.\n\n\tParameterList\n\t  : { Parameter , ',' }\n\n    Parameter\n      : ( 'in' | 'out' | 'inout' ) <Name: Identifier> [ 'as' <ParamType: Type>\n\nThe parameter list describes the parameters which can be passed to the\nhandler. Handlers must be called with the correct number of parameters,\nusing expressions which are appropriate to the mode.\n\nAn in parameter means that the value from the caller is copied to the\nparameter variable in the callee handler.\n\nAn out parameter means that no value is copied from the caller, and the\nvalue on exit of the callee handler is copied back to the caller on\nreturn.\n\n> **Note:** It is a checked runtime error to return from a handler\n> without ensuring all non-optional 'out' parameters have been assigned\n> a value. However, this will only occur for typed variables whose type does\n> not have a default value as those which do will be default initialized at the\n> start of the handler.\n\nAn inout parameter means that the value from the caller is copied to the\nparameter variable in the callee handler on entry, and copied back out\nagain on exit.\n\nThe type of parameter is optional, if no type is specified it is taken\nto be *optional any* meaning it can be of any type.\n\n> **Note:** Only assignable expressions can be passed as arguments to\n> inout or out parameters. It is a checked compile-time error to pass a\n> non-assignable expression to such a parameter.\n\nIf 'unsafe' is specified for the handler, then the handler itself is considered\nto be unsafe, and may only be called from other unsafe handlers or unsafe\nstatement blocks.\n\n### Foreign Handlers\n\n    ForeignHandlerDefinition\n      : 'foreign' 'handler' <Name: Identifier> '(' [ ParameterList ] ')' [ 'returns' <ReturnType: Type> ) ] 'binds' 'to' <Binding: String>\n\nA foreign handler definition binds an identifier to a handler defined in\nforeign code.\n\nThe last parameter in a foreign handler declaration may be '...' to indicate\nthat the handler is variadic. This allows binding to C functions such as\nsprintf.\n\nNote: No bridging of types will occur when passing a parameter in the non-fixed\nsection of a variadic argument list. You must ensure the arguments you pass there\nare of the appropriate foreign type (e.g. CInt, CDouble).\n\nThere are a number of types defined in the foreign, java and objc modules which\nmap to the appropriate foreign type when used in foreign handler signatures.\n\nThere are the standard machine types (defined in the foreign module):\n\n - Bool maps to an 8-bit boolean\n - Int8/SInt8 and UInt8 map to 8-bit integers\n - Int16/SInt16 and UInt16 map to 16-bit integers\n - Int32/SInt32 and UInt32 map to 32-bit integers\n - Int64/SInt64 and UInt64 map to 64-bit integers\n - IntSize/SIntSize and UIntSize map to the integer size needed to hold a memory size\n - IntPtr/SIntPtr and UIntPtr map to the integer size needed to hold a pointer\n - NaturalSInt and NaturalUInt map to 32-bit integers on 32-bit processors and\n   64-bit integers on 64-bit processors\n - NaturalFloat maps to the 32-bit float type on 32-bit processors and the 64-bit\n   float (double) type on 64-bit processors\n\nThere are the standard C primitive types (defined in the foreign module)\n\n - CBool maps to 'bool'\n - CChar, CSChar and CUChar map to 'char', 'signed char' and 'unsigned char'\n - CShort/CSShort and CUShort map to 'signed short' and 'unsigned short'\n - CInt/CSInt and CUInt map to 'signed int' and 'unsigned int'\n - CLong/CSLong and CULong map to 'signed long' and 'unsigned long'\n - CLongLong/CSLongLong and CULongLong map to 'signed long long' and 'unsigned long long'\n - CFloat maps to 'float'\n - CDouble maps to 'double'\n\nThere are types specific to Obj-C types (defined in the objc module):\n\n  - ObjcObject wraps an obj-c 'id', i.e. a pointer to an objective-c object\n  - ObjcId maps to 'id'\n  - ObjcRetainedId maps to 'id', and should be used where a foreign handler\n    argument expects a +1 reference count, or where a foreign handler returns\n    an id with a +1 reference count.\n\nNote: When an ObjcId is converted to ObjcObject, the id is retained;\nwhen an ObjcObject converted to an ObjcId, the id is not retained. Conversely,\nwhen an ObjcRetainedId is converted to an ObjcObject, the object takes the\n+1 reference count (so does not retain); when an ObjcObject is put into an\nObjcRetainedId, a +1 reference count is taken (so does retain).\n\nThere are aliases for the Java primitive types (defined in the java module)\n\n - JBoolean maps to Bool\n - JByte maps to Int8\n - JShort maps to Int16\n - JInt maps to Int32\n - JLong maps to Int64\n - JFloat maps to Float32\n - JDouble maps to Float64\n\nAll the primitive types above will implicitly bridge between corresponding\nhigh level types:\n\n  - CBool and Bool bridge to and from Boolean\n  - All integer and real types bridge to and from Number\n\nOther LCB types pass as follows into foreign handlers:\n\n - any type passes an MCValueRef\n - nothing type passes as the null pointer\n - Boolean type passes an MCBooleanRef\n - Integer type passes an MCNumberRef\n - Real type passes an MCNumberRef\n - Number type passes an MCNumberRef\n - String type passes an MCStringRef\n - Data type passes an MCDataRef\n - Array type passes an MCArrayRef\n - List type passes an MCProperListRef\n\nFinally, the Pointer type passes as void * to foreign handlers. If you want\na pointer which can be null, then use optional Pointer - LCB will throw an\nerror if there is an attempt to map from the null pointer value to a slot\nwith a non-optional Pointer type.\n\nModes map as follows:\n\n - in mode is just pass by value\n - out mode passes a pointer to a variable of one of the above types, the variable is uninitialized on entry\n - inout mode passes a pointer to a variable of one of the above types, the variable is initialized to a value on entry\n\nIf the return type is of a Ref type, then it must be a copy.\n\nIf an out parameter is of a Ref type, then it must be a copy (on exit)\n\nIf an inout parameter is of a Ref type, then its existing value must be\nreleased, and replaced by a copy (on exit).\n\nThe binding string for foreign handlers is language-specific and currently\nsupported forms are explained in the following sections.\n\nForeign handlers' bound symbols are resolved on first use and an error\nis thrown if the symbol cannot be found.\n\nForeign handlers are always considered unsafe, and thus may only be called\nfrom unsafe context - i.e. from within an unsafe handler, or unsafe statement\nblock.\n\n#### The C binding string\n\nThe C binding string has the following form:\n\n    \"c:[library>][class.]function[!calling][?thread]\"\n\nHere *library* specifies the name of the library to bind to (if no\nlibrary is specified a symbol from the engine executable is assumed).\n\nHere *class* is currently unused.\n\nHere *function* specifies the name of the function symbol to bind to (on\nWindows, the symbol must be unadorned, and so exported from the library\nby listing it in a DEF module).\n\nHere *calling* specifies the calling convention which can be one of:\n\n - `default`\n - `stdcall`\n - `thiscall`\n - `fastcall`\n - `cdecl`\n - `pascal`\n - `register`\n\nAll but `default` are Win32-only, and on Win32 `default` maps to\n`cdecl`. If a Win32-only calling convention is specified on a\nnon-Windows platform then it is taken to be `default`.\n\nHere *thread* is either empty or `ui`. The `ui` form is used to determine\nwhether the method should be run on the UI thread (currently only applicable\non Android and iOS).\n\n#### The Obj-C binding string\n\nThe Obj-C binding string has the following form:\n\n    \"objc:[library>][class.](+|-)method[?thread]\"\n\nHere *library* specifies the name of the library or framework to bind to (if no\nlibrary is specified a symbol from the engine executable or a library it is\nlinked to is assumed).\n\nHere *class* specifies the name of the class containing the method to\nbind to. If the method is an instance method, the class can be omitted,\ncreating a 'dynamic binding', i.e. just resolving the selector.\n\nHere *method* specifies the method name to bind to in standard Obj-C selector\nform, e.g. addTarget:action:forControlEvents:. If the method is a class method\nthen prefix it with '+', if it is an instance method then prefix it with '-'.\n\nHere *thread* is either empty or `ui`. The `ui` form is used to determine\nwhether the method should be run on the UI thread (currently only applicable\non Android and iOS).\n\n#### The Java binding string\n\nThe Java binding string has the following form:\n\n    \"java:[className>][functionType.]function[!calling][?thread]\"\n\nHere *className* is the qualified name of the Java class to bind to.\n\nHere *functionType* is either empty, or `get` or `set`, which are \ncurrently used for getting and setting member fields of a Java class.\n\nFor example\n\n\t\"java:java.util.Calendar>set.time(J)\"\n\t\"java:java.util.Calendar>get.time()J\"\n\nare binding strings for setting and getting the `time` field of a \nCalendar object.\n\nHere *function* specifies the name of the method or field to bind to. The\nfunction `new` may be used to call a class constructor. *function* also\nincludes the specification of function signature, according to the \n[standard rules for forming these](http://journals.ecs.soton.ac.uk/java/tutorial/native1.1/implementing/method.html) \nwhen calling the JNI.\n\nThe function `interface` may be used on Android to create an interface \nproxy - that is an instance of a generic Proxy class for a given \ninterface. This effectively allows LCB handlers to be registered as the \ntargets for java interface callbacks, such as event listeners.\n\nThe foreign handler binding to such a function takes a value that should \neither be a `Handler` or an `Array` - if it is a `Handler`, the specified \nlistener should only have one available callback. If the listener has \nmultiple callbacks, an array can be used to assign handlers to each. Each \nkey in the array must match the name of a callback in the listener. The \nspecified handlers must match the callback's parameters and return type, \nusing JObject where primitive type parameters are used.\n\nOverloaded methods in the interface are not currently supported.\n\nFor example:\n\n\thandler type ClickCallback(in pView as JObject) returns nothing\n\n\tforeign handler _JNI_OnClickListener(in pHandler as ClickCallback) returns JObject binds to \"java:android.view.View$OnClickListener>interface()\"\n\n\tforeign handler _JNI_SetOnClickListener(in pButton as JObject, in pListener as JObject) returns nothing binds to \"java:android.view.View>setOnClickListener(Landroid/view/View$OnClickListener;)V\"\t\n\t\n\tpublic handler ButtonClicked(in pView as JObject) returns nothing\n\t\tpost \"buttonClicked\"\n\t\tMCEngineRunloopBreakWait()\n\tend handler\n\t\n\tpublic handler SetOnClickListenerCallback(in pButton as JObject)\n\t\tunsafe\n\t\t\tvariable tListener as JObject\n\t\t\tput _JNI_OnClickListener(ButtonClicked) into tListener\n\t\t\t_JNI_SetOnClickListener(pButton, tListener)\n\t\tend unsafe\n\tend handler\n\t\nor\n\n\thandler type MouseEventCallback(in pMouseEvent as JObject) returns nothing\n\n\tforeign handler _JNI_MouseListener(in pCallbacks as Array) returns JObject binds to \"java:java.awt.event.MouseListener>interface()\"\n\n\tforeign handler _JNI_SetMouseListener(in pJButton as JObject, in pListener as JObject) returns nothing binds to \"java:java.awt.Component>addMouseListener(Ljava/awt/event/MouseListener;)V\"\t\n\t\n\tpublic handler MouseEntered(in pEvent as JObject) returns nothing\n\t\tpost \"mouseEnter\"\n\t\tMCEngineRunloopBreakWait()\n\tend handler\n\t\n\tpublic handler MouseExited(in pEvent as JObject)\n\t\t-- do something on mouse entter\n\tend handler\n\t\n\tpublic handler SetMouseListenerCallbacks(in pJButton as JObject)\n\t\tvariable tArray as Array\n\t\tput MouseEntered into tArray[\"mouseEntered\"]\n\t\tput MouseExited into tArray[\"mouseExited\"]\n\t\tunsafe\n\t\t\tvariable tListener as JObject\n\t\t\tput _JNI_MouseListener(tArray) into tListener\n\t\t\t_JNI_SetMouseListener(pJButton, tListener)\n\t\tend unsafe\n\tend handler\n\n>*Important:* On Android, interface callbacks are *always* run on the\n> engine thread. This means JNI local references from other threads\n> (in particular the UI thread) are unavailable. Therefore it is not \n> advised to do anything using the JNI in interface callbacks. \n\nHere *calling* specifies the calling convention which can be one of:\n\n - `instance`\n - `static`\n - `nonvirtual`\n\nInstance and nonvirtual calling conventions require instances of the given\nJava class, so the foreign handler declaration will always require a Java\nobject parameter.\n\nHere, *thread* is either empty or `ui`. The `ui` form is used to determine\nwhether the method should be run on the UI thread (currently only applicable\non Android and iOS).\n\n> **Warning:** At the moment it is not advised to use callbacks that may be\n> executed on arbitrary threads, as this is likely to cause your application\n> to crash.\n\n### Properties\n\n    PropertyDefinition\n      : 'property' <Name: Identifier> 'get' <Getter: Identifier> [ 'set' <Setter: Identifier> ]\n\nProperty definitions can only appear in widget modules. They define a\nproperty which can be accessed from LiveCode Script in the usual way\n(e.g. *the myProperty of widget 1*).\n\nBoth getter and setter clauses can use either a variable or handler\nidentifier. If a variable identifier is used, then the property value is\nfetched (and stored) from that variable. If a handler identifier is used\nthen a handler is called instead.\n\nA getter handler must take no arguments and return a value. A setter\nhandler must take a single argument and return no value.\n\nThe set clause is optional. If it is not present then the property is\nread-only.\n\n### Events\n\n    EventDefinition\n      : 'event' <Name: Identifier> '(' [ ParameterList ] ')' [ 'as' <ReturnType: Type> ]\n\nEvent definitions define a callable handler which calls back to the\nenvironment.\n\n> **Note**: Whilst events can be defined they currently cannot be used.\n> To send a message to the LiveCode Script environment use the\n> *dispatch* command which allows sending messages to arbitrary LiveCode\n> Script objects.\n\n## Statements\n\n    Statement\n      : VariableStatement\n      | IfStatement\n      | RepeatStatement\n      | ThrowStatement\n      | ReturnStatement\n      | PutStatement\n      | SetStatement\n      | GetStatement\n      | CallStatement\n      | BytecodeStatement\n      | UnsafeStatement\n\nThere are a number of built-in statements which define control flow,\nvariables, and basic variable transfer. The remaining syntax for\nstatement is defined in auxiliary modules.\n\n### Variable Statements\n\n    VariableStatement\n      : 'variable' <Name: Identifier> [ 'as' <TypeOf: Type> ]\n\nA variable statement defines a handler-scope variable. Such variables\ncan be used after the variable statement and up to the end of the current statement\nblock, but not before.\n\nVariables whose type have a default value are initialized with that value at\nthe point of definition in the handler. See the main Variables section for the\ndefaults of the standard types.\n\n> **Note:** It is a checked runtime error to attempt to use a variable whose\n> type has no default before it is assigned a value.\n\nThe type specification for the variable is optional, if it is not\nspecified the type of the variable is *optional any* meaning that it can\nhold any value, including being nothing.\n\n### If Statements\n\n    IfStatement\n      : 'if' <Condition: Expression> 'then' SEPARATOR\n          { Statement }\n        [ { 'else' 'if' <Condition: Expression> 'then' SEPARATOR\n            { Statement } ]\n        [ 'else' SEPARATOR\n            { Statement } ]\n        'end' 'if'\n\nThe if statement enables conditional execution based on the result of an\nexpression which evaluates to a boolean.\n\nEach block of code in an if/else if/else statement defines a unique scope for\nhandler-local variable definitions.\n\n> **Note:** It is a checked runtime error to use an expression which\n> does not evaluate to a boolean in any condition expression.\n\n### Repeat Statements\n\n    RepeatStatement\n      : RepeatHeader SEPARATOR\n          { Statement }\n        'end' 'repeat'\n      | 'next' 'repeat'\n      | 'exit' 'repeat'\n\n    RepeatHeader\n      : 'repeat' 'forever'\n      | 'repeat' <Count: Expression> 'times'\n      | 'repeat' 'while' <Condition: Expression>\n      | 'repeat' 'until' <Condition: Expression>\n      | 'repeat' 'with' <Counter: Identifier> 'from' <Start: Expression> ( 'up' | 'down' ) 'to' <Finish: Expression> [ 'by' <Step: Expression> ]\n      | 'repeat' 'for' 'each' <Iterator> 'in' <Container: Expression>\n\nThe repeat statements allow iterative execute of a sequence of\nstatements.\n\nThe block of code present in a repeat statement defines a unique scope for\nhandler-local variable definitions.\n\nThe **repeat forever** form repeats the body continually. To exit the\nloop, either an error must be thrown, or **exit repeat** must be\nexecuted.\n\nThe **repeat times** form repeats the body Count number times. If Count\nevaluates to a negative integer, it is taken to be zero.\n\n> **Note:** It is a checked runtime error to use an expression not\n> evaluating to a number as the Count.\n\nThe **repeat while** form repeats the body until the Condition\nexpression evaluates to false.\n\n> **Note:** It is a checked runtime error to use an expression not\n> evaluating to a boolean as the Condition.\n\nThe **repeat until** form repeats the body until the Condition\nexpression evaluates to true.\n\n> **Note:** It is a checked runtime error to use an expression not\n> evaluating to a boolean as the Condition.\n\nThe **repeat with** form repeats the body until the Counter variable\nreaches or crosses (depending on iteration direction) the value of the\nFinish expression. The counter variable is adjusted by the value of the\nStep expression on each iteration. The start, finish and step\nexpressions are evaluated before the loop starts and are not\nre-evaluated. The Counter variable must be declared before the repeat\nstatement.\n\n> **Note:** It is a checked runtime error to use expressions not\n> evaluating to a number as Start, Finish or Step.\n\nThe **repeat for each** form evaluates the Container expression, and\nthen iterates through it in a custom manner depending on the Iterator\nsyntax. For example:\n\n    repeat for each char tChar in \"abcdef\"\n      -- do something with tChar\n    end repeat\n\nThe **next repeat** statement terminates the current iteration of the\nenclosing loop and starts the next iteration of the loop, or exits if\ncurrently on the last iteration.\n\nThe **exit repeat** statement terminates the current iteration of the\nenclosing loop, continuing execution at the statement after the\nenclosing loop's **end repeat**.\n\n### Throw Statements\n\n    ThrowStatement\n      : 'throw' <Error: Expression>\n\nThe **throw** statement causes an error to be raised. This causes\nexecution to terminate, and the error is passed back to environment.\n\nThe Error expression must be an expression that evaluates to a string.\n\n> **Note:** There is currently no try / catch mechanism in LiveCode\n> Builder, so throwing an error will cause the error to be raised in\n> LiveCode Script in the appropriate context.\n\n### Return Statements\n\n    ReturnStatement\n      : 'return' [ <Value: Expression> ]\n\nThe **return** statement causes execution of the current handler to end,\nand control return to the caller.\n\nIf a Value expression is specified, it is evaluated and returned as the\nresult of the handler call.\n\n> **Note:** It is a checked runtime error for a value returned from a\n> handler to not match the return type of the handler it is in.\n\n### Transfer Statements\n\n    PutStatement\n      : 'put' <Value: Expression> into <Target: Expression>\n\n    SetStatement\n      : 'set' <Target: Expression> 'to' <Value: Expression>\n\nThe **put** and **set** statements evaluate the Value expression and\nassign the resulting value to the Target expression.\n\nThe target expression must be assignable.\n\n> **Note:** It is a checked runtime error for the source value's type to\n> not be compatible with the target expression's type.\n\n    GetStatement\n      : 'get' <Value: Expression>\n\nThe **get** statement evaluates the Value expression and returns it as\nthe result of the statement. The value is subsequently available by\nusing **the result** expression.\n\n### Call Statements\n\n    CallStatement\n      : <Handler: Identifier> '(' [ <Arguments: ExpressionList> ] ')'\n\nThe call statement executes a handler with the given arguments.\n\nThe Handler identifier must be bound to either a handler or foreign\nhandler definition.\n\nThe Arguments are evaluated from left to right and passed as parameters\nto the variable.\n\n> **Note:** It is a checked runtime error for the types of 'in' and\n> 'inout' arguments to not match the declared types of the handler's\n> parameters.\n\nAny parameters of 'out' type are not evaluated on entry, but assigned to\non exit.\n\nAny parameters of 'inout' type are evaluated on entry, and assigned on\nexit.\n\n> **Note:** It is a checked compile-time error to pass non-assignable\n> expressions to parameters which are of either 'out' or 'inout' type.\n\nThe return value of a handler is subsequently available by using **the\nresult** expression.\n\n> **Note:** All handlers return a value, even if it is nothing. This\n> means that calling a handler will always change **the result**.\n\n### Bytecode Statements\n\n    BytecodeStatement\n      : 'bytecode' SEPARATOR\n            { BytecodeOperation }\n        'end'\n\n    BytecodeOperation\n      : <Label: Identifier> ':'\n      | 'register' <Name: Identifier> [ 'as' <Type: Type> ]\n      | <Opcode: Identifier> { BytecodeArgument , ',' }\n\n    BytecodeArgument\n      : ConstantValueExpression\n      | Identifier\n\nThe bytecode statement allows bytecode to be written directly for the LiveCode\nBuilder Virtual Machine.\n\nBytecode operation arguments can either be a constant expression, the name of a\ndefinition in current scope, the name of a register, or the name of a label in\nthe current bytecode block. The exact opcodes and allowed arguments are defined\nin the LiveCode Builder Bytecode Reference.\n\nLabels are local to the current bytecode block, and can be used as the target\nof one of the jump instructions.\n\nRegister definitions define a named register which is local to the current\nbytecode block. Registers are the same as handler-local variables except\nthat they do not undergo default initialization.\n\nBytecode statements are considered to be unsafe and can only appear inside\nunsafe handlers or unsafe statement blocks.\n\n> **Note:** Bytecode blocks are not intended for general use and the actual\n> available operations are subject to change.\n\n### Unsafe Statements\n\n    UnsafeStatement\n      : 'unsafe' SEPARATOR\n            { Statement }\n        'end' 'unsafe'\n\nThe unsafe statement allows a block of unsafe code to be written in a safe\ncontext.\n\nIn particular, calls to unsafe handlers (including all foreign handlers) and\nbytecode blocks are allowed in unsafe statement blocks but nowhere else.\n\n## Expressions\n\n    Expression\n      : ConstantValueExpression\n      | VariableExpression\n      | ResultExpression\n      | ListExpression\n      | ArrayExpression\n      | CallExpression\n\nThere are a number of expressions which are built-in and allow constant\nvalues, access to call results, list construction and calls. The\nremaining syntax for expressions is defined in auxiliary modules.\n\n### Constant Value Expressions\n\n      ConstantValueExpression\n        : 'nothing'\n        | 'true'\n        | 'false'\n        | INTEGER\n        | REAL\n        | STRING\n\nConstant value expressions evaluate to the specified constant value.\n\nThe **nothing** expression evaluates to the nothing value and can be\nassigned to any optional typed variable.\n\nThe **true** and **false** expressions evaluate to boolean values.\n\nThe INTEGER and REAL expressions evaluate to numeric values.\n\nThe STRING expression evaluates to a string value.\n\nConstant value expressions are not assignable.\n\n### Variable Expressions\n\n    VariableExpression\n      : <Name: Identifier>\n\nVariable expressions evaluate to the value of the specified variable.\n\nVariable expressions are assignable.\n\n### Result Expressions\n\n    ResultExpression\n      : 'the' 'result'\n\nThe result expression evaluates to the return value of the previous\n(executed) non-control structure statement.\n\nResult expressions are not assignable.\n\n### List Expressions\n\n    ListExpression\n      : '[' [ <Elements: ExpressionList> ] ']'\n\nA list expression evaluates all the elements in the expression list from\nleft to right and constructs a list value with them as elements. Each \nexpression is converted to `optional any` when constructing the list.\n\nThe elements list is optional, so the empty list can be specified as\n*[]*.\n\nList expressions are not assignable.\n\n### Array Expressions\n\n    ArrayExpression\n      : '{' [ <Contents: ArrayDatumList> ] '}'\n    ArrayDatumList\n      : <Head: ArrayDatum> [ ',' <Tail: ArrayDatumList> ]\n    ArrayDatum\n      : <Key: Expression> ':' <Value: Expression>\n\nAn array expression evaluates all of the key and value expressions\nfrom left to right, and constructs an **Array** value as appropriate.\nEach key expression must evaluate to a **String**. Each value expression \nis converted to `optional any` when constructing the array.\n\nThe contents are optional, so the empty array can be written as `{}`.\n\nArray expressions are not assignable.\n\n### Call Expressions\n\n    CallExpression\n      : <Handler: Identifier> '(' [ <Arguments: ExpressionList> ] ')'\n\nA call expression executes a handler.\n\nIts use is identical to a call statement, except that the return value\nof the handler is the value of the expression, rather than being\navailable as **the result**.\n\n> **Note:** Handlers which return no value (i.e. have nothing as their\n> result type) can still be used in call expressions. In this case the\n> value of the call is **nothing**.\n\n## Namespaces\n\nIdentifiers declared in a module are placed in a scope named using the\nmodule name. This allows disambiguation between an identifier declared\nin a module and an identical one declared in any of its imports, by\nusing a fully qualified name.\n\nFor example:\n\n\tmodule com.livecode.module.importee\n\n\tpublic constant MyName is \"Importee\"\n\tpublic handler GetMyName() returns String\n\t\treturn MyName\n\tend handler\n\n\tpublic type MyType is Number\n\n\tend module\n\n\tmodule com.livecode.module.usesimport\n\n\tuse com.livecode.module.importee\n\n\tpublic constant MyName is \"Uses Import\"\n\tpublic handler GetMyName() returns String\n\t\treturn MyName\n\tend handler\n\tpublic type MyType is String\n\n\thandler TestImports()\n\t\tvariable tVar as String\n\t\tput MyName into tVar\n\t\t-- tVar contains \"Uses Import\"\n\n\t\tput com.livecode.module.importee.MyName into tVar\n\t\t-- tVar contains \"Importee\"\n\n\t\tput com.livecode.module.usesimport.MyName into tVar\n\t\t-- tVar contains \"Uses Import\"\n\n\t\tput com.livecode.module.importee.GetMyName() into tVar\n\t\t-- tVar contains \"Importee\"\n\n\t\tvariable tVarMyType as MyType\n\t\tput tVar into tVar1 -- valid\n\n\t\tvariable tVarImportedType as com.livecode.module.importee.MyType\n\t\tput tVar into tVarImportedType -- compile error\n\tend handler\n\n\tend module\n\n## Experimental Features\n\n**Warning**: This section describes current language features and syntax\nthat are considered experimental and unstable.  They are likely to change\nor go away without warning.\n\n### Safe Foreign Handlers\n\n    SafeForeignHandler\n      : '__safe' 'foreign' 'handler' <Name: Identifier> '(' [ ParameterList ] ')' [ 'returns' <ReturnType: Type> ) ] 'binds' 'to' <Binding: String>\n\nBy default foreign handlers are considered unsafe and thus can only be used in\nunsafe blocks, or unsafe handlers. However, at the moment it is possible for a\nforeign handler to actually be safe if it has been explicitly written to wrap\na foreign function so it can be easily used from LCB.\n\nSpecifically, it is reasonable to consider a foreign handler safe if it\nconforms to the following rules:\n\n - Parameter types and return type are either ValueRefs, or bridgeable types\n - Return values of ValueRef type are retained\n - If the function fails then MCErrorThrow has been used\n - 'out' mode parameters are only changed if the function succeeds\n - A return value is only provided if the function succeeds\n\nExamples of foreign handlers which can be considered safe are all the foreign\nhandlers which bind to syntax in the LCB standard library.\n\n### Foreign Aggregate Types\n\nC-style aggregates (e.g. structs) can now be accessed from LCB via the new\naggregate parameterized type. This allows calling foreign functions which has\narguments taking aggregates by value, or has an aggregate return value.\n\nAggregate types are foreign types and can be used in C and Obj-C foreign\nhandler definitions. They bridge to and from the List type, allowing an\naggregate's contents to be viewed as a sequence of discrete values.\n\nAggregate types are defined using a `foreign type` clause and binding string.\ne.g.\n\n    public foreign type NSRect binds to \"MCAggregateTypeInfo:qqqq\"\n\nThe structure of the aggregate is defined by using a sequence of type codes\nafter the ':', each type code represents a specific foreign (C) type:\n\n| Char | Type         |\n| ---- | ------------ |\n|  a   | CBool        |\n|  b   | CChar        |\n|  c   | CUChar       |\n|  C   | CSChar       |\n|  d   | CUShort      |\n|  D   | CSShort      |\n|  e   | CUInt        |\n|  E   | CSInt        |\n|  f   | CULong       |\n|  F   | CSLong       |\n|  g   | CULongLong   |\n|  G   | CSLongLong   |\n|  h   | UInt8        |\n|  H   | SInt8        |\n|  i   | UInt16       |\n|  I   | SInt16       |\n|  j   | UInt32       |\n|  J   | SInt32       |\n|  k   | UInt64       |\n|  K   | SInt64       |\n|  l   | UIntPtr      |\n|  L   | SIntPtr      | \n|  m   | UIntSize     |  \n|  M   | SIntSize     |  \n|  n   | Float        |\n|  N   | Double       |\n|  o   | LCUInt       |\n|  O   | LCSInt       |\n|  p   | NaturalUInt  |\n|  P   | NaturalSInt  |\n|  q   | NaturalFloat |\n|  r   | Pointer      |\n\nWhen importing an aggregate to a List, each field in the aggregate is also\nbridged, except for Pointer types which are left as Pointer. When exporting\nan aggregate from a List, each element is bridged to the target field type.\n\n*Note*: Any foreign type binding to an aggregate must be public otherwise the\ntype will not work correctly."
	},	{
	"name":"livecode_builder_style_guide",
	"display name":"LiveCode Builder Style Guide",
	"location":"ide",
	"group":"Reference",
	"data":"\n# LiveCode Builder Style Guide\n\n## Introduction\n\nThis document describes best practices to be followed when working with\nLiveCode Builder source code.  Please follow it *especially* when writing code\nto be included with the main LiveCode product package.\n\n## Copyright headers\n\nPlease include a license header at the top of the `.lcb` file.\n\nFor the main LiveCode repository, or for any community extensions, the license\nis the [GNU General Public License v3](http://www.gnu.org/licenses) *without*\nthe \"any later version\" clause.\n\n## Naming\n\n### Module name\n\nThe module name uses reverse DNS notation.  For example, a module created by\nthe Example Organization would use module names beginning with `org.example`.\n\nReplace any hyphen (`-`) characters in a domain name with underscore (`_`)\ncharacters.  For example, a module derived from the `fizz-buzz.example.org`\ndomain could be `org.example.fizz_buzz`.\n\nAdditionally, add an underscore (`_`) to the start of any element in the domain\nname starting with a digit.  For example, a module derived from the\n`999.example.org` domain could be `org.example._999`.\n\nYou must only use module names corresponding to domain names that you control\nor are allowed to use.  This restriction is enforced by the the LiveCode\nextension store.\n\nIf you don't have a domain name of your own, you may use module names\nbeginning with `community.livecode.<username>`, replacing `<username>`\nwith the username you use to log into the LiveCode extension store.\nFor example, if your username is \"sophie\", then you can create a\nmodule named `community.livecode.sophie.mymodule`.\n\nFor the main LiveCode repository, please use module names beginning with\n`com.livecode`.\n\nAlways write module names in lower case.\n\n### Naming variables and parameters\n\nGive variables and parameters `xCamelCaseNames` with a leading lowercase\ncharacter indicating their scope and availability.\n\nThe meanings of the leading lowercase characters are:\n\nPrefix | Context             | Meaning\n------ | ------------------- | -------\nk      | all                 | constant\ns      | module              | static variable\nm      | widget              | static variable\np      | handler definitions | `in` argument\nr      | handler definitions | `out` argument\nx      | handler definitions | `inout` argument\nt      | handler bodies      | local variable\n\nIn general, please use nouns to name your variables and parameters.  Make the\nnames descriptive; for example:\n\n    variable tOutputPath as String  -- Good\n    variable tString as String      -- Bad\n\nFor `Boolean` variables, please try to use \"yes or no\" names.  For example:\n\n    variable tIsVisible as Boolean\n    variable tHasContents as Boolean\n\n### Naming handlers\n\nGive handlers `camelCase` names.\n\nUse verbs to name your handlers.  For example,\n\n    handler rotateShape(inout xShape, in pAngleInDegrees)\n       -- ...\n    end handler\n\n### Naming types\n\nGive types `TitleCase` names.\n\nTo distinguish from handlers, use nouns to name your types.  For example,\n\n    type RotationAngle is Number\n\n## Documenting the source code\n\nIn-line documentation for a definition is extracted from a\n`/** */` comment block immediately before the start of the definition.\n\nAlways add a top-level documentation block at the start of the LCB\nfile describing your widget, library or module.  In addition, add\nin-line documentation to all of the following:\n\n- `syntax` definitions\n- `property` definitions\n- `public handler` definitions in libraries and modules\n- `public variable` definitions in modules\n\nIt is particularly important to add documentation to all syntax and to\nany public handlers that aren't primarily accessed using syntax.\n\nAdditionally, add documentation for all messages that are posted by a\nwidget.  The documentation for each message must be placed in the\ntop-level documentation block for the widget.  For example:\n\n    /*\n    The navigation bar widget is intended for use in mobile apps for\n    switching between cards, although there are many other possible\n    uses.\n\n    ...\n\n    Name: hiliteChanged\n    Type: message\n    Syntax: on hiliteChanged\n    Summary: Sent when a navigation item is selected\n\n    ...\n    */\n    widget com.livecode.widget.navbar\n    -- ..\n    end widget\n\nPlease refer to the [Extending LiveCode](Extending LiveCode.md) guide for full\ndetails of the syntax of in-line documentation comments, including examples.\n\n## Named constants\n\nOften, it is useful to use constant values in your code.  Please declare named\nconstants rather than placing the values in-line.  For example, you may\nwant to create three tabs labelled \"Things\", \"Stuff\", and \"Misc\":\n\n    constant kTabNames is [\"Things\", \"Stuff\", \"Misc\"]\n\n    handler createTabs()\n       variable tName\n       repeat for each element tName in kTabNames\n          -- Create the tab\n       end repeat\n    end handler\n\nIn particular, please avoid any \"magic numbers\" in your code.\n\n## Whitespace\n\n### Indentation\n\nPlease indent with tab characters.  Use one tab character per level of\nindentation.\n\nPlease do not use a level of indentation at `module` level.\n\nComments should be indented to the same level as the code they apply to.\n\nFor example:\n\n    module org.example.indent\n\n    -- Example handler\n    handler fizzBuzz(in pIsFizz)\n       if pIsFizz then\n          return \"Fizz\"\n       else\n          -- Maybe this should have a capital letter\n          return \"buzz\"\n       end if\n    end handler\n\n    end module\n\nIf it's necessary to mix spaces and tabs for indentation, please use 3 spaces\nper tab.\n\n### Wrapping\n\nAvoid lines longer than 80 characters.  Break long lines using a `\\`\ncontinuation character.  Indent continuation lines by two levels. For\nexample:\n\n    constant kWordList is [\"a\", \"very\", \"long\", \"list\", \"that\", \"is\", \"much\",\\\n          \"more\", \"readable\", \"when\", \"wrapped\", \"nicely\"]\n\nWhen breaking a handler definition or handler type definition, break\nlong lines at commas:\n\n    handler processStringAndArray(in pStringArg as String, \\\n          in pArrayArg as Array) returns Boolean\n\n### Handler declarations, definitions and calls\n\nIn handler definitions and handler type definitions, don't insert\nwhitespace between the handler name and the parameter list.  For\nexample:\n\n    handler type Fizzer()   -- Good\n    handler type Buzzer ()  -- Bad\n\nIn handler parameter lists, please add a space between each parameter.  For\nexample:\n\n    handler formatAsString(in pValue, out rFormat) -- Good\n    handler isEqualTo(in pLeft,in pRight)          -- Bad\n\nPlease observe the same formatting in handler calls.  For example:\n\n    variable tFormatted\n    variable tIsEqual\n    formatAsString(3.1415, tFormatted)             -- Good\n    isEqualTo (tFormatted,\"3.1415\") into tIsEqual  -- Bad\n\n### List and array literals\n\nIn list and array literals, please add a space between each element,\nafter the comma.  For array literals, also insert space between key\nand value, after the colon.  For example:\n\n    constant kPowersOfTwo is [1, 2, 4, 8]\n    constant kBorderWidths is {\"top\": 0, \"bottom\": 0, \"left\": 1, \"right\": 2}\n\n## Widget-specific guidelines\n\nThis section contains recommendations that are specific to writing\nwidgets.\n\nAs a general rule, try to minimize surprise for users who mix widgets\nwith classic LiveCode controls by using similarly named events and\nproperties with similar semantics.\n\n### Writing load handlers\n\nWhen writing an `onLoad()` handler to initialise a widget from\nserialised state:\n\n- Always call property setters to update the widget state.  Do not set\n  instance variables directly.\n- Always check that the property array contains each key rather than\n  accessing it unilaterally.\n- If keys are absent from the property array, do not set them to\n  default values.  Rely on the `onCreate()` handler to have already\n  done that.\n\nExample:\n\n    public handler onLoad(in pProperties)\n       if \"showBorder\" is among the keys of pProperties then\n          setShowBorder(pProperties[\"showBorder\"])\n       end if\n       if \"opaque\" is among the keys of pProperties then\n          setShowBackground(pProperties[\"opaque\"])\n       end if\n    end handler\n\n### Classic control properties\n\nWhere possible, try to make the names and effects of widget\nproperties as similar as possible to properties of classic controls.\nFor example:\n\n- **label**: the text for the primary text label\n- **showBorder**: whether to display an outline\n- **opaque**: whether to fill in the background\n\n### Host control properties\n\nWhen relying on properties that are implemented by the widget host\ncontrol, such as the classic color and pattern properties, include\n`metadata` definitions to display them in the PI, but do not include a\n`property` definition.\n\nBecause there is no `property` definition, the documentation for the\nhost control property must be placed in the top-level documentation\nblock comment before the start of widget definition.\n\nFor example, to shadow the `borderColor` host control property:\n\n    /**\n    Test widget that demonstrates shadowing the\n    <borderColor(property)> property.\n\n    ...\n\n    Name: borderColor\n    Type: property\n\n    Syntax: set the borderColor of <widget> to <color>\n    Syntax: get the borderColor of <widget>\n\n    Summary: Color for drawing circular outline\n\n    Description:\n    The <borderColor> property controls the color used to draw the\n    widget's outline.\n    */\n    widget org.example.host_control_property\n\n    -- ...\n\n    metadata borderColor.editor  is \"com.livecode.pi.color\n    metadata borderColor.section is \"Colors\"\n    metadata borderColor.label   is \"Border color\"\n    metadata borderColor.default is \"109,109,109\"\n\n    -- ...\n\n    end widget\n\n### Events\n\nAlways implement:\n\n- `onCreate()`\n- `onSave()`\n- `onLoad()`\n- `onPaint()`\n\nYou should _usually_ implement:\n\n- `onGeometryChanged()`: if you have any non-trivial recomputation\n  required to handle resizing\n- `onMouseDown()`/`onMouseUp()`/`onMouseMove()`: always `post` these to\n  script in order to behave like a classic control"
	},	{
	"name":"livecode_documentation_format_reference",
	"display name":"LiveCode Documentation Format Reference",
	"location":"ide",
	"group":"Reference",
	"data":"\n# LiveCode Documentation Format Reference\n\n## Introduction\n\nLiveCode uses a custom documentation format for the dictionary and for extension APIs. The \nformat has very few special characters and is intended to maximise readability and \nmodifiability. \n\n## Format\n\nDocumentation for a LiveCode API or documentation entry consists of a series of elements and their values, in the following form:\n\n*elementName* : *content*\n\nThere are several standard types of *content*; which one may be used depends on the *elementName*.\n\n### Element names\n\nElements are optional unless otherwise specified.\n\n#### Name (required)\nThe name of the API entry. The name must be a single word.\n>*Note:* For inline docs, the name element is automatically generated\n\n#### Synonyms\nA comma-delimited list of synonyms for this API entry.\n\n#### Type (required)\nThe type of this API entry. One of the following:\n(API-level)\n* command\n* function\n* property\n* message\n* constant\n* keyword\n* control structure\n* operator\n* statement\n* expression\n\t\n(Glossary-level)\n* library\n* widget\n* glossary\n* object\n\nThe glossary-level entries have part of their content generated from the API-level entries.\n\n>*Note:* For inline docs, the type element is automatically generated\n\n#### Syntax (required for API-level entries)\nA description of how to use or call this facet of the API. May just be the name itself, for keywords etc.\nAn entry may have a number of Syntax elements, if there are variations within the same entry.\n\nThe following can be used to specify livecode syntax:\n- `[optional]`\n- `[repeated optional ...]`\n- `{ variant 1 | variant 2 }`\n- `<parameterName>`\n\nFor example, the syntax for the first variant of the `split` command:\n\n\tsplit <variableToSplit> {by | using | with} <primaryDelimiter> [and <secondaryDelimiter>]\n\t\ndescribes the following possible usages:\n- `split tVar by comma`\n- `split tVar using return`\n- `split tVar with \"a\"`\n- `split tVar by comma and return`\n- `split tVar using the rowdel and the columndel`\n- `split tVar with tDelim1 and tDelim2`\n\nThe syntax for `answer file with type`:\n\n\tanswer file[s] <prompt> [with <defaultPath>] [with type <types> [or type <types> ...]] [titled <windowTitle>] [as sheet]\n\ngives an example of the repetition notation, namely it allows something like\n\n\tanswer files with type tType1 or type tType2 or type tType3 or type tType4\n\n>*Note:* For inline docs, the Syntax elements are automatically generated\n\nAll parameters described in the parameters section should appear in angle brackets in the syntax.\n\n#### Summary (required)\nA summary of the API entry being documented. The summary should be a single line. Anything more in-depth should be included in the description.\n\n#### Associated\nA comma-delimited list of names of other API or docs entries. Each one must be of type **object**, **glossary**, **library**, or **widget**. It is used to generate the docs for the entries to which it is associated.\n\nIn particular, every API entry in a library should have that library name in its Associated list.\n\n#### Introduced\nThe LiveCode version in which the API entry was first available.\n\n#### OS\nA comma-delimited list specifying which operating systems the API entry is available for. One or more of the following:\n\n* mac\n* windows\n* linux\n* iOS\n* android\n* RPi\n* html5\n\n#### Platforms\nA comma-delimited list specifying which platforms the API entry is available for. One or more of the following:\n\n* desktop\n* server\n* web\n* mobile\n\n#### Example\nExample elements should show how API entries are used in context. Each example will be displayed in the documentation viewer as a multiline code block. Where possible, an example should be entirely self contained, so that it is runnable as a block of code without any additions.\n\nAn API entry can have any number of Example elements. \n\n#### Parameters\nThe parameters element itself does not do anything, but can be helpful for readability as a precursor to the parameter elements themselves.\nParameter elements are specified in the following way:\n*paramName* (*paramType*) : *paramDescription*\n\nThe param type is optional, although may be helpful to include, and is required for further formatting of parameter descriptions to take place. The three types that will instigate further formatting are:\n\n* enum\n* set\n* array\n\nA parameter of **enum** type is one that expects one of a specified list of values. Similarly, a parameter of **set** type is one that expects a comma-delimited list of one or more of a specified list of values. After the param description of the **enum** or **set** type, these values should be listed in the following way\n```\n\t- value1 : description of value1\n\t- value2 : description of value2\n\t- ...\n```\netc.\n\nAfter the description parameter of **array** type, the format of the array may optionally be specified in the following way:\n\n```\n{ \n\tkey1 (keyType) : description of key1\n\tvalue1 (valueType) : description of value1\n\tkey2 (keyType) : description of key2\n\tvalue2 (valueType) : description of value2\n\t...\n}\n```\nThe key type and value type are optional. If one of the values is a sub-array, and the **array** type is specified, then the array specification may be nested as follows:\n\n```\n{ \n\tkey1 (keyType) : description of key1\n\tvalue1 (array) : description of value1\n\t{\n\t\tkey2 (keyType) : description of key2\n\t\tvalue2 (valueType) : description of value2\n\t\t...\n\t}\n\t...\n}\n```\nThe indentation is not necessary, but is helpful for readability.\n\nAny parameter specified using `<parameterName>` in the Syntax element should be described in the parameters section.\n\n#### Value and return parameters\nFor simple return parameters, i.e. the direct return value of a function, use the Returns element.\nWhen a value is both an input and output value, for example the value of a property, use the Value element.\nThe Returns and Value elements are mutually exclusive.\n\nSome functions and commands in LiveCode change the value of 'the result' and the 'it' variable. In these cases there are also special return parameter elements It and The result.\n\nAll of these elements can have a type specified in brackets before the colon, as for parameter elements. The same comments about formatting apply to return parameters.\n\n#### Description (required)\nA full description of the API entry. The description may have markdown elements which will be rendered in the documentation viewer.\n\n#### References\nA comma-delimited list of other API or docs entries that are referenced. The references element is essential for linking around the documentation viewer.\n\nThe references list should be in the form:\n>*entryName* (*entryType*), *entryName* (*entryType*), *entryName* (*entryType*), ...\n\n#### Tags\nA comma-delimited list of tags for this entry. The documentation viewer can filter entries by tag.\n\n### Other documentation syntax\nThe Description element is the only one that allows standard markdown. There is only (essentially) one other syntactic form allowed in API documentation, which is enclosing text in angle brackets <>. There are three purposes of the angle brackets syntax:\n\n* Specifying occurrences of the name of the current API entry.\n* Specifying occurrences of the names of parameters.\n* Specifying links to other API entries or documentation.\n\nIn the first two cases, applying the syntax merely consists in enclosing the relevant occurrences in angle brackets, eg to reference a parameter *pParam* in the entry named *thisEntry*,\n>This is a sentence in which &lt;pParam&gt; ought to be marked as being a parameter in the API entry for &lt;thisEntry&gt;\n\nTo specify a link to another API or docs entry, the latter **must** be included in the References element. If there is only one item in the References element with a matching name, then it suffices to enclose the referencing text in angle brackets.\n>This will link correctly to the &lt;other&gt; function's API entry provided the References element contains only one item with the name \"other\".\n\nIf the referencing text is different from the name of the entry, such as if it is pluralised or possessive, include the referenced entry name as a label inside the angle brackets.\n> This will also link correctly to &lt;other|other's&gt; API entry, but display as \"other's\" in the documentation viewer.\n\nIf the target name is shared by two references, then the link should be disambiguated by including the type in brackets:\n> We might want to link to the &lt;other(function)&gt; function and the &lt;other(command)&gt; command in the same entry, if the references contain \"other (function)\" and \"other (command)\".\n\nIt is possible to do both of the above at the same time:\n> This sentence contains links to &lt;other(function)|other's&gt; and &lt;other(command)|other's&gt; dictionary entries.\n\n### Separate docs files\nTo specify the documentation for a library in one separate file, it must have the following structure:\n\nLibrary: *libraryName*\n\nSummary: *librarySummary*\n\nDescription:\n*libraryDescription*\n\nName: *entryName*\n\nType: *entryType*\n\nSyntax: *entrySyntax*\n\nSummary: *entrySummary*\n\n...other elements associated with *entryName*...\n\nName: *anotherEntryName*\netc.\n\n### Inline documentation\nDocumentation for LiveCode script and LiveCode extensions can be done in-line. In this case, the Name, Type, Syntax and Associated elements are auto-generated. \n\nThe code-block enclosed in /** */ immediately preceding the handler or syntax definition is used for the other elements of the documentation for that entry. In LiveCode extensions, the types of parameters are also pulled from the associated handler.\n\n### Separate docs files examples\n\n#### Dictionary example\nHere is the dictionary document for the *textEncode* function:\n\n```\nName: textEncode\n\nType: function\n\nSyntax: textEncode(<stringToEncode>, <encoding>)\n\nSummary: Converts from text to binary data.\n\nIntroduced: 7.0\n\nOS: mac,windows,linux,ios,android\n\nPlatforms: desktop,server,web,mobile\n\nExample:\ntextEncode(\"A\",\"UTF16\")\n\nExample:\nput textEncode(field \"output\",\"UTF-8\") into tOutput\nput tOutput into url (\"file:output.txt\")\n\nParameters:\nstringToEncode (string): Any string, or expression that evaluates to a string.\nencoding (enum): the encoding to be used\n- \"ASCII\"\n- \"ISO-8859-1\": Linux only\n- \"MacRoman\": OS X only\n- \"Native\": ISO-8859-1 on Minux, MacRoman on OS X, CP1252 on Windows\n- \"UTF-16\"\n- \"UTF-16BE\"\n- \"UTF-16LE\"\n- \"UTF-32\"\n- \"UTF-32BE\"\n- \"UTF-32LE\"\n- \"UTF-8\"\n- \"CP1252\"\n\nReturns: Returns the <stringToEncode> as binary data.\n\nDescription:\nConverts from text to binary data.\n\nThe <textEncode> function takes text, and returns it as binary data, encoded with the specified encoding.\n\nIt is highly recommended that any time you interface with things outside LiveCode (files, network sockets, processes, etc) that you explicitly textEncode any text you send outside LiveCode and <textDecode> all text received into LiveCode. If this doesn't happen, a platform-dependent encoding will be used (which normally does not support Unicode text).\n\nIt is not, in general, possible to reliably auto-detect text encodings so please check the documentation for the programme you are communicating with to find out what it expects. If in doubt, try UTF-8.\n\nReferences: textDecode (function)\n```\n\n#### Library example\n\n```\nModule: com.livecode.sort\n\nType: library\n\nDescription: This library consists of the sorting operations provided by the standard library of LiveCode Builder\n\n\nName: SortListDescendingText\n\nType: statement\n\nSyntax: sort <Target> in descending [text] order\n\n\nSummary: Sorts <Target> in descending text order.\nParameters:\nTarget (inout list): An expression that evaluates to a list of strings. \nExample:     \n\tvariable tTestList as List\n    put the empty list into tTestList\n\n    push \"abcd\" onto tTestList\n    push 1 onto tTestList\n    push \"xyz\" onto tTestList\n    push 2 onto tTestList\n\n    sort tTestList in descending order -- tTestList is [\"xyz\", \"abcd\", 1, 2]\n\n\nDescription: Text sort is performed by comparing string elements on a codepoint by codepoint basis. Non-string elements come after all string elements in the sort order. The sort is stable, so that non-string elements are not re-ordered relative to each other.\n\n\nTags: Sorting\n\nName: SortListAscendingText\n\nType: statement\n\nSyntax: sort <Target> in ascending [text] order\n```\n### Inline examples\n\nIn general, writing inline docs has fewer requirements since several of the elements are auto-generated.\n\n#### LiveCode Builder syntax example\n\n```\n/**  \nThis library consists of the operations on lists included in the standard library of LiveCode Builder.\n*/\n\nmodule com.livecode.list\n\n/**\nSummary:        Returns the first element of <Target>.\nTarget:         An expression which evaluates to a list.\noutput:\t\t\tThe first element of <Target>\n\nExample:\n\tvariable tVar as List\n\tput the empty list into tVar\n\tpush \"first element\" onto tVar\n\t\n\tvariable tResult as Boolean\n\tif the head of tVar is \"first element\" then\n\t\tput \"success\" into tResult\n\tend if\n\t\nDescription:\nReturns the first element of the list <Target> without modifying <Target>.\n\\`\\`\\`\tthe head of tVar\\`\\`\\`\nis equivalent to using the <IndexedElementOfList> operator with index -1,\n\\`\\`\\`\ttVar[1]\\`\\`\\`\n\t\nReferences: IndexedElementOfList(operator)\n\nTags: Lists\n*/\n\nsyntax HeadOfList is prefix operator with precedence 1\n    \"the\" \"head\" \"of\" <Target: Expression>\nbegin\n    MCListEvalHeadOf(Target, output)\nend syntax\n\nend module\n```\n\n#### LiveCode Builder handler example\n```\n/**\nSummary: Logs the result of a test to the <xResults> list\n\nParameters:\npModule: The name of the module this test comes from.\npTest: The name of the test.\npResult: The result of the test\nxResults: The ongoing list of test results\n\nDescription:\nPushes either the string \"SUCCESS : <pModule>_<pTest>\" or the string \"FAILURE : <pModule>_<pTest>\" onto the results list,\ndepending on the value of <pResult>\n\n*/\n\npublic handler testLog(in pModule as String, in pTest as String, in pResult as Boolean, inout xResults as List)\n    variable tStringResult as String\n    if pResult then\n        put \"SUCCESS\" into tStringResult\n    else\n        put \"FAILURE\" into tStringResult\n    end if\n\n    push tStringResult && \":\" && pModule & \"_\" & pTest onto xResults\nend handler\n```\n#### LiveCode script handler example\n```\n/**\nSummary: Extracts the inline docs from a .lcb file\n\npFile: The path to the .lcb file to extract docs from\n\nReturns (string): A string consisting of all the docs for the library, and the syntax and handlers present in the .lcb file\n\nDescription:\n<revDocsGenerateDocsFileFromModularFile> is used when packaging a widget to create its API documentation.\nIt generates the Library and Type elements from the declaration in the <pFile> (either widget or library), and extracts\nthe comment block that precedes any initial declaration for use as the library-level Description element.\nIt then extracts the comment blocks that precede syntax and handler definitions in <pFile>, and generates the \nName, Type, Syntax, and Associated elements for each entry, as well as the parameter types.\n\nTags: Package building\n*/\n\nfunction revDocsGenerateDocsFileFromModularFile pFile\n...\nend revDocsGenerateDocsFileFromModularFile\n```"
	},	{
	"name":"release_notes",
	"display name":"Release Notes",
	"location":"ide",
	"group":"Other",
	"data":"<h1 class=\"title\">LiveCode 9.5.1 Release Notes</h1>\n\n\n# Overview\n\nLiveCode 9.0 enables access to libraries and platform APIs written in\nmany other languages thanks to the community-funded 'Infinite\nLiveCode' project.\n\nThis includes a greatly improved LiveCode Builder virtual machine.\n\nLiveCode 9.0 contains many additional improvements to support LiveCode\napp developers, including:\n\n* A new \"spinner\" widget\n\n* OAuth2 authentication library for use with web APIs (e.g. Facebook,\n  Google and GitHub)\n\n* A command argument parser library for building command-line\n  standalones\n\n* Updates and performance improvements for existing widgets\n\n# Known issues\n\n* The installer will currently fail if you run it from a network share\n  on Windows. Please copy the installer to a local disk before\n  launching on this platform.\n\n* The browser widget does not work on 32-bit Linux.\n\n* 64-bit standalones for Mac OS X do not have support for audio\n  recording.\n\n# Breaking changes\n\n## Boolean constants\n\nIn this release, boolean constants `true` and `false` have been changed so that\nthey resolve to values of boolean type (rather than string). This will affect\nany uses of the `is strictly` operator on such values, i.e. previously the following\nwere true:\n\n  true is strictly a string\n  false is strictly a string\n\nNow, they are both false, and the following are true:\n\n  true is strictly a boolean\n  false is strictly a boolean\n\nBoolean constants passed as elements of arrays to LCB handlers will not require\nconversion to boolean values in LCB - in fact any attempt to do so assuming they\nare strings will cause an error. Any array elements which are intended to be\nbooleans in LCB should be checked for their type before conversion. For example,\nany of the following could be done by an LCB library user:\n\n    put true into tArray[\"enabled\"]\n    put \"true\" into tArray[\"enabled\"]\n    put (tVar is not \"enabled\") into tArray[\"enabled\"]\n\nAn LCB handler to which `tArray` is passed should do the following:\n\n    variable tEnabled as Boolean\n    if tArray[\"enabled\"] is a boolean then\n        put tAction[\"enabled\"] into tEnabled\n    else\n        put tAction[\"enabled\"] parsed as boolean into tEnabled\n    end if\n\n## Infinity constant\n\nThe constant `infinity` has been added to the language in this release. As a\nresult, the unquoted literal `infinity` is now reserved. Any existing uses\nof it should be quoted, as otherwise it will resolve to the floating point\nvalue representing infinity, rather than the string \"infinity\".\n\n## Implicit object\n\nA number of LCB commands use an implicit object to provide context for their\nexecution. Some of these commands also allow specifying an explicit object.\nThese commands are:\n\n- `execute script`\n- `send`\n- `post`\n- `image from file`\n- `resolve file` - new in this version\n\nIn previous releases `execute script` and `image from file` would use\n`this card of the defaultStack` as the implicit object even if called from\na widget. The `send` and `post` commands, however, used\n`this card of the defaultStack` when in a library module handler and the host\nwidget when in a widget module handler. This release changes `execute script`\nand `image from file` to also use the host widget as the implicit object. This\nmeans, for example, that `image from file` will resolve a relative file path\nrelative to the `stackFile` the host widget is on rather than the `stackFile` of\nthe `defaultStack`.\n\n# Platform support\nThe engine supports a variety of operating systems and versions. This section describes the platforms that we ensure the engine runs on without issue (although in some cases with reduced functionality).\n\n## Windows\n\nLiveCode supports the following versions of Windows:\n\n* Windows 7 (both 32-bit and 64-bit)\n* Windows Server 2008\n* Windows 8.x (Desktop)\n* Windows 10\n\n**Note:** On 64-bit Windows installations, LiveCode runs as a 32-bit application through the WoW layer.\n\n## Linux\n\nLiveCode supports the following Linux distributions, on 32-bit or\n64-bit Intel/AMD or compatible processors:\n\n* Ubuntu 14.04 and 16.04\n* Fedora 23 & 24\n* Debian 7 (Wheezy) and 8 (Jessie) [server]\n* CentOS 7 [server]\n\nLiveCode may also run on Linux installations which meet the following\nrequirements:\n\n* Required dependencies for core functionality:\n  * glibc 2.13 or later\n  * glib 2.0 or later\n\n* Optional requirements for GUI functionality:\n  * GTK/GDK 2.24 or later\n  * Pango with Xft support\n  * esd (optional, needed for audio output)\n  * mplayer (optional, needed for media player functionality)\n  * lcms (optional, required for color profile support in images)\n  * gksu (optional, required for privilege elevation support)\n\n**Note:** If the optional requirements are not present then LiveCode will still run but the specified features will be disabled.\n\n**Note:** The requirements for GUI functionality are also required by Firefox and Chrome, so if your Linux distribution runs one of those, it will run LiveCode.\n\n**Note:** It may be possible to compile and run LiveCode Community for Linux on other architectures but this is not officially supported.\n\n## Mac\nThe Mac engine supports:\n\n* 10.9.x (Mavericks)\n* 10.10.x (Yosemite)\n* 10.11.x (El Capitan)\n* 10.12.x (Sierra)\n* 10.13.x (High Sierra)\n* 10.14.x (Mojave)\n\n## iOS\niOS deployment is possible when running LiveCode IDE on a Mac, and provided Xcode is installed and has been set in LiveCode *Preferences* (in the *Mobile Support* pane).\n\nCurrently, the supported versions of Xcode are:\n* Xcode 6.2 on MacOS X 10.9\n* Xcode 6.2 and 7.2 on Mac OS X 10.10\n* Xcode 8.2 on MacOS X 10.11\n* Xcode 9.2 on MacOS 10.12 (Note: You need to upgrade to 10.12.6)\n* Xcode 10.1 on MacOS 10.13 (Note: You need to upgrade to 10.13.4)\n\nIt is also possible to set other versions of Xcode, to allow testing\non a wider range of iOS simulators. For instance, on MacOS 10.12\n(Sierra), you can add *Xcode 6.2* in the *Mobile Support* preferences,\nto let you test your stack on the *iOS Simulator 8.2*.\n\nWe currently support deployment for the following versions of iOS:\n\n* 8.2 [simulator]\n* 9.2\n* 10.2\n* 11.2\n* 12.1\n\n## Android\n\n\nLiveCode allows you to save your stack as an Android application, and\nalso to deploy it on an Android device or simulator from the IDE.\n\nAndroid deployment is possible from Windows, Linux and Mac OSX.\n\nThe Android engine supports devices using ARMv7 or ARMv8 processors.\nIt will run on the following versions of Android:\n\n* 4.1-4.3 (Jelly Bean)\n* 4.4 (KitKat)\n* 5.0-5.1 (Lollipop)\n* 6.0 (Marshmallow)\n* 7.x (Nougat)\n* 8.x (Oreo)\n\nTo enable deployment to Android devices, you need to download the\n[Android SDK](https://developer.android.com/sdk/index.html#Other), and\nthen use the 'Android SDK Manager' to install:\n\n* the latest \"Android SDK Tools\"\n* the latest \"Android SDK Platform Tools\"\n\nYou also need to install the Java Development Kit (JDK).  On Linux,\nthis usually packaged as \"openjdk\".  LiveCode requires JDK version 1.6\nor later.\n\nOnce you have set the path of your Android SDK in the \"Mobile Support\"\nsection of the LiveCode IDE's preferences, you can deploy your stack\nto Android devices.\n\nSome users have reported successful Android Watch deployment, but it\nis not officially supported.\n\n## HTML5\n\nLiveCode applications can be deployed to run in a web browser, by running the LiveCode engine in JavaScript and using modern HTML5 JavaScript APIs.\n\nHTML5 deployment does not require any additional development tools to be installed.\n\nLiveCode HTML5 standalone applications are currently supported for running in recent versions of [Mozilla Firefox](https://www.mozilla.org/firefox/new/), [Google Chrome](https://www.google.com/chrome/) or [Safari](https://support.apple.com/HT204416).  For more information, please see the \"HTML5 Deployment\" guide in the LiveCode IDE.\n\n# Setup\n## Installation\n\nEach version of LiveCode installs can be installed to its own,\nseparate folder.  This allow multiple versions of LiveCode to be\ninstalled side-by-side.  On Windows (and Linux), each version of\nLiveCode has its own Start Menu (or application menu) entry. On Mac OS\nX, each version has its own app bundle.\n\nOn Mac OS X, install LiveCode by mounting the `.dmg` file and dragging\nthe app bundle to the `Applications` folder (or any other suitable\nlocation).\n\nFor Windows and Linux, the default installation locations when\ninstalling for \"All Users\" are:\n\n| Platform | Path |\n| -------- | ---- |\n| Windows  | `<x86 program files folder>/RunRev/LiveCode <version>` |\n| Linux    | `/opt/livecode/livecode-<version>` |\n\nThe installations when installing for \"This User\" are:\n\n| Platform | Path |\n| -------- | ---- |\n| Windows  | `<user roaming app data folder>/RunRev/Components/LiveCode <version>` |\n| Linux    | `~/.runrev/components/livecode-<version>` |\n\n**Note:** If installing for \"All Users\" on Linux, either the **gksu** tool must be available, or you must manually run the LiveCode installer executable as root (e.g. using **sudo** or **su**).\n\n## Uninstallation\n\nOn Windows, the installer hooks into the standard Windows uninstall mechanism. This is accessible from the \"Add or Remove Programs\" applet in the windows Control Panel.\n\nOn Mac OS X, drag the app bundle to the Trash.\n\nOn Linux, LiveCode can be removed using the `setup.x86` or `setup.x86_64` program located in LiveCode's installation directory.\n\n## Reporting installer issues\n\nIf you find that the installer fails to work for you then please report it using the [LiveCode Quality Control Centre](http://quality.livecode.com) or by emailing support@livecode.com.\n\nPlease include the following information in your report:\n\n* Your platform and operating system version\n* The location of your home or user folder\n* The type of user account you are using (guest, restricted, admin etc.)\n* The installer log file.\n\nThe installer log file can be located as follows:\n\n| Platform        | Path  |\n| --------------- | ----- |\n| Windows 2000/XP | `<documents and settings folder>/<user>/Local Settings/` |\n| Windows Vista/7 | `<users folder>/<user>/AppData/Local/RunRev/Logs` |\n| Linux           | `<home>/.runrev/logs` |\n\n## Activating LiveCode Indy or Business edition\n\nThe licensing system ties your product licenses to a customer account system, meaning that you no longer have to worry about finding a license key after installing a new copy of LiveCode. Instead, you simply have to enter your email address and password that has been registered with our customer account system and your license key will be retrieved automatically.\n\nAlternatively it is possible to activate the product via the use of a specially encrypted license file. These will be available for download from the customer center after logging into your account. This method will allow the product to be installed on machines that do not have access to the internet.\n\n## Command-line installation\n\nIt is possible to invoke the installer from the command-line on Linux and Windows. When doing command-line installation, no GUI will be displayed.  The installation process is controlled by arguments passed to the installer.\n\nRun the installer using a command in the form:\n\n\t<installer> install -ui [OPTION ...]\n\nwhere `<installer>` should be replaced with the path of the installer executable or app (inside the DMG) that has been downloaded.  The result of the installation operation will be written to the console.\n\nThe installer understands any of the following `OPTION`s:\n\n| Option  | Description  |\n| ------- | ------------ |\n|`-allusers`          | Install the IDE for \"All Users\". If not specified, LiveCode will be installed for the current user only. |\n|`-desktopshortcut`   | Place a shortcut on the Desktop (Windows-only) |\n|`-startmenu`         | Place shortcuts in the Start Menu (Windows-only) |\n|`-location LOCATION` | The folder to install into. If not specified, the `LOCATION` defaults to those described in the \"Installation\" section above. |\n|`-log LOGFILE`       | The file to which to log installation actions. If not specified, no log is generated. |\n\n**Note:** the command-line installer does not do any authentication. When installing for \"All Users\", you will need to run the installer command as an administrator.\n\nAs the installer is actually a GUI application, it needs to be run slightly differently from other command-line programs.\n\nOn Windows, the command is:\n\n\tstart /wait <installer> install -ui [OPTION ...]\n\n## Command-line uninstallation\n\nIt is possible to uninstall LiveCode from the command-line on Windows and Linux.  When doing command-line uninstallation, no GUI will be displayed.\n\nRun the uninstaller using a command of the form:\n\n\t<uninstaller> uninstall -ui\n\nWhere <exe> is *.setup.exe* on Windows, and *.setup.x86* on Linux. This executable, for both of the platforms, is located in the folder where LiveCode is installed.\n\nThe result of the uninstallation operation will be written to the console.\n\n**Note:** the command-line uninstaller does not do any authentication.  When removing a version of LiveCode installed for \"All Users\", you will need to run the uninstaller command as an administrator.\n\n## Command-line activation for LiveCode Indy or Business edition\n\nIt is possible to activate an installation of LiveCode for all users by using the command-line.  When performing command-line activation, no GUI is displayed.  Activation is controlled by passing command-line arguments to LiveCode.\n\nActivate LiveCode using a command of the form:\n\n\t<livecode> activate -file LICENSEFILE -passphrase SECRET\n\nwhere `<livecode>` should be replaced with the path to the LiveCode executable or app that has been previously installed.\n\nThis loads license information from the manual activation file `LICENSEFILE`, decrypts it using the given `SECRET` passphrase, and installs a license file for all users of the computer.  Manual activation files can be downloaded from the [My Products](https://livecode.com/account/products/livecode) page in the LiveCode account management site.\n\nIt is also possible to deactivate LiveCode with:\n\n\t<livecode> deactivate\n\nSince LiveCode is actually a GUI application, it needs to be run slightly differently from other command-line programs.\n\nOn Windows, the command is:\n\n\tstart /wait <livecode> activate -file LICENSE -passphrase SECRET\n\tstart /wait <livecode> deactivate\n\nOn Mac OS X, you need to do:\n\n\t<livecode>/Contents/MacOS/LiveCode activate -file LICENSE -passphrase SECRET\n\t<livecode>/Contents/MacOS/LiveCode deactivate\n\n\n\n# LiveCode Community engine changes\n\n## Specific engine bug fixes (9.5.1-rc-1)\n<table class=\"bugs\">\n<tr><td><a href=\"http://quality.livecode.com/show_bug.cgi?id=15645\">15645</a></td><td>Corrected information the controlAtScreenLoc entry</td></tr>\n<tr><td><a href=\"http://quality.livecode.com/show_bug.cgi?id=19377\">19377</a></td><td>Updated example in the version dictionary entry</td></tr>\n<tr><td><a href=\"http://quality.livecode.com/show_bug.cgi?id=19495\">19495</a></td><td>Explained a feature in the dateItems entry where out-of-range values can be used effectively.</td></tr>\n<tr><td><a href=\"http://quality.livecode.com/show_bug.cgi?id=19631\">19631</a></td><td>Added notes in mobile control documentation that the video controller only displays when its filename is correct.</td></tr>\n<tr><td><a href=\"http://quality.livecode.com/show_bug.cgi?id=19660\">19660</a></td><td>Added note to the label entry that setting it for a stack prevents the card number from being displayed in the title bar.</td></tr>\n<tr><td><a href=\"http://quality.livecode.com/show_bug.cgi?id=19892\">19892</a></td><td>Clarified in the playStopped entry that it is sent when a clip plays backwards to the beginning.</td></tr>\n<tr><td><a href=\"http://quality.livecode.com/show_bug.cgi?id=20303\">20303</a></td><td>Added example to the URL keyword entry to demonstrate how it is used with variables.</td></tr>\n<tr><td><a href=\"http://quality.livecode.com/show_bug.cgi?id=20314\">20314</a></td><td>Amended the HTMLText dictionary entry to say that r,g,b is also an acceptable HTML-style color definition.</td></tr>\n<tr><td><a href=\"http://quality.livecode.com/show_bug.cgi?id=20472\">20472</a></td><td>Added missing keys to the fullClipboardData entry</td></tr>\n<tr><td><a href=\"http://quality.livecode.com/show_bug.cgi?id=21111\">21111</a></td><td>Explained mobile accelerometer differences in the accelerationChanged entry</td></tr>\n<tr><td><a href=\"http://quality.livecode.com/show_bug.cgi?id=21803\">21803</a></td><td>Added documentation note for the rename command that it can overwrite existing files</td></tr>\n<tr><td><a href=\"http://quality.livecode.com/show_bug.cgi?id=21978\">21978</a></td><td>Added a warning to the urlProgress documentation that the libUrl and tsNet libraries disable it.</td></tr>\n<tr><td><a href=\"http://quality.livecode.com/show_bug.cgi?id=22130\">22130</a></td><td>Improve stability of breakpoint manipulation in the S/E whilst debugging</td></tr>\n<tr><td><a href=\"http://quality.livecode.com/show_bug.cgi?id=22192\">22192</a></td><td>Mention using textEncode/textDecode with the dragData[\"private\"]</td></tr>\n<tr><td><a href=\"http://quality.livecode.com/show_bug.cgi?id=22198\">22198</a></td><td>Fix missing text in the hiliteColor entry</td></tr>\n<tr><td><a href=\"http://quality.livecode.com/show_bug.cgi?id=22207\">22207</a></td><td>Fixed garbled text in the documentation for selectedObject</td></tr>\n<tr><td><a href=\"http://quality.livecode.com/show_bug.cgi?id=22256\">22256</a></td><td>Fix mobileSetKeyboardDisplay panning incorrect amount on second and subsequent keyboard activation</td></tr>\n<tr><td><a href=\"http://quality.livecode.com/show_bug.cgi?id=22308\">22308</a></td><td>Ensure \"Search for Inclusions\" works if the script of a password-protected stack is unlocked</td></tr>\n<tr><td><a href=\"http://quality.livecode.com/show_bug.cgi?id=22322\">22322</a></td><td>Fix graphical artefacts after removing focus from a group when using acceleratedRendering on mobile</td></tr>\n<tr><td><a href=\"http://quality.livecode.com/show_bug.cgi?id=22340\">22340</a></td><td>Added a note to the URLEncode entry that non-ASCII input must have first been put through textEncode</td></tr>\n<tr><td><a href=\"http://quality.livecode.com/show_bug.cgi?id=22341\">22341</a></td><td>Added a note to the URLDecode entry that non-ASCII output must be put through textDecode</td></tr>\n<tr><td><a href=\"http://quality.livecode.com/show_bug.cgi?id=22380\">22380</a></td><td>Corrected documented list of mechanisms available to cursorMovement</td></tr>\n</table>\n# LiveCode Community extension changes\n\n## Specific extension bug fixes (9.5.1-rc-1)\n<table class=\"bugs\">\n<tr><td><a href=\"http://quality.livecode.com/show_bug.cgi?id=21822\">21822</a></td><td>Added a note mentioning that drawingSvgCompileFile() can not read from the resources folder on Android</td></tr>\n</table>\n# LiveCode Indy extension changes\n\n## Specific extension bug fixes (9.5.1-rc-1)\n<table class=\"bugs\">\n<tr><td><a href=\"http://quality.livecode.com/show_bug.cgi?id=22243\">22243</a></td><td>Fix HttpVersionNotSupported error when object names contain space</td></tr>\n<tr><td><a href=\"http://quality.livecode.com/show_bug.cgi?id=22245\">22245</a></td><td>Fix AWSS3PutBucket for default `us-east-1` region</td></tr>\n<tr><td><a href=\"http://quality.livecode.com/show_bug.cgi?id=22303\">22303</a></td><td>Correct Edition field of PDF widget dictionary entry</td></tr>\n<tr><td><a href=\"http://quality.livecode.com/show_bug.cgi?id=22312\">22312</a></td><td>Decode responses as UTF8</td></tr>\n</table>\n# Previous release notes\n* [LiveCode 9.5.0 Release Notes](https://downloads.livecode.com/livecode/9_5_0/LiveCodeNotes-9_5_0.pdf)\n* [LiveCode 9.0.5 Release Notes](https://downloads.livecode.com/livecode/9_0_5/LiveCodeNotes-9_0_5.pdf)\n* [LiveCode 9.0.4 Release Notes](https://downloads.livecode.com/livecode/9_0_4/LiveCodeNotes-9_0_4.pdf)\n* [LiveCode 9.0.3 Release Notes](https://downloads.livecode.com/livecode/9_0_3/LiveCodeNotes-9_0_3.pdf)\n* [LiveCode 9.0.2 Release Notes](https://downloads.livecode.com/livecode/9_0_2/LiveCodeNotes-9_0_2.pdf)\n* [LiveCode 9.0.1 Release Notes](https://downloads.livecode.com/livecode/9_0_1/LiveCodeNotes-9_0_1.pdf)\n* [LiveCode 9.0.0 Release Notes](https://downloads.livecode.com/livecode/9_0_0/LiveCodeNotes-9_0_0.pdf)\n* [LiveCode 8.1.9 Release Notes](https://downloads.livecode.com/livecode/8_1_9/LiveCodeNotes-8_1_9.pdf)\n* [LiveCode 8.1.8 Release Notes](https://downloads.livecode.com/livecode/8_1_8/LiveCodeNotes-8_1_8.pdf)\n* [LiveCode 8.1.7 Release Notes](https://downloads.livecode.com/livecode/8_1_7/LiveCodeNotes-8_1_7.pdf)\n* [LiveCode 8.1.6 Release Notes](https://downloads.livecode.com/livecode/8_1_6/LiveCodeNotes-8_1_6.pdf)\n* [LiveCode 8.1.5 Release Notes](https://downloads.livecode.com/livecode/8_1_5/LiveCodeNotes-8_1_5.pdf)\n* [LiveCode 8.1.4 Release Notes](https://downloads.livecode.com/livecode/8_1_4/LiveCodeNotes-8_1_4.pdf)\n* [LiveCode 8.1.3 Release Notes](https://downloads.livecode.com/livecode/8_1_3/LiveCodeNotes-8_1_3.pdf)\n* [LiveCode 8.1.2 Release Notes](https://downloads.livecode.com/livecode/8_1_2/LiveCodeNotes-8_1_2.pdf)\n* [LiveCode 8.1.10 Release Notes](https://downloads.livecode.com/livecode/8_1_10/LiveCodeNotes-8_1_10.pdf)\n* [LiveCode 8.1.1 Release Notes](https://downloads.livecode.com/livecode/8_1_1/LiveCodeNotes-8_1_1.pdf)\n* [LiveCode 8.1.0 Release Notes](https://downloads.livecode.com/livecode/8_1_0/LiveCodeNotes-8_1_0.pdf)\n* [LiveCode 8.0.2 Release Notes](https://downloads.livecode.com/livecode/8_0_2/LiveCodeNotes-8_0_2.pdf)\n* [LiveCode 8.0.1 Release Notes](https://downloads.livecode.com/livecode/8_0_1/LiveCodeNotes-8_0_1.pdf)\n* [LiveCode 8.0.0 Release Notes](https://downloads.livecode.com/livecode/8_0_0/LiveCodeNotes-8_0_0.pdf)\n* [LiveCode 7.1.4 Release Notes](https://downloads.livecode.com/livecode/7_1_4/LiveCodeNotes-7_1_4.pdf)\n* [LiveCode 7.1.3 Release Notes](https://downloads.livecode.com/livecode/7_1_3/LiveCodeNotes-7_1_3.pdf)\n* [LiveCode 7.1.2 Release Notes](https://downloads.livecode.com/livecode/7_1_2/LiveCodeNotes-7_1_2.pdf)\n* [LiveCode 7.1.1 Release Notes](https://downloads.livecode.com/livecode/7_1_1/LiveCodeNotes-7_1_1.pdf)\n* [LiveCode 7.1.0 Release Notes](https://downloads.livecode.com/livecode/7_1_0/LiveCodeNotes-7_1_0.pdf)\n* [LiveCode 7.0.6 Release Notes](https://downloads.livecode.com/livecode/7_0_6/LiveCodeNotes-7_0_6.pdf)\n* [LiveCode 7.0.4 Release Notes](https://downloads.livecode.com/livecode/7_0_4/LiveCodeNotes-7_0_4.pdf)\n* [LiveCode 7.0.3 Release Notes](https://downloads.livecode.com/livecode/7_0_3/LiveCodeNotes-7_0_3.pdf)\n* [LiveCode 7.0.1 Release Notes](https://downloads.livecode.com/livecode/7_0_1/LiveCodeNotes-7_0_1.pdf)\n* [LiveCode 7.0.0 Release Notes](https://downloads.livecode.com/livecode/7_0_0/LiveCodeNotes-7_0_0.pdf)\n* [LiveCode 6.7.9 Release Notes](https://downloads.livecode.com/livecode/6_7_9/LiveCodeNotes-6_7_9.pdf)\n* [LiveCode 6.7.8 Release Notes](https://downloads.livecode.com/livecode/6_7_8/LiveCodeNotes-6_7_8.pdf)\n* [LiveCode 6.7.7 Release Notes](https://downloads.livecode.com/livecode/6_7_7/LiveCodeNotes-6_7_7.pdf)\n* [LiveCode 6.7.6 Release Notes](https://downloads.livecode.com/livecode/6_7_6/LiveCodeNotes-6_7_6.pdf)\n* [LiveCode 6.7.4 Release Notes](https://downloads.livecode.com/livecode/6_7_4/LiveCodeNotes-6_7_4.pdf)\n* [LiveCode 6.7.2 Release Notes](https://downloads.livecode.com/livecode/6_7_2/LiveCodeNotes-6_7_2.pdf)\n* [LiveCode 6.7.11 Release Notes](https://downloads.livecode.com/livecode/6_7_11/LiveCodeNotes-6_7_11.pdf)\n* [LiveCode 6.7.10 Release Notes](https://downloads.livecode.com/livecode/6_7_10/LiveCodeNotes-6_7_10.pdf)\n* [LiveCode 6.7.1 Release Notes](https://downloads.livecode.com/livecode/6_7_1/LiveCodeNotes-6_7_1.pdf)\n* [LiveCode 6.7.0 Release Notes](https://downloads.livecode.com/livecode/6_7_0/LiveCodeNotes-6_7_0.pdf)\n* [LiveCode 6.6.5 Release Notes](https://downloads.livecode.com/livecode/6_6_5/LiveCodeNotes-6_6_5.pdf)\n* [LiveCode 6.6.4 Release Notes](https://downloads.livecode.com/livecode/6_6_4/LiveCodeNotes-6_6_4.pdf)\n* [LiveCode 6.6.3 Release Notes](https://downloads.livecode.com/livecode/6_6_3/LiveCodeNotes-6_6_3.pdf)\n* [LiveCode 6.6.2 Release Notes](https://downloads.livecode.com/livecode/6_6_2/LiveCodeNotes-6_6_2.pdf)\n* [LiveCode 6.6.1 Release Notes](https://downloads.livecode.com/livecode/6_6_1/LiveCodeNotes-6_6_1.pdf)\n* [LiveCode 6.6.0 Release Notes](https://downloads.livecode.com/livecode/6_6_0/LiveCodeNotes-6_6_0.pdf)\n* [LiveCode 6.5.2 Release Notes](https://downloads.livecode.com/livecode/6_5_2/LiveCodeNotes-6_5_2.pdf)\n* [LiveCode 6.5.1 Release Notes](https://downloads.livecode.com/livecode/6_5_1/LiveCodeNotes-6_5_1.pdf)\n* [LiveCode 6.5.0 Release Notes](https://downloads.livecode.com/livecode/6_5_0/LiveCodeNotes-6_5_0.pdf)\n* [LiveCode 6.1.3 Release Notes](https://downloads.livecode.com/livecode/6_1_3/LiveCodeNotes-6_1_3.pdf)\n* [LiveCode 6.1.2 Release Notes](https://downloads.livecode.com/livecode/6_1_2/LiveCodeNotes-6_1_2.pdf)\n* [LiveCode 6.1.1 Release Notes](https://downloads.livecode.com/livecode/6_1_1/LiveCodeNotes-6_1_1.pdf)\n* [LiveCode 6.1.0 Release Notes](https://downloads.livecode.com/livecode/6_1_0/LiveCodeNotes-6_1_0.pdf)\n* [LiveCode 6.0.2 Release Notes](https://downloads.livecode.com/livecode/6_0_2/LiveCodeNotes-6_0_2.pdf)\n* [LiveCode 6.0.1 Release Notes](https://downloads.livecode.com/livecode/6_0_1/LiveCodeNotes-6_0_1.pdf)\n* [LiveCode 6.0.0 Release Notes](https://downloads.livecode.com/livecode/6_0_0/LiveCodeNotes-6_0_0.pdf)\n"
	}