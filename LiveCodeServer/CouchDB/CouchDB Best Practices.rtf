{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;\f2\fnil\fcharset0 LucidaGrande;
\f3\fnil\fcharset0 Menlo-Regular;\f4\fnil\fcharset0 HelveticaNeue-Italic;\f5\fnil\fcharset0 Menlo-Bold;
}
{\colortbl;\red255\green255\blue255;\red27\green31\blue34;\red255\green255\blue255;\red10\green77\blue204;
\red87\green96\blue106;\red21\green23\blue26;\red244\green246\blue249;\red6\green33\blue79;\red7\green68\blue184;
\red91\green40\blue180;\red203\green35\blue57;\red218\green76\blue12;\red249\green250\blue251;\red162\green10\blue31;
\red218\green221\blue226;}
{\*\expandedcolortbl;;\cssrgb\c14118\c16078\c18039;\cssrgb\c100000\c100000\c100000;\cssrgb\c1176\c40000\c83922;
\cssrgb\c41569\c45098\c49020;\cssrgb\c10588\c12157\c13725\c5098;\cssrgb\c96471\c97255\c98039;\cssrgb\c1176\c18431\c38431;\cssrgb\c0\c36078\c77255;
\cssrgb\c43529\c25882\c75686;\cssrgb\c84314\c22745\c28627;\cssrgb\c89020\c38431\c3529;\cssrgb\c98039\c98431\c98824;\cssrgb\c70196\c11373\c15686;
\cssrgb\c88235\c89412\c90980;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid2\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid401\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid701\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid8}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}}
\margl1440\margr1440\vieww26740\viewh22420\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\b\fs64 \cf2 \cb3 \expnd0\expndtw0\kerning0
CouchDB Best Practices\
\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf2 \cb3 Collect best practices around the CouchDB universe.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf4 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Basics\cf2 \cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1\cf4 \cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9702 
\f1 	}\expnd0\expndtw0\kerning0
Reserved Properties, IDs and Revisions\cf2 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf4 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Bootstrap\cf2 \cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1\cf4 \cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9702 
\f1 	}\expnd0\expndtw0\kerning0
CouchDB Compile\cf2 \cb1 \
\ls1\ilvl1\cf4 \cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9702 
\f1 	}\expnd0\expndtw0\kerning0
Configure CouchDB\cf2 \cb1 \
\ls1\ilvl1\cf4 \cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9702 
\f1 	}\expnd0\expndtw0\kerning0
Create Databases\cf2 \cb1 \
\ls1\ilvl1\cf4 \cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9702 
\f1 	}\expnd0\expndtw0\kerning0
Secure a Database\cf2 \cb1 \
\ls1\ilvl1\cf4 \cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9702 
\f1 	}\expnd0\expndtw0\kerning0
Deploy Documents\cf2 \cb1 \
\ls1\ilvl1\cf4 \cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9702 
\f1 	}\expnd0\expndtw0\kerning0
Complete Bootstrap\cf2 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf4 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
User Management\cf2 \cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1\cf4 \cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9702 
\f1 	}\expnd0\expndtw0\kerning0
Creating Admin User\cf2 \cb1 \
\ls1\ilvl1\cf4 \cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9702 
\f1 	}\expnd0\expndtw0\kerning0
Creating User\cf2 \cb1 \
\ls1\ilvl1\cf4 \cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9702 
\f1 	}\expnd0\expndtw0\kerning0
Change Password\cf2 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf4 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Document Modelling\cf2 \cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1\cf4 \cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9702 
\f1 	}\expnd0\expndtw0\kerning0
Embrace the Document ID\cf2 \cb1 \
\ls1\ilvl1\cf4 \cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9702 
\f1 	}\expnd0\expndtw0\kerning0
Document Modeling To Avoid Conflicts\cf2 \cb1 \
\ls1\ilvl1\cf4 \cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9702 
\f1 	}\expnd0\expndtw0\kerning0
Document Validations\cf2 \cb1 \
\ls1\ilvl1\cf4 \cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9702 
\f1 	}\expnd0\expndtw0\kerning0
Data Migrations\cf2 \cb1 \
\ls1\ilvl1\cf4 \cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9702 
\f1 	}\expnd0\expndtw0\kerning0
Per Document Access Control\cf2 \cb1 \
\ls1\ilvl1\cf4 \cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9702 
\f1 	}\expnd0\expndtw0\kerning0
Useful Meta Keys\cf2 \cb1 \
\ls1\ilvl1\cf4 \cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9702 
\f1 	}\expnd0\expndtw0\kerning0
A Note on Dates\cf2 \cb1 \
\ls1\ilvl1\cf4 \cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9702 
\f1 	}\expnd0\expndtw0\kerning0
One To N Relations\cf2 \cb1 \
\ls1\ilvl1\cf4 \cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9702 
\f1 	}\expnd0\expndtw0\kerning0
N To N Relations\cf2 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf4 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Views\cf2 \cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1\cf4 \cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9702 
\f1 	}\expnd0\expndtw0\kerning0
Do Not Emit Entire Docs\cf2 \cb1 \
\ls1\ilvl1\cf4 \cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9702 
\f1 	}\expnd0\expndtw0\kerning0
Linked Documents\cf2 \cb1 \
\ls1\ilvl1\cf4 \cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9702 
\f1 	}\expnd0\expndtw0\kerning0
Built-In Reduce Functions\cf2 \cb1 \
\ls1\ilvl1\cf4 \cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9702 
\f1 	}\expnd0\expndtw0\kerning0
Debugging Views\cf2 \cb1 \
\ls1\ilvl1\cf4 \cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9702 
\f1 	}\expnd0\expndtw0\kerning0
Testing Views\cf2 \cb1 \
\ls1\ilvl1\cf4 \cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9702 
\f1 	}\expnd0\expndtw0\kerning0
Deploying Views\cf2 \cb1 \
\ls1\ilvl1\cf4 \cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9702 
\f1 	}\expnd0\expndtw0\kerning0
Modularize View Code\cf2 \cb1 \
\ls1\ilvl1\cf4 \cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9702 
\f1 	}\expnd0\expndtw0\kerning0
View Collation\cf2 \cb1 \
\ls1\ilvl1\cf4 \cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9702 
\f1 	}\expnd0\expndtw0\kerning0
Group Level\cf2 \cb1 \
\ls1\ilvl1\cf4 \cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9702 
\f1 	}\expnd0\expndtw0\kerning0
Naming Conventions For Views\cf2 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf4 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Replication\cf2 \cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1\cf4 \cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9702 
\f1 	}\expnd0\expndtw0\kerning0
Filtered Replication\cf2 \cb1 \
\ls1\ilvl1\cf4 \cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9702 
\f1 	}\expnd0\expndtw0\kerning0
Using Replication\cf2 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf4 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Conflicts\cf2 \cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1\cf4 \cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9702 
\f1 	}\expnd0\expndtw0\kerning0
Conflict Handling\cf2 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf4 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Deployment\cf2 \cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1\cf4 \cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9702 
\f1 	}\expnd0\expndtw0\kerning0
CouchDB Behind A Proxy\cf2 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf4 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Misc\cf2 \cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1\cf4 \cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9702 
\f1 	}\expnd0\expndtw0\kerning0
Debugging PouchDB\cf2 \cb1 \
\ls1\ilvl1\cf4 \cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9702 
\f1 	}\expnd0\expndtw0\kerning0
PouchDB and AngularJS\cf2 \cb1 \
\ls1\ilvl1\cf4 \cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9702 
\f1 	}\expnd0\expndtw0\kerning0
Full Text Search\cf2 \cb1 \
\ls1\ilvl1\cf4 \cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9702 
\f1 	}\expnd0\expndtw0\kerning0
Two Ways of Deleting Documents\cf2 \cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs48 \cf4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Basics\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf5 \cb3 Apache CouchDB\'99 is a database that uses JSON for documents, JavaScript for MapReduce indexes, and regular HTTP for its API.\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Website: {\field{\*\fldinst{HYPERLINK "http://couchdb.apache.org/"}}{\fldrslt \cf4 couchdb.apache.org}}\cb1 \
\cb3 Docs: {\field{\*\fldinst{HYPERLINK "http://docs.couchdb.org/en/1.6.1/"}}{\fldrslt \cf4 docs.couchdb.org}}\cb1 \
\cb3 Blog: {\field{\*\fldinst{HYPERLINK "http://blog.couchdb.org/"}}{\fldrslt \cf4 blog.couchdb.org}}\cb1 \
\cb3 Old Wiki: {\field{\*\fldinst{HYPERLINK "https://wiki.apache.org/couchdb/"}}{\fldrslt \cf4 wiki.apache.org}}\cb1 \
\cb3 New Wiki: {\field{\*\fldinst{HYPERLINK "https://cwiki.apache.org/confluence/display/COUCHDB/Apache+CouchDB+Wiki"}}{\fldrslt \cf4 cwiki.apache.org}}\cb1 \
\cb3 User List: {\field{\*\fldinst{HYPERLINK "http://mail-archives.apache.org/mod_mbox/couchdb-user/"}}{\fldrslt \cf4 user@couchdb.apache.org}}\cb1 \
\cb3 Github: {\field{\*\fldinst{HYPERLINK "https://github.com/apache/couchdb"}}{\fldrslt \cf4 apache/couchdb}}\cb1 \
\cb3 IRC: irc.freenode.net/couchdb\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs40 \cf4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Reserved Properties, IDs and Revisions\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf2 \cb3 Any top-level fields within a JSON document containing a name that starts with a 
\f3\fs28 \cb6 _
\f1\fs32 \cb3  prefix are reserved for use by CouchDB itself.\cb1 \
\cb3 If you don't specify an 
\f3\fs28 \cb6 _id
\f1\fs32 \cb3  CouchDB will create one for you. You can configure in 
\f3\fs28 \cb6 uuids/algorithm
\f1\fs32 \cb3  which algorithm will be used: 
\f3\fs28 \cb6 random
\f1\fs32 \cb3 , 
\f3\fs28 \cb6 sequential
\f1\fs32 \cb3  or 
\f3\fs28 \cb6 utc_random
\f1\fs32 \cb3 .\cb1 \
\cb3 Document revisions are used for optimistic concurrency control. If you try to update a document using an old revision the update will be in conflict. These conflicts should be resolved by your client, usually by requesting the newest version of the document, modifying and trying the update again.\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs48 \cf4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Bootstrap\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf2 \cb3 Bootstrap means in our case the preparation of the database in order to make it ready to run your project. In this process we configure CouchDB from a file which lives inside your project root, create the needed databases and deploy map functions and more, conveniently also from plain JavaScript files (or Erlang or Haskell or Ruby or whatever language you prefer for your views).\cb1 \
\cb3 In order to make this process as seemless as possible we have created {\field{\*\fldinst{HYPERLINK "https://github.com/jo/couchdb-bootstrap"}}{\fldrslt \cf4 CouchDB Bootstrap}}. You can install it with npm:\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf2 \cb7 $ npm install --global couchdb-bootstrap\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 CouchDB Bootstrap combines a set of small tools, which can be used independently. Each of those tools come has a similar API and is shipped with a CLI:\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf4 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://github.com/jo/couchdb-compile"}}{\fldrslt \expnd0\expndtw0\kerning0
couchdb-compile}}\cf2 \expnd0\expndtw0\kerning0
 - Handle sources: fs mapping / JSON / CommonJS\cb1 \
\ls2\ilvl0\cf4 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://github.com/jo/couchdb-configure"}}{\fldrslt \expnd0\expndtw0\kerning0
couchdb-configure}}\cf2 \expnd0\expndtw0\kerning0
 - Configure CouchDB\cb1 \
\ls2\ilvl0\cf4 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://github.com/jo/couchdb-ensure"}}{\fldrslt \expnd0\expndtw0\kerning0
couchdb-ensure}}\cf2 \expnd0\expndtw0\kerning0
 - Create database unless exists\cb1 \
\ls2\ilvl0\cf4 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://github.com/jo/couchdb-secure"}}{\fldrslt \expnd0\expndtw0\kerning0
couchdb-secure}}\cf2 \expnd0\expndtw0\kerning0
 - Secure databases: write security object\cb1 \
\ls2\ilvl0\cf4 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://github.com/jo/couchdb-push"}}{\fldrslt \expnd0\expndtw0\kerning0
couchdb-push}}\cf2 \expnd0\expndtw0\kerning0
 - Push documents: users, replications, design docs and normal documents\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Its best you install altogether right now:\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf2 \cb7 $ npm install --global couchdb-bootstrap couchdb-compile couchdb-configure couchdb-ensure couchdb-push couchdb-secure\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 First we setup a couchdb folder inside your project:\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf2 \cb7 couchdb\
\uc0\u9500 \u9472 \u9472  ...\
\uc0\u9492 \u9472 \u9472  ...\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 This folder is organized just like CouchDBs URLS: we have a 
\f3\fs28 \cb6 /_config.json
\f1\fs32 \cb3  file (or folder, more about that below) and 
\f3\fs28 \cb6 _users
\f1\fs32 \cb3 , 
\f3\fs28 \cb6 _replicator
\f1\fs32 \cb3  and custom databases.\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs40 \cf4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 CouchDB Compile\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf2 \cb3 When we talk about compilation we mean the transformation of a folder into a CouchDB JSON document. Map functions for example need to be stored as strings in design documents. Design documents are just like normal documents with an id that is prefixed with 
\f3\fs28 \cb6 _design/
\f1\fs32 \cb3 :\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf2 \cb7 \{\
  \cf8 "_id"\cf2 : \cf8 "_design/myapp"\cf2 ,\
  \cf8 "views"\cf2 : \{\
    \cf8 "by-date"\cf2 : \{\
      \cf8 "map"\cf2 : \cf8 "function(doc) \{ if ('date' in doc) emit(doc.date, null) \}"\cf2 \
    \}\
  \}\
\}\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 You do not want to deal with the JSON encoding and want your view functions code checked into Git as 
\f4\i files
\f1\i0 . Thats why the CouchDB Filesystem Mapping was invented. The idea is simple: every key in the JSON document corresponds to a directory if the value is an object, otherwise to a file, which contents will make the value:\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf2 \cb7 myapp\
\uc0\u9500 \u9472 \u9472  _id             \cf5 # contains `_design/myapp`\cf2 \
\uc0\u9492 \u9472 \u9472  views\
    \uc0\u9492 \u9472 \u9472  by-date\
        \uc0\u9492 \u9472 \u9472 \u9472  map.js \cf5 # contains `function(doc) \{ if ('date' in doc) emit(doc.date, null) \}`\cf2 \
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 We use {\field{\*\fldinst{HYPERLINK "https://github.com/jo/couchdb-compile"}}{\fldrslt \cf4 Couchdb Compile}} and run 
\f3\fs28 \cb6 couchdb-compile
\f1\fs32 \cb3  on this directory to get a JSON from those files:\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf2 \cb7 [myapp]$ couchdb-compile \
\{\
  \cf8 "_id"\cf2 : \cf8 "_design/myapp"\cf2 ,\
  \cf8 "views"\cf2 : \{\
    \cf8 "by-date"\cf2 : \{\
      \cf8 "map"\cf2 : \cf8 "function(doc) \{\\n  if ('date' in doc) emit(doc.date, null)\\n\}"\cf2 \
    \}\
  \}\
\}\
\pard\pardeftab720\partightenfactor0

\f0\b\fs32 \cf4 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 JSON Files\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf2 \cb3 Sometimes you don't want this excessive deep nested directory tree. You can abbreviate by using a JSON file. CouchDB Compile will use the filename as key (without the 
\f3\fs28 \cb6 .json
\f1\fs32 \cb3  extension) and take the contents of that as value. Lets place an 
\f3\fs28 \cb6 package.json
\f1\fs32 \cb3  file in the 
\f3\fs28 \cb6 myapp
\f1\fs32 \cb3  directory with the following content:\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf2 \cb7 \{\
  \cf8 "name"\cf2 : \cf8 "My Shiny Application"\cf2 ,\
  \cf8 "description"\cf2 : \cf8 "My Shiny Application helps everybody to discover your brilliancy."\cf2 \
\}\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 When we compile the 
\f3\fs28 \cb6 myapp
\f1\fs32 \cb3  directory again the 
\f3\fs28 \cb6 package.json
\f1\fs32 \cb3  file gets included:\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf2 \cb7 [myapp]$ couchdb-compile \
\{\
  \cf8 "_id"\cf2 : \cf8 "_design/myapp"\cf2 ,\
  \cf8 "views"\cf2 : \{\
    \cf8 "by-date"\cf2 : \{\
      \cf8 "map"\cf2 : \cf8 "function(doc) \{\\n  if ('date' in doc) emit(doc.date, null)\\n\}"\cf2 \
    \}\
  \},\
  \cf8 "package"\cf2 : \{\
    \cf8 "name"\cf2 : \cf8 "My Shiny Application"\cf2 ,\
    \cf8 "description"\cf2 : \cf8 "My Shiny Application helps everybody to discover your brilliancy."\cf2 \
  \}\
\}\
\pard\pardeftab720\partightenfactor0

\f0\b\fs32 \cf4 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 ID Derivation from Filename\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf2 \cb3 Thats great. You might argue about the duplicated information found both inside the id and in the filename. Thats why CouchDB Compile derives the 
\f3\fs28 \cb6 _id
\f1\fs32 \cb3  property from the filename in case the id is not included in the final JSON. So lets change our directory to look like this:\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf2 \cb7 _design\
\uc0\u9492 \u9472 \u9472  myapp\
    \uc0\u9500 \u9472 \u9472  package.json\
    \uc0\u9492 \u9472 \u9472  views\
        \uc0\u9492 \u9472 \u9472  by-date\
            \uc0\u9492 \u9472 \u9472 \u9472  map.js\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 The result is the same, but this time we have omitted the 
\f3\fs28 \cb6 _id
\f1\fs32 \cb3  file. Note that CouchDB Compile not only considers the filename but also checks the parent directory. If it is 
\f3\fs28 \cb6 _design
\f1\fs32 \cb3  or 
\f3\fs28 \cb6 _local
\f1\fs32 \cb3  and if so, prepends it, too.\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b \cf4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 CommonJS Modules (AKA Node Modules)\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf2 \cb3 I hear everybody scream:\cb1 \
\pard\pardeftab720\partightenfactor0

\f4\i \cf2 \cb3 "How can I test my view? The view code even is no valid JavaScript at all!"
\f1\i0 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 CommonJS modules to the rescue! Besides filesystem mapping and JSON CouchDB Compile also supports CommonJS modules. Consider the following files:\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf2 \cb7 _design/\
\uc0\u9492 \u9472 \u9472  myapp\
    \uc0\u9500 \u9472 \u9472  index.js\
    \uc0\u9492 \u9472 \u9472  package.json\
    \uc0\u9492 \u9472 \u9472  views\
        \uc0\u9492 \u9472 \u9472  by-date.js\
\pard\pardeftab720\partightenfactor0

\f0\b \cf4 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 _design/myapp/index.js\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf2 \cb3 Just like a normal node module we use an index.js file as an entry point to our document (you can also use an myapp.js file instead):\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf2 \cb7 exports.\cf9 package\cf2  \cf9 =\cf2  \cf10 require\cf2 (\cf8 './package.json'\cf2 )\
exports.\cf9 views\cf2  \cf9 =\cf2  \{\
  \cf8 'by-date'\cf2 : \cf10 require\cf2 (\cf8 './views/by-date'\cf2 )\
\}\
\pard\pardeftab720\partightenfactor0

\f0\b \cf4 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 _design/myapp/views/by-date.js\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf2 \cb3 Now everything is common js:\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf2 \cb7 exports.\cf10 map\cf2  \cf9 =\cf2  \cf11 function\cf2 (doc) \{\
  \cf11 if\cf2  (\cf8 'date'\cf2  \cf11 in\cf2  doc) \cf10 emit\cf2 (doc.\cf9 date\cf2 , null)\
\}\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 Again, we get the same result as before when we run 
\f3\fs28 \cb6 couchdb-compile --index
\f1\fs32 \cb3 . Remember that we need to enable this feature with the 
\f3\fs28 \cb6 --index
\f1\fs32 \cb3  flag.\cb1 \
\cb3 This is the most flexible way to structure your files and also gives us testability, because the views are now plain CommonJS modules.\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs40 \cf4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Configure CouchDB\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf2 \cb3 CouchDB not only exposes its configuration over HTTP, configuration settings can also be altered via HTTP.\cb1 \
\cb3 For example, you might want to enable CORS. For this you must change a bunch of settings. Write the following JSON to a 
\f3\fs28 \cb6 _config.json
\f1\fs32 \cb3  file (or grab it from {\field{\*\fldinst{HYPERLINK "https://github.com/jo/couchdb-cors-config"}}{\fldrslt \cf4 couchdb-cors-config}}):\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf2 \cb7 \{\
  \cf8 "httpd"\cf2 : \{\
    \cf8 "enable_cors"\cf2 : \cf9 true\cf2 \
  \},\
  \cf8 "cors"\cf2 : \{\
    \cf8 "origins"\cf2 : \cf8 "*"\cf2 ,\
    \cf8 "credentials"\cf2 : \cf9 true\cf2 ,\
    \cf8 "methods"\cf2 : [\
      \cf8 "GET"\cf2 ,\
      \cf8 "PUT"\cf2 ,\
      \cf8 "POST"\cf2 ,\
      \cf8 "HEAD"\cf2 ,\
      \cf8 "DELETE"\cf2 \
    ],\
    \cf8 "headers"\cf2 : [\
      \cf8 "accept"\cf2 ,\
      \cf8 "authorization"\cf2 ,\
      \cf8 "content-type"\cf2 ,\
      \cf8 "origin"\cf2 ,\
      \cf8 "referer"\cf2 ,\
      \cf8 "x-csrf-token"\cf2 \
    ]\
  \}\
\}\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 We can now write that configuration with {\field{\*\fldinst{HYPERLINK "https://github.com/jo/couchdb-configure"}}{\fldrslt \cf4 CouchDB Configure}}. The configuration will be used immediately - no restart required:\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf2 \cb7 $ couchdb-configure http://localhost:5984 _config.json \
\{\
  \cf8 "httpd/enable_cors"\cf2 : \{\
    \cf8 "ok"\cf2 : true,\
    \cf8 "value"\cf2 : \cf8 "true"\cf2 \
  \},\
  \cf8 "cors/origins"\cf2 : \{\
    \cf8 "ok"\cf2 : true,\
    \cf8 "value"\cf2 : \cf8 "*"\cf2 \
  \},\
  \cf8 "cors/credentials"\cf2 : \{\
    \cf8 "ok"\cf2 : true,\
    \cf8 "value"\cf2 : \cf8 "true"\cf2 \
  \},\
  \cf8 "cors/methods"\cf2 : \{\
    \cf8 "ok"\cf2 : true,\
    \cf8 "value"\cf2 : \cf8 "GET,PUT,POST,HEAD,DELETE"\cf2 \
  \},\
  \cf8 "cors/headers"\cf2 : \{\
    \cf8 "ok"\cf2 : true,\
    \cf8 "value"\cf2 : \cf8 "accept,authorization,content-type,origin,referer,x-csrf-token"\cf2 \
  \}\
\}\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 CouchDB Configure uses CouchDB Compile under the hood so you have all the options to define your configuration as files, JSON or CommonJS module.\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs40 \cf4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Create Databases\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf2 \cb3 You can create a database with {\field{\*\fldinst{HYPERLINK "https://github.com/jo/couchdb-ensure"}}{\fldrslt \cf4 CouchDB Ensure}}:\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf2 \cb7 $ couchdb-ensure http://localhost:5984/mydb\
\{\
  \cf8 "ok"\cf2 : \cf9 true\cf2 \
\}\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 If it does already exist nothing happens.\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs40 \cf4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Secure a Database\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf2 \cb3 CouchDB is 
\f4\i absolutely open by default
\f1\i0 . That means everybody can write documents (except design documents) and everybody can read every document.\cb1 \
\cb3 This can be changed on a per database basis by altering the security object:\cb1 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 The security object consists of two compulsory elements, admins and members, which are used to specify the list of users and/or roles that have admin and members rights to the database respectively:\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf5 \cb6 members
\f1\fs32 \cb3 : they can read all types of documents from the DB, and they can write (and edit) documents to the DB except for design documents.\cb1 \

\f3\fs28 \cb6 admins
\f1\fs32 \cb3 : they have all the privileges of members plus the privileges: write (and edit) design documents, add/remove database admins and members, set the database revisions limit and execute temporary views against the database. They can not create a database nor delete a database.\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 From the {\field{\*\fldinst{HYPERLINK "http://docs.couchdb.org/en/latest/api/database/security.html"}}{\fldrslt \cf4 CouchDB documentation}}.\cb1 \
\cb3 A simple security object looks like this:\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf2 \cb7 \{\
  \cf8 "admins"\cf2 : \{\
    \cf8 "names"\cf2 : [],\
    \cf8 "roles"\cf2 : []\
  \},\
  \cf8 "members"\cf2 : \{\
    \cf8 "names"\cf2 : [],\
    \cf8 "roles"\cf2 : [\
      \cf8 "myapp-user"\cf2 \
    ]\
  \}\
\}\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 Here, access is only permitted to database admins and users with the role 
\f3\fs28 \cb6 myapp-user
\f1\fs32 \cb3 .\cb1 \
\cb3 Use {\field{\*\fldinst{HYPERLINK "https://github.com/jo/couchdb-secure"}}{\fldrslt \cf4 CouchDB Secure}} to alter the security object:\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf2 \cb7 $ couchdb-secure _security.json\
\{\
  \cf8 "ok"\cf2 : \cf9 true\cf2 \
\}\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 CouchDB Secure uses CouchDB Compile under the hood so you have all the options to define your security object as files, JSON or CommonJS module.\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs40 \cf4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Deploy Documents\cb1 \
\pard\pardeftab720\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://github.com/jo/couchdb-push"}}{\fldrslt 
\f1\b0\fs32 \cf4 \cb3 CouchDB Push}}
\f1\b0\fs32 \cb3  can be used to deploy documents, be it design documents, users, replications or ordinary documents to a CouchDB database. Under the hood CouchDB Compile is used, so the everything you have learned about compilation above is also valid here.\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf2 \cb7 [myapp]$ couchdb-push http://localhost:5984/mydb\
\{\
  \cf8 "ok"\cf2 : true,\
  \cf8 "id"\cf2 : \cf8 "_design/myapp"\cf2 ,\
  \cf8 "rev"\cf2 : \cf8 "1-e2dfeb85f19c981e311144a6105d7de8"\cf2 \
\}\
\pard\pardeftab720\partightenfactor0

\f0\b\fs40 \cf4 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Complete Bootstrap\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf2 \cb3 Now you have all in place to understand {\field{\*\fldinst{HYPERLINK "https://github.com/jo/couchdb-bootstrap"}}{\fldrslt \cf4 CouchDB Bootstrap}}. While CouchDB Push acts on document level, CouchDB Bootstrap acts on the server level. Here you can organize different databases, users, replications and configuration:\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf2 \cb7 couchdb\
\uc0\u9500 \u9472 \u9472  _config.json\
\uc0\u9500 \u9472 \u9472  _replicator\
\uc0\u9474    \u9500 \u9472 \u9472  setup-alice.json\
\uc0\u9474    \u9492 \u9472 \u9472  setup-bob.json\
\uc0\u9500 \u9472 \u9472  _users\
\uc0\u9474    \u9500 \u9472 \u9472  alice.json\
\uc0\u9474    \u9492 \u9472 \u9472  bob.json\
\uc0\u9500 \u9472 \u9472  myapp-db\
\uc0\u9474    \u9500 \u9472 \u9472  _design\
\uc0\u9474    \u9474    \u9492 \u9472 \u9472  myapp.js\
\uc0\u9474    \u9500 \u9472 \u9472  _security.json\
\uc0\u9474    \u9492 \u9472 \u9472  adoc.json\
\uc0\u9500 \u9472 \u9472  myapp-alice-db\
\uc0\u9474    \u9492 \u9472 \u9472  _security.json\
\uc0\u9492 \u9472 \u9472  myapp-bob-db\
    \uc0\u9492 \u9472 \u9472  _security.json\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 The whole project can now be bootstrapped with\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf2 \cb7 [couchdb]$ couchdb-bootstrap http://localhost:5984\
\pard\pardeftab720\partightenfactor0

\f0\b\fs64 \cf4 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Admin User\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf2 \cb3 First thing to do is setup the user account\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Go to {\field{\*\fldinst{HYPERLINK "http://localhost:5984/_utils"}}{\fldrslt \cf4 http://localhost:5984/_utils/}} in your web browser\cb1 \
\ls3\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Click on 
\f3\fs28 \cb6 Setup more admins
\f1\fs32 \cb3  in the bottom right hand corner of the sidebar\cb1 \
\ls3\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Enter a username + password (this will be the root admin of your CouchDB)\cb1 \
\ls3\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Click on 
\f3\fs28 \cb6 Logout
\f1\fs32 \cb3  which is also in bottom right had corner\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Great, now you've configured your Admin User. However, you don't want to actually use this account to do things, so proceed!\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs40 \cf4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Creating User\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf2 \cb3 To create a non admin user, follow these steps:\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
While still on 
\f3\fs28 \cb6 http://localhost:5984/_utils/
\f1\fs32 \cb3  in your browser (and logged out)\cb1 \
\ls4\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Click on 
\f3\fs28 \cb6 Signup
\f1\fs32 \cb3  in the bottom right of the sidebar\cb1 \
\ls4\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Enter username + password\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs40 \cf4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Change Password\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf2 \cb3 Since CouchDB 1.2 updating the user password has become much easier:\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls5\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	1	}\expnd0\expndtw0\kerning0
Request the user doc: 
\f3\fs28 \cb6 GET /_users/org.couchdb.user:a-username
\f1\fs32 \cb1 \
\ls5\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	2	}\expnd0\expndtw0\kerning0
Set a 
\f3\fs28 \cb6 password
\f1\fs32 \cb3  property with the password\cb1 \
\ls5\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	3	}\expnd0\expndtw0\kerning0
Save the doc\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 The {\field{\*\fldinst{HYPERLINK "https://github.com/nolanlawson/pouchdb-authentication"}}{\fldrslt \cf4 User authentication plugin for PouchDB and CouchDB}} provides a {\field{\*\fldinst{HYPERLINK "https://github.com/nolanlawson/pouchdb-authentication#user-content-dbchangepasswordusername-password--opts-callback"}}{\fldrslt 
\f3\fs28 \cf4 \cb6 changePassword}} function for your convenience.\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs48 \cf4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Document Modeling\cb1 \
\pard\pardeftab720\partightenfactor0

\fs40 \cf4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Embrace the Document ID\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf2 \cb3 In CouchDB ids can be arbitrary strings. Make use of this!\cb1 \
\cb3 The id cannot be changed afterwards, instead you can move a document via COPY and DELETE.\cb1 \
\cb3 Before deciding on using a random value as doc 
\f3\fs28 \cb6 _id
\f1\fs32 \cb3 , read the section {\field{\*\fldinst{HYPERLINK "http://pouchdb.com/2014/05/01/secondary-indexes-have-landed-in-pouchdb.html"}}{\fldrslt \cf4 When not to use map reduce}}\cb1 \
\pard\pardeftab720\partightenfactor0

\f4\i \cf2 \cb3 Use domain specific document ids
\f1\i0  where possible. With CouchDB it is best practice to use meaningful ids.\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 You can use the tiny {\field{\*\fldinst{HYPERLINK "https://github.com/gr2m/to-id"}}{\fldrslt \cf4 to-id}} module to normalize names, titles and other properties for use as id.\cb1 \
\cb3 When splitting documents into different subdocuments I often include the parent document id in the id. Use {\field{\*\fldinst{HYPERLINK "https://github.com/jo/docuri/"}}{\fldrslt \cf4 docuri}} to centralize document id knowledge.\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b \cf4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 A note about 
\f5 \cb6 /
\f0 \cb3  in document ids\cb1 \
\pard\pardeftab720\partightenfactor0

\f4\i\b0 \cf2 \cb3 Slashes are totally fine in document ids
\f1\i0  and widely used. However, a specific deployment setup (nginx proxy with subdirectory rewrite) might require you to not use slashes in document ids. Thats the reason we use colons here.\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Note that you have to encode the document id, when used in an url, but you should do that anyway.\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b \cf4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Use document ids to enforce uniqueness\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf2 \cb3 The only way to enforce something is unique is to include it in the document id.\cb1 \
\cb3 For example, in the 
\f4\i _users
\f1\i0  database the username is part of the id:\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf2 \cb7 \{\
  \cf8 "_id"\cf2 : \cf8 "org.couchdb.user:jo@die-tf.de"\cf2 ,\
  \cf8 "_rev"\cf2 : \cf8 "1-64db269b26ed399733beb259d1a31304"\cf2 ,\
  \cf8 "name"\cf2 : \cf8 "jo@die-tf.de"\cf2 ,\
  \cf8 "type"\cf2 : \cf8 "user"\cf2 \
\}\
\pard\pardeftab720\partightenfactor0

\f0\b\fs40 \cf4 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Document Modeling to Avoid Conflicts\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf2 \cb3 At the moment of writing, most of our data documents are modeled as \'91one big document\'92. This is not according to CouchDB best practice. 
\f4\i Split data into many small documents
\f1\i0  depending on how often and when data changes. That way, you can avoid conflicts and conflict resolution by just appending new documents to the database. Its often a good idea to have many small documents versus less big documents. As a guideline on how to model documents 
\f4\i think about when data changes
\f1\i0 . Data that changes together, belongs in a document. Modelling documents this way a) avoids conflicts and b) keeps the number of revisions low, which improves replication performance and uses less storage.\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs40 \cf4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Document Validations\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf2 \cb3 To enforce a certain document schema use {\field{\*\fldinst{HYPERLINK "http://docs.couchdb.org/en/1.6.1/couchapp/ddocs.html#vdufun"}}{\fldrslt \cf4 Validate document update functions}}.\cb1 \
\cb3 On every document write (via PUT, POST, DELETE or 
\f3\fs28 \cb6 _bulk_docs
\f1\fs32 \cb3 ) the validation function, if present, gets called. Validation functions live in design documents in the special 
\f3\fs28 \cb6 validate_doc_update
\f1\fs32 \cb3  property. You can have many validation functions, each in different design documents. If any of the validation function throws an error, the update gets rejected and the error message gets returned to the client. Note that validation is also triggered during replication causing documents to get rejected if they do not meet criteria defined in the target database validations.\cb1 \
\cb3 An example validation, which denies document deletion for non admins, look like this:\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf11 \cb7 function\cf2 (newDoc, oldDoc, userCtx, secObj) \{\
  \cf11 if\cf2  (newDoc.\cf9 _deleted\cf2  \cf9 &&\cf2  userCtx.\cf9 roles\cf2 .\cf10 indexOf\cf2 (\cf8 '_admin'\cf2 ) \cf9 ===\cf2  \cf9 -1\cf2 ) \{\
    \cf11 throw\cf2 (\{\
      \cf9 forbidden\cf2 : \cf8 'Only admins may delete user docs.'\cf2 \
    \})\
  \}\
\}\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 The document to validate and the old document gets passed to the function, along with a {\field{\*\fldinst{HYPERLINK "http://docs.couchdb.org/en/1.6.1/json-structure.html#userctx-object"}}{\fldrslt \cf4 User Context Object}} and {\field{\*\fldinst{HYPERLINK "http://docs.couchdb.org/en/1.6.1/json-structure.html#security-object"}}{\fldrslt \cf4 Security Object}}\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs40 \cf4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Data Migrations\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf2 \cb3 Use {\field{\*\fldinst{HYPERLINK "https://github.com/jo/pouchdb-migrate"}}{\fldrslt \cf4 pouchdb-migrate}}, a PouchDB plugin to help with migrations.\cb1 \
\cb3 You can either run migration on startup (the plugin remembers if a replication has already been run, so the extra cost on startup is getting a single local document) or you can setup a daemon on the server.\cb1 \
\cb3 Its also possible to run a migration manually from a dev computer.\cb1 \
\cb3 Please take care of your migration function. It 
\f4\i must
\f1\i0  recognize whether a doc already has been migrated, otherwise the migration is caught in a loop!\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs40 \cf4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Per Document Access Control\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf2 \cb3 There is no way to {\field{\*\fldinst{HYPERLINK "https://wiki.apache.org/couchdb/PerDocumentAuthorization"}}{\fldrslt \cf4 control access on a per document level}}.\cb1 \
\cb3 A common solution is to have a database per user.\cb1 \
\cb3 To create the dbs, you need to install a daemon. There are different projects:\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0\cf4 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://github.com/etrepum/couchperuser"}}{\fldrslt \expnd0\expndtw0\kerning0
couchperuser}}\cf2 \expnd0\expndtw0\kerning0
 (Erlang, donated to Apache CouchDB)\cb1 \
\ls6\ilvl0\cf4 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://github.com/pegli/couchdb-dbperuser-provisioning"}}{\fldrslt \expnd0\expndtw0\kerning0
couchdb-dbperuser-provisioning}}\cf2 \expnd0\expndtw0\kerning0
 (Node)\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 An other way to achive per document access control, even on a per field basis, is to use encryption. {\field{\*\fldinst{HYPERLINK "https://github.com/calvinmetcalf/crypto-pouch"}}{\fldrslt \cf4 crypto-pouch}} and {\field{\*\fldinst{HYPERLINK "https://github.com/jo/pouch-box"}}{\fldrslt \cf4 pouch-box}} might help.\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs40 \cf4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Useful Meta Keys\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf2 \cb3 In documents some information is generally useful. Rails, for example, inserts timestamps per default.:\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls7\ilvl0
\f3\fs28 \cf2 \cb6 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
created_at
\f1\fs32 \cb3 : Date of creation\cb1 \
\ls7\ilvl0
\f3\fs28 \cb6 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
updated_at
\f1\fs32 \cb3 : Date of last update\cb1 \
\ls7\ilvl0
\f3\fs28 \cb6 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
created_by
\f1\fs32 \cb3 : Username of creator\cb1 \
\ls7\ilvl0
\f3\fs28 \cb6 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
updated_by
\f1\fs32 \cb3 : Username of last updater\cb1 \
\ls7\ilvl0
\f3\fs28 \cb6 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
type
\f1\fs32 \cb3 : Document type\cb1 \
\ls7\ilvl0
\f3\fs28 \cb6 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
version
\f1\fs32 \cb3 : Document schema version\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 You can add validations, which takes care that those fields are set. Nonetheless you cannot guarantee that dates are correct - just that they are in the right format.\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs40 \cf4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 A Note on Dates\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf2 \cb3 When saving dates, just store them as {\field{\*\fldinst{HYPERLINK "http://en.wikipedia.org/wiki/ISO_8601"}}{\fldrslt \cf4 ISO 8601}} strings, created by 
\f3\fs28 \cb6 .toISOString()
\f1\fs32 \cb3  as well as by 
\f3\fs28 \cb6 JSON.stringify()
\f1\fs32 \cb3 . That way the dates can be easily consumed by 
\f3\fs28 \cb6 new Date
\f1\fs32 \cb3  or, who prefers, parsed by 
\f3\fs28 \cb6 Date.parse()
\f1\fs32 \cb3 :\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf11 \cb7 var\cf2  date \cf9 =\cf2  \cf11 new\cf2  \cf12 Date\cf2 ()\
\pard\pardeftab720\partightenfactor0
\cf5 // Mon May 18 2015 16:50:52 GMT+0200 (CEST)\cf2 \
\pard\pardeftab720\partightenfactor0
\cf11 var\cf2  datestring \cf9 =\cf2  date.\cf10 toJSON\cf2 ()\
\pard\pardeftab720\partightenfactor0
\cf5 // '2015-05-18T14:50:52.018Z'\cf2 \
\pard\pardeftab720\partightenfactor0
\cf11 new\cf2  \cf12 Date\cf2 (datestring)\
\pard\pardeftab720\partightenfactor0
\cf5 // Mon May 18 2015 16:50:52 GMT+0200 (CEST)\cf2 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs40 \cf4 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 One To N Relations\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf2 \cb3 Of course you can just use an array inside the document to store related data. This has a downside when the related data has to be updated, because conflicts can be created and this also introduces growing revisions which affects replication performance.\cb1 \
\cb3 Its best to store related data in an extra document. You can use the id to link the documents together. That way you don't even need a view to fetch them together.\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf2 \cb7 \{\
  \cf8 "_id"\cf2 : \cf8 "artist:tom-waits"\cf2 ,\
  \cf8 "name"\cf2 : \cf8 "Tom Waits"\cf2 \
\}\
[\
  \{\
    \cf8 "_id"\cf2 : \cf8 "artist:tom-waits:album:closing-time"\cf2 ,\
    \cf8 "title"\cf2 : \cf8 "Closing Time"\cf2 \
  \}\
  \{\
    \cf8 "_id"\cf2 : \cf8 "artist:tom-waits:album:rain-dogs"\cf2 ,\
    \cf8 "title"\cf2 : \cf8 "Rain Dogs"\cf2 \
  \}\
  \{\
    \cf8 "_id"\cf2 : \cf8 "artist:tom-waits:album:real-gone"\cf2 ,\
    \cf8 "title"\cf2 : \cf8 "Real Gone"\cf2 \
  \}\
]\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 Now you can use the built-in 
\f3\fs28 \cb6 _all_docs
\f1\fs32 \cb3  view to query the artist and all of its albums together, using start- and endkey:\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf2 \cb7 \{\
  \cf8 "include_docs"\cf2 : \cf9 true\cf2 ,\
  \cf8 "startkey"\cf2 : \cf8 "artist:tom-waits"\cf2 ,\
  \cf8 "endkey"\cf2 : \cf8 "artist:tom-waits:\\ufff0"\cf2 \
\}\
\pard\pardeftab720\partightenfactor0

\f0\b\fs40 \cf4 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 N To N Relations\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf2 \cb3 Similar to 1:N relations but use extra documents which describes each relation:\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf2 \cb7 [\
  \{\
    \cf8 "_id"\cf2 : \cf8 "person:avery-mcdonalid"\cf2 ,\
    \cf8 "name"\cf2 : \cf8 "Avery Mcdonalid"\cf2 \
  \},\
  \{\
    \cf8 "_id"\cf2 : \cf8 "person:troy-howell"\cf2 ,\
    \cf8 "name"\cf2 : \cf8 "Troy Howell"\cf2 \
  \},\
  \{\
    \cf8 "_id"\cf2 : \cf8 "person:tonya-payne"\cf2 ,\
    \cf8 "name"\cf2 : \cf8 "Tonya Payne"\cf2 \
  \}\
]\
[\
  \{\
    \cf8 "_id"\cf2 : \cf8 "friendship:person:avery-mcdonalid:with:person:troy-howell"\cf2 ,\
    \cf8 "since"\cf2 : \cf8 "2015-05-13T08:57:53.786Z"\cf2 \
  \},\
  \{\
    \cf8 "_id"\cf2 : \cf8 "friendship:person:avery-mcdonalid:with:person:tonya-payne"\cf2 ,\
    \cf8 "since"\cf2 : \cf8 "2015-03-02T07:21:01.123Z"\cf2 \
  \}\
]\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 Note how we used a deterministic order of friends in the id, we just sorted them alphabetically. Its important to be able to derivate the friendship document id from the constituting ids to make it easy to delete a relation.\cb1 \
\cb3 Now write a map function like this:\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf11 \cb7 function\cf2 (doc) \{\
  \cf11 if\cf2  (!doc.\cf9 _id\cf2 .\cf10 match\cf2 (\cf8 /^friendship:/\cf2 )) \cf11 return\cf2 \
  \
  \cf11 var\cf2  ids \cf9 =\cf2  doc.\cf9 _id\cf2 .\cf10 match\cf2 (\cf8 /person:[^:]\cf9 *\cf8 /g\cf2 )\
  \cf11 var\cf2  one \cf9 =\cf2  ids[\cf9 0\cf2 ]\
  \cf11 var\cf2  two \cf9 =\cf2  ids[\cf9 1\cf2 ]\
\
  \cf10 emit\cf2 ([one, two], \{ \cf9 _id\cf2 : two \})\
  \cf10 emit\cf2 ([two, one], \{ \cf9 _id\cf2 : one \})\
\}\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 You now can query the view for one person:\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf2 \cb7 \{\
  \cf8 "include_docs"\cf2 : \cf9 true\cf2 ,\
  \cf8 "startkey"\cf2 : [\cf8 "person:avery-mcdonalid"\cf2 ],\
  \cf8 "endkey"\cf2 : [\cf8 "person:avery-mcdonalid"\cf2 , \{\}]\
\}\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 and get all friends of that person:\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf2 \cb7 \{\
  \cf8 "total_rows"\cf2  : \cf9 4\cf2 ,\
  \cf8 "rows"\cf2  : [\
    \{\
      \cf8 "doc"\cf2  : \{\
        \cf8 "name"\cf2  : \cf8 "Tonya Payne"\cf2 ,\
        \cf8 "_rev"\cf2  : \cf8 "1-7aafe790e8f4f00220c699e966246421"\cf2 ,\
        \cf8 "_id"\cf2  : \cf8 "person:tonya-payne"\cf2 \
      \},\
      \cf8 "value"\cf2  : \{\
        \cf8 "_id"\cf2  : \cf8 "person:tonya-payne"\cf2 \
      \},\
      \cf8 "id"\cf2  : \cf8 "friendship:person:avery-mcdonalid:with:person:tonya-payne"\cf2 ,\
      \cf8 "key"\cf2  : [\
        \cf8 "person:avery-mcdonalid"\cf2 ,\
        \cf8 "person:tonya-payne"\cf2 \
      ]\
    \},\
    \{\
      \cf8 "value"\cf2  : \{\
        \cf8 "_id"\cf2  : \cf8 "person:troy-howell"\cf2 \
      \},\
      \cf8 "doc"\cf2  : \{\
        \cf8 "_rev"\cf2  : \cf8 "1-7e0328a9eb72a5544663c30052c67161"\cf2 ,\
        \cf8 "_id"\cf2  : \cf8 "person:troy-howell"\cf2 ,\
        \cf8 "name"\cf2  : \cf8 "Troy Howell"\cf2 \
      \},\
      \cf8 "key"\cf2  : [\
        \cf8 "person:avery-mcdonalid"\cf2 ,\
        \cf8 "person:troy-howell"\cf2 \
      ],\
      \cf8 "id"\cf2  : \cf8 "friendship:person:avery-mcdonalid:with:person:troy-howell"\cf2 \
    \}\
  ],\
  \cf8 "offset"\cf2  : \cf9 0\cf2 \
\}\
\pard\pardeftab720\partightenfactor0

\f0\b\fs48 \cf4 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Views\cb1 \
\pard\pardeftab720\partightenfactor0

\fs40 \cf4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Do Not Emit Entire Docs\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf2 \cb3 You can query a view with 
\f3\fs28 \cb6 include_docs=true
\f1\fs32 \cb3 . Then in the view result every row has the whole doc included:\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf2 \cb7 \{\
  \cf8 "rows"\cf2 : [\
    \{\
      \cf8 "id"\cf2 : \cf8 "mydoc"\cf2 ,\
      \cf8 "key"\cf2 : \cf8 "mydoc"\cf2 ,\
      \cf8 "value"\cf2 : \cf9 null\cf2 ,\
      \cf8 "doc"\cf2 : \{\
        \cf8 "_id"\cf2 : \cf8 "mydoc"\cf2 ,\
        \cf8 "_rev"\cf2 : \cf8 "1-asd"\cf2 ,\
        \cf8 "foo"\cf2 : \cf8 "bar"\cf2 \
      \}\
    \}\
  ]\
\}\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 This has no disadvantages performance wise, at least on PouchDB. For CouchDB it means additional lookups and prevents CouchDB from directly streaming the view result from disk. But this is negligible. So don't emit the whole doc unless you need the last bit of performance.\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs40 \cf4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Linked Documents\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf2 \cb3 Or How do I do SQL-like JOINs? Can I avoid them?\cb1 \
\cb3 CouchDB (and PouchDB) supports {\field{\*\fldinst{HYPERLINK "https://wiki.apache.org/couchdb/Introduction_to_CouchDB_views#Linked_documents"}}{\fldrslt \cf4 linked documents}}. Use them to join two types of documents together, by simply adding an 
\f3\fs28 \cb6 _id
\f1\fs32 \cb3  to the emitted value in the map function :\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf5 \cb7 // join artist data to albums\cf2 \
\pard\pardeftab720\partightenfactor0
\cf11 function\cf2 (doc) \{\
  \cf11 if\cf2  (doc.\cf9 _id\cf2 .\cf10 match\cf2 (\cf8 '^album:*'\cf2 )) \{\
    \cf10 emit\cf2 (doc.\cf9 _id\cf2 , null);\
    \cf10 emit\cf2 (doc.\cf9 _id\cf2 , \{ \cf8 '_id'\cf2  : doc.\cf9 artistId\cf2  \});\
  \}\
\}\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 When you query the view with the id of an album:\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf2 \cb7 \{\
  \cf8 "include_docs"\cf2 : \cf9 true\cf2 ,\
  \cf8 "key"\cf2 : \cf8 "album:hunkydory"\cf2 \
\}\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 And this is a result:\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf2 \cb7 \{\
  \cf8 "rows"\cf2 : [\
    \{\
      \cf8 "doc"\cf2 : \{\
        \cf8 "_id"\cf2 : \cf8 "album:hunkydory"\cf2 ,\
        \cf8 "title"\cf2 : \cf8 "Hunky Dory"\cf2 ,\
        \cf8 "year"\cf2 : \cf9 1971\cf2 ,\
        \cf8 "artistId"\cf2 : \cf8 "artist:david-bowie"\cf2 \
      \},\
      \cf8 "id"\cf2 : \cf8 "album:hunkydory"\cf2 ,\
      \cf8 "key"\cf2 : \cf8 "album:hunkydory"\cf2 \
    \}\
    \{\
      \cf8 "doc"\cf2 : \{\
        \cf8 "_id"\cf2 : \cf8 "artist:david-bowie"\cf2 ,\
        \cf8 "firstName"\cf2 : \cf8 "David"\cf2 ,\
        \cf8 "lastName"\cf2 : \cf8 "Bowie"\cf2 \
      \},\
      \cf8 "id"\cf2 : \cf8 "artist:david-bowie"\cf2 ,\
      \cf8 "key"\cf2 : \cf8 "album:hunkydory"\cf2 ,\
      \cf8 "value"\cf2 : \{\
        \cf8 "_id"\cf2 : \cf8 "artist:david-bowie"\cf2 \
      \}\
    \}\
  ]\
\}\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 Using linked documents can be a way to group together related data.\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs40 \cf4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Built-In Reduce Functions\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf2 \cb3 CouchDB has some built in reduce functions to accomplish common tasks. They are native and very performant. Choose them wherever possible. To use a built in reduce, insert the name string instead of the function code, eg\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf2 \cb7 \{\
  \cf8 "views"\cf2 : \{\
    \cf8 "myview"\cf2 : \{\
      \cf8 "map"\cf2 : \cf8 "function(doc) \{ emit(doc._id, 1) \}"\cf2 ,\
      \cf8 "reduce"\cf2 : \cf8 "_stats"\cf2 \
    \}\
  \}\
\}\
\pard\pardeftab720\partightenfactor0

\f0\b\fs32 \cf4 \cb1 \
\pard\pardeftab720\partightenfactor0

\f5 \cf2 \cb6 _sum
\f0 \cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf2 \cb3 Adds up the emitted values, which must be numbers.\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b \cf4 \
\pard\pardeftab720\partightenfactor0

\f5 \cf2 \cb6 _count
\f0 \cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf2 \cb3 Counts the number of emitted values.\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b \cf4 \
\pard\pardeftab720\partightenfactor0

\f5 \cf2 \cb6 _stats
\f0 \cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf2 \cb3 Calculates some numerical statistics on your emitted values, which must be numbers. For example:\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf2 \cb7 \{\
  \cf8 "sum"\cf2 : \cf9 80\cf2 ,\
  \cf8 "count"\cf2 : \cf9 20\cf2 ,\
  \cf8 "min"\cf2 : \cf9 1\cf2 ,\
  \cf8 "max"\cf2 : \cf9 100\cf2 ,\
  \cf8 "sumsqr"\cf2 : \cf9 30\cf2 \
\}\
\pard\pardeftab720\partightenfactor0

\f0\b\fs40 \cf4 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Debugging Views\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf2 \cb3 View debugging can be a pain when you're restricted to Futon or even Fauxton. By using {\field{\*\fldinst{HYPERLINK "https://github.com/gr2m/couchdb-view-tester"}}{\fldrslt \cf4 couchdb-view-tester}} you can write view code in your preferred editor and watch the results in real time.\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs40 \cf4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Testing Views\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf2 \cb3 Use {\field{\*\fldinst{HYPERLINK "https://github.com/jo/couchdb-ddoc-test"}}{\fldrslt \cf4 couchdb-ddoc-test}}, a simple CouchDB design doc testing tool.\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf11 \cb7 var\cf2  \cf12 DDocTest\cf2  \cf9 =\cf2  \cf10 require\cf2 (\cf8 'couchdb-ddoc-test'\cf2 )\
\cf11 var\cf2  test \cf9 =\cf2  \cf11 new\cf2  \cf12 DDocTest\cf2 (\{\
    \cf9 fixture\cf2 : \{\cf9 a\cf2 : \cf9 1\cf2 \},\
      \cf9 src\cf2 : \cf8 'path/to/map.js'\cf2 \
\})\
\cf11 var\cf2  result \cf9 =\cf2  test.\cf10 runMap\cf2 ()\
\
assert.\cf10 equals\cf2 (result, fixture)\
\pard\pardeftab720\partightenfactor0

\f0\b\fs40 \cf4 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Deploying Views\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf2 \cb3 You want to keep your view code in VCS. Now you need a way to install the view function. You can use the {\field{\*\fldinst{HYPERLINK "https://github.com/couchapp/couchapp"}}{\fldrslt \cf4 Python Couchapp Tool}}. Its a CLI which reads a directory, compiles documents from it and saves the documents in a CouchDB. Since this is a common task a quasi standard for the directory layout has been emerged, which is supported by a range of compatible tools. For integration in JavaScript projects using a tool written in JavaScript avoids additional dependencies. I wrote {\field{\*\fldinst{HYPERLINK "https://github.com/jo/couch-compile"}}{\fldrslt \cf4 couch-compile}} for that purpose. It reads a directory, JSON file or node module and converts it into a CouchDB document, which can be deployed to a CouchDB database with {\field{\*\fldinst{HYPERLINK "https://github.com/jo/couch-push"}}{\fldrslt \cf4 couch-push}}. There is also a handy Grunt task, {\field{\*\fldinst{HYPERLINK "https://github.com/jo/grunt-couch"}}{\fldrslt \cf4 grunt-couch}} which integrates both projects into the Grunt toolchain.\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs40 \cf4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Modularize View Code\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf2 \cb3 While you work with views at some point you might want to share code between views or simply break your code into smaller modules. For that purpose CouchDB has {\field{\*\fldinst{HYPERLINK "http://docs.couchdb.org/en/1.6.1/query-server/javascript.html?highlight=commonjs#commonjs-modules"}}{\fldrslt \cf4 support for CommonJS modules}}, which you know from node. CouchDB implements {\field{\*\fldinst{HYPERLINK "http://wiki.commonjs.org/wiki/Modules/1.1.1"}}{\fldrslt \cf4 CommonJS 1.1.1}}.\cb1 \
\cb3 Take this example:\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf11 \cb7 var\cf2  \cf10 person\cf2  \cf9 =\cf2  \cf11 function\cf2 (doc) \{\
  \cf11 if\cf2  (!doc.\cf9 _id\cf2 .\cf10 match\cf2 (\cf8 /^person:/\cf2 )) \cf11 return\cf2 \
  \cf11 return\cf2  \{\
    \cf9 name\cf2 : doc.\cf9 firstname\cf2  \cf9 +\cf2  \cf8 ' '\cf2  \cf9 +\cf2  doc.\cf9 lastname\cf2 ,\
    \cf9 createdAt\cf2 : \cf11 new\cf2  \cf12 Date\cf2 (doc.\cf9 created_at\cf2 )\
  \}\
\}\
\
\cf11 var\cf2  ddoc \cf9 =\cf2  \{\
  \cf9 _id\cf2 : \cf8 '_design/person'\cf2 ,\
  \cf9 views\cf2 : \{\
    \cf9 lib\cf2 : \{\
      \cf9 person\cf2 : \cf8 "module.exports = "\cf2  \cf9 +\cf2  \cf10 person\cf2 .\cf10 toString\cf2 ()\
    \},\
    \cf8 'people-by-name'\cf2 : \{\
      \cf9 map\cf2 : \cf11 function\cf2 (doc) \{\
        \cf11 var\cf2  person \cf9 =\cf2  \cf10 require\cf2 (\cf8 'views/lib/person'\cf2 )(doc)\
        \cf11 if\cf2  (!person) \cf11 return\cf2 \
        \cf10 emit\cf2 (person.\cf9 name\cf2 , null)\
      \}.\cf10 toString\cf2 (),\
      \cf9 reduce\cf2 : \cf8 '_count'\cf2 \
    \},\
    \cf8 'people-by-created-at'\cf2 : \{\
      \cf9 map\cf2 : \cf11 function\cf2 (doc) \{\
        \cf11 var\cf2  person \cf9 =\cf2  \cf10 require\cf2 (\cf8 'views/lib/person'\cf2 )(doc)\
        \cf11 if\cf2  (!person) \cf11 return\cf2 \
        \cf10 emit\cf2 (person.\cf9 createdAt\cf2 .\cf10 getTime\cf2 (), null)\
      \}.\cf10 toString\cf2 (),\
      \cf9 reduce\cf2 : \cf8 '_count'\cf2 \
    \}\
  \}\
\}\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 CommonJS modules can also be used for shows, lists and validate_doc_update functions. Note that the 
\f3\fs28 \cb6 person
\f1\fs32 \cb3  module is inside the 
\f3\fs28 \cb6 views
\f1\fs32 \cb3  object. This is needed for CouchDB in order to detect changes on the view code. Reduce functions 
\f4\i can NOT
\f1\i0  use modules.\cb1 \
\cb3 Read more about {\field{\*\fldinst{HYPERLINK "http://caolanmcmahon.com/posts/commonjs_modules_in_couchdb/"}}{\fldrslt \cf4 CommonJS modules in CouchDB}}.\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs40 \cf4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 View Collation\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf2 \cb3 View Collation basically just means the concept to query data by ranges, thus using 
\f3\fs28 \cb6 startkey
\f1\fs32 \cb3  and 
\f3\fs28 \cb6 endkey
\f1\fs32 \cb3 . In CouchDB keys does not necessarily be strings, they can be arbitrary JSON values. If thats the case we talk about 
\f4\i complex keys
\f1\i0 .\cb1 \
\cb3 Making use of View Collation enables us to query related documents together. Its the CouchDB way of doing 
\f4\i joins
\f1\i0 . See \cf4 Linked Documents\cf2 .\cb1 \
\cb3 Complex Keys order in the following matter:\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls8\ilvl0
\f3\fs28 \cf2 \cb6 \kerning1\expnd0\expndtw0 {\listtext	1	}\expnd0\expndtw0\kerning0
null
\f1\fs32 \cb3 , 
\f3\fs28 \cb6 false
\f1\fs32 \cb3 , 
\f3\fs28 \cb6 true
\f1\fs32 \cb1 \
\ls8\ilvl0
\f3\fs28 \cb6 \kerning1\expnd0\expndtw0 {\listtext	2	}\expnd0\expndtw0\kerning0
1
\f1\fs32 \cb3 , 
\f3\fs28 \cb6 2
\f1\fs32 \cb3 ...\cb1 \
\ls8\ilvl0
\f3\fs28 \cb6 \kerning1\expnd0\expndtw0 {\listtext	3	}\expnd0\expndtw0\kerning0
a
\f1\fs32 \cb3 , 
\f3\fs28 \cb6 A
\f1\fs32 \cb3 , 
\f3\fs28 \cb6 b
\f1\fs32 \cb3 ...
\f3\fs28 \cb6 \\ufff0
\f1\fs32 \cb1 \
\ls8\ilvl0
\f3\fs28 \cb6 \kerning1\expnd0\expndtw0 {\listtext	4	}\expnd0\expndtw0\kerning0
["a"]
\f1\fs32 \cb3 , 
\f3\fs28 \cb6 ["b"]
\f1\fs32 \cb3 , 
\f3\fs28 \cb6 ["b","c"]
\f1\fs32 \cb1 \
\ls8\ilvl0
\f3\fs28 \cb6 \kerning1\expnd0\expndtw0 {\listtext	5	}\expnd0\expndtw0\kerning0
\{\}
\f1\fs32 \cb3 , 
\f3\fs28 \cb6 \{a:1\}
\f1\fs32 \cb3 , 
\f3\fs28 \cb6 \{a:2\}
\f1\fs32 \cb3 , 
\f3\fs28 \cb6 \{b:1\}
\f1\fs32 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Read more about this topic in {\field{\*\fldinst{HYPERLINK "http://www.cmlenz.net/archives/2007/10/couchdb-joins"}}{\fldrslt \cf4 CouchDB "Joins"}} by Christopher Lenz and in the {\field{\*\fldinst{HYPERLINK "https://docs.couchdb.org/en/latest/couchapp/views/collation.html"}}{\fldrslt \cf4 CouchDB docs about View Collation}}\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs40 \cf4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Group Level\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf2 \cb3 Consider the follwing documents\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf2 \cb7 [\
  \{ \cf8 "_id"\cf2 : \cf8 "1"\cf2 , \cf8 "date"\cf2 : \cf8 "2014-05-01T00:00:00.000Z"\cf2 , \cf8 "temperature"\cf2 : \cf9 -10.00\cf2  \},\
  \{ \cf8 "_id"\cf2 : \cf8 "2"\cf2 , \cf8 "date"\cf2 : \cf8 "2015-01-01T00:00:00.000Z"\cf2 , \cf8 "temperature"\cf2 :  \cf9 -7.00\cf2  \},\
  \{ \cf8 "_id"\cf2 : \cf8 "3"\cf2 , \cf8 "date"\cf2 : \cf8 "2015-02-01T00:00:00.000Z"\cf2 , \cf8 "temperature"\cf2 :  \cf9 10.00\cf2  \},\
  \{ \cf8 "_id"\cf2 : \cf8 "4"\cf2 , \cf8 "date"\cf2 : \cf8 "2015-02-02T00:00:00.000Z"\cf2 , \cf8 "temperature"\cf2 :  \cf9 11.00\cf2  \},\
  \{ \cf8 "_id"\cf2 : \cf8 "5"\cf2 , \cf8 "date"\cf2 : \cf8 "2015-02-02T01:00:00.000Z"\cf2 , \cf8 "temperature"\cf2 :  \cf9 12.00\cf2  \},\
  \{ \cf8 "_id"\cf2 : \cf8 "6"\cf2 , \cf8 "date"\cf2 : \cf8 "2015-02-02T01:01:00.000Z"\cf2 , \cf8 "temperature"\cf2 :  \cf9 12.20\cf2  \},\
  \{ \cf8 "_id"\cf2 : \cf8 "7"\cf2 , \cf8 "date"\cf2 : \cf8 "2015-02-02T01:01:01.000Z"\cf2 , \cf8 "temperature"\cf2 :  \cf9 12.21\cf2  \}\
]\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 And the map function:\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf11 \cb7 function\cf2 (doc) \{\
  \cf11 var\cf2  date \cf9 =\cf2  \cf11 new\cf2  \cf12 Date\cf2 (doc.\cf9 date\cf2 )\
\
  \cf10 emit\cf2 ([\
    date.\cf10 getFullYear\cf2 (),\
    date.\cf10 getMonth\cf2 (),\
    date.\cf10 getDay\cf2 (),\
    date.\cf10 getHours\cf2 (),\
    date.\cf10 getMinutes\cf2 (),\
    date.\cf10 getSeconds\cf2 ()\
  ], doc.\cf9 temperature\cf2 )\
\}\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 And the build in reduce function 
\f3\fs28 \cb6 _stats
\f1\fs32 \cb3 .\cb1 \
\cb3 When you not query the view you get the stats over all entries:\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf2 \cb7 \{\
  \cf8 "rows"\cf2  : [\
    \{\
      \cf8 "value"\cf2  : \{\
        \cf8 "max"\cf2  : \cf9 12.21\cf2 ,\
        \cf8 "sumsqr"\cf2  : \cf9 811.9241\cf2 ,\
        \cf8 "count"\cf2  : \cf9 7\cf2 ,\
        \cf8 "sum"\cf2  : \cf9 40.41\cf2 ,\
        \cf8 "min"\cf2  : \cf9 -10\cf2 \
      \},\
      \cf8 "key"\cf2  : \cf9 null\cf2 \
    \}\
  ]\
\}\
\pard\pardeftab720\partightenfactor0
\cf2 \cb6 group_level=1
\f1\fs32 \cb3  gives you\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf2 \cb7 \{\
   \cf8 "rows"\cf2  : [\
      \{\
         \cf8 "key"\cf2  : [\
            \cf9 2014\cf2 \
         ],\
         \cf8 "value"\cf2  : \{\
            \cf8 "sumsqr"\cf2  : \cf9 100\cf2 ,\
            \cf8 "count"\cf2  : \cf9 1\cf2 ,\
            \cf8 "max"\cf2  : \cf9 -10\cf2 ,\
            \cf8 "min"\cf2  : \cf9 -10\cf2 ,\
            \cf8 "sum"\cf2  : \cf9 -10\cf2 \
         \}\
      \},\
      \{\
         \cf8 "key"\cf2  : [\
            \cf9 2015\cf2 \
         ],\
         \cf8 "value"\cf2  : \{\
            \cf8 "count"\cf2  : \cf9 6\cf2 ,\
            \cf8 "sumsqr"\cf2  : \cf9 711.9241\cf2 ,\
            \cf8 "min"\cf2  : \cf9 -7\cf2 ,\
            \cf8 "max"\cf2  : \cf9 12.21\cf2 ,\
            \cf8 "sum"\cf2  : \cf9 50.41\cf2 \
         \}\
      \}\
   ]\
\}\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 Upto 
\f3\fs28 \cb6 group_level=7
\f1\fs32 \cb3  (which is the same as 
\f3\fs28 \cb6 group=true
\f1\fs32 \cb3 )\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf2 \cb7 \{\
   \cf8 "rows"\cf2  : [\
      \{\
         \cf8 "key"\cf2  : [\
            \cf9 2014\cf2 ,\
            \cf9 4\cf2 ,\
            \cf9 4\cf2 ,\
            \cf9 2\cf2 ,\
            \cf9 0\cf2 ,\
            \cf9 0\cf2 \
         ],\
         \cf8 "value"\cf2  : \{\
            \cf8 "max"\cf2  : \cf9 -10\cf2 ,\
            \cf8 "count"\cf2  : \cf9 1\cf2 ,\
            \cf8 "sum"\cf2  : \cf9 -10\cf2 ,\
            \cf8 "min"\cf2  : \cf9 -10\cf2 ,\
            \cf8 "sumsqr"\cf2  : \cf9 100\cf2 \
         \}\
      \},\
      \cf13 \cb14 ...\cf2 \cb7 \
      \{\
         \cf8 "value"\cf2  : \{\
            \cf8 "min"\cf2  : \cf9 12.21\cf2 ,\
            \cf8 "sum"\cf2  : \cf9 12.21\cf2 ,\
            \cf8 "sumsqr"\cf2  : \cf9 149.0841\cf2 ,\
            \cf8 "max"\cf2  : \cf9 12.21\cf2 ,\
            \cf8 "count"\cf2  : \cf9 1\cf2 \
         \},\
         \cf8 "key"\cf2  : [\
            \cf9 2015\cf2 ,\
            \cf9 1\cf2 ,\
            \cf9 1\cf2 ,\
            \cf9 2\cf2 ,\
            \cf9 1\cf2 ,\
            \cf9 1\cf2 \
         ]\
      \}\
   ]\
\}\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 Combining this with key or range queries you can get all sort of fine grained stats.\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs40 \cf4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Naming Conventions For Views\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf2 \cb3 Naming convention for views, starting from the basic case of no reduce functions. Views are couples of arbitrary functions, and as such it is impossible to express their whole variety with a name, so I am just trying to cover the most common cases.\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b \cf4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 No Reduce\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf2 \cb3 In the case of no reduce function, usually views are just meant to sort documents by a set of properties. An idea in this case is to name them like this:\cb1 \
\cb3 The main grouping parameter for the name is the \'93object\'94 as it (roughly) exists in the application space. For example: 
\f3\fs28 \cb6 person
\f1\fs32 \cb3 , 
\f3\fs28 \cb6 contact
\f1\fs32 \cb3 , 
\f3\fs28 \cb6 address
\f1\fs32 \cb3  etc.:\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf2 \cb7 <object>-\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 What follows is a condition for a subset of objects, e.g. 
\f3\fs28 \cb6 persons-with-address
\f1\fs32 \cb3 :\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf2 \cb7 <object>-with-<property>\
<object>-with-no-<property>\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 Then, there is a sort option, e.g. 
\f3\fs28 \cb6 persons-with-address-by-createddate
\f1\fs32 \cb3 :\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf2 \cb7 <option>-with-<property>-by-<sortfield>\
\pard\pardeftab720\partightenfactor0
\cf2 \cb6 with
\f1\fs32 \cb3  and 
\f3\fs28 \cb6 by
\f1\fs32 \cb3  clauses are both optional.\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Finally, there is an optional suffix that describes whether the view emits the full document as a value, e.g. 
\f3\fs28 \cb6 persons-with-address-fulldoc
\f1\fs32 \cb3 :\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf2 \cb7 <object>-with-<property>-fulldoc\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 When a property is nested, just replace the dot 
\f3\fs28 \cb6 .
\f1\fs32 \cb3  with a dash 
\f3\fs28 \cb6 -
\f1\fs32 \cb3 . Convert cases to lowercase. Convert underscore separated to no separation.\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs28 \cf4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Examples\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf2 \cb3 All people documents:\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf2 \cb7 people\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 All cases sorted by doc.lastModifiedDate:\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf2 \cb7 cases-by-lastmodifieddate\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 All addresses that have a city property sortedby 
\f3\fs28 \cb6 doc.createdDate
\f1\fs32 \cb3 :\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf2 \cb7 address-with-city-by-createddate\
\pard\pardeftab720\partightenfactor0

\f0\b\fs32 \cf4 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 With a reduce function\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf2 \cb3 In this case, i would use the same convention, with a prefix expressing the reduce. The reduce part could be structured as follows:\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf2 \cb7 [count|sum|stats]-[on-<property>-]<map part>\
\pard\pardeftab720\partightenfactor0

\f0\b \cf4 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Examples\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\b0 \cf2 \cb7 stats-on-patient-age-by-case-status\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 The case above refers to built-in reduce functions, which should cover the wide majority of uses.\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs48 \cf4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Replication\cb1 \
\pard\pardeftab720\partightenfactor0

\fs40 \cf4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Filtered Replication\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf2 \cb3 Filtered replication is a great way limit the amount of data synchronized on a device.\cb1 \
\cb3 Filters can be by id (
\f3\fs28 \cb6 _doc_ids
\f1\fs32 \cb3 ), by filter function, or by view (
\f3\fs28 \cb6 _view
\f1\fs32 \cb3 ).\cb1 \
\cb3 Be aware that replication filters other than 
\f3\fs28 \cb6 _doc_ids
\f1\fs32 \cb3  are very slow, because they run on 
\f4\i every
\f1\i0  document. Consider writing those filter functions in Erlang.\cb1 \
\cb3 When using filtered replication think about deleted documents, and whether they pass the filter. One way is to filter by id (this might be an argument for keeping 
\f3\fs28 \cb6 type
\f1\fs32 \cb3  in the id).\cb1 \
\cb3 Or deletion can be implemented as an update with 
\f3\fs28 \cb6 _deleted: true
\f1\fs32 \cb3 . That way data is still there and can be used in the filter.\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs40 \cf4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Using Replication\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf2 \cb3 There are two ways to start a replication: the 
\f3\fs28 \cb6 _replicator
\f1\fs32 \cb3  database and the 
\f3\fs28 \cb6 _replicate
\f1\fs32 \cb3  API endpoint. Use 
\f3\fs28 \cb6 _replicator
\f1\fs32 \cb3  database when in doubt.\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b \cf4 \
\pard\pardeftab720\partightenfactor0

\f5 \cf2 \cb6 _replicate
\f0 \cb3  API endpoint\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf2 \cb3 When you use Futon you use the replicator endpoint. To initiate a replication post a JSON:\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf2 \cb7 \{\
  \cf8 "source"\cf2 : \cf8 "a-db"\cf2 ,\
  \cf8 "target"\cf2 : \cf8 "another-db"\cf2 ,\
  \cf8 "continuous"\cf2 : \cf9 true\cf2 \
\}\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 The response includes a replication id (which can also be obtained from 
\f3\fs28 \cb6 _active_tasks
\f1\fs32 \cb3 ):\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf2 \cb7 \{\
  \cf8 "ok"\cf2 : \cf9 true\cf2 ,\
  \cf8 "_local_id"\cf2 : \cf8 "0a81b645497e6270611ec3419767a584+continuous"\cf2 \
\}\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 Having this id you can cancel a continuous replication by posting\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf2 \cb7 \{\
  \cf8 "replication_id"\cf2 : \cf8 "0a81b645497e6270611ec3419767a584+continuous"\cf2 ,\
  \cf8 "cancel"\cf2 : \cf9 true\cf2 \
\}\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 to the 
\f3\fs28 \cb6 _replicate
\f1\fs32 \cb3  endpoint.\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b \cf4 \
\pard\pardeftab720\partightenfactor0

\f5 \cf2 \cb6 _replicator
\f0 \cb3  Database\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf2 \cb3 Replications created via the 
\f3\fs28 \cb6 _replicator
\f1\fs32 \cb3  database are persisted and survive a server restart. Its just a normal database which means you have the default operations. Replications are initiated by creating replication documents:\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf2 \cb7 \{\
  \cf8 "_id"\cf2 : \cf8 "initial-replication:a-db:another-db"\cf2 ,\
  \cf8 "source"\cf2 : \cf8 "a-db"\cf2 ,\
  \cf8 "target"\cf2 : \cf8 "another-db"\cf2 ,\
  \cf8 "continuous"\cf2 : \cf9 true\cf2 \
\}\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 Look, you can have meaningful ids! Cancelling is straight forward - just delete the document. Read {\field{\*\fldinst{HYPERLINK "https://gist.github.com/fdmanana/832610"}}{\fldrslt \cf4 more about the 
\f3\fs28 \cb6 _replicator
\f1\fs32 \cb3  database}}.\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs48 \cf4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Conflicts\cb1 \
\pard\pardeftab720\partightenfactor0

\fs40 \cf4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Conflict Handling\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf2 \cb3 Some things need to and should be conflicts. CouchDB 
\f4\i conflicts are first class citizens
\f1\i0 , (or at least {\field{\*\fldinst{HYPERLINK "https://gist.github.com/rnewson/2387973#file-gistfile1-txt-L6"}}{\fldrslt \cf4 should be treated as such}}). If 2 different users enter different addresses for the same person at the same time, that probably should create a conflict. Your best option is to have a conflict resolution daemon running on the server. While we don\'92t have this at the moment, look at the {\field{\*\fldinst{HYPERLINK "https://github.com/jo/pouch-resolve-conflicts"}}{\fldrslt \cf4 pouch-resolve-conflicts}} plugin.\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs48 \cf4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Deployment\cb1 \
\pard\pardeftab720\partightenfactor0

\fs40 \cf4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 CouchDB Behind A Proxy\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf2 \cb3 Running CouchDB behind a proxy is recommended, e.g. to handle ssl termination.\cb1 \
\pard\pardeftab720\partightenfactor0

\f4\i \cf2 \cb3 Prefer subdomain over subdirectory
\f1\i0 . Nginx encodes urls on the way through. So, for example, if you request 
\f3\fs28 \cb6 http://my.couch.behind.nginx.com/mydb/foo%2Fbar
\f1\fs32 \cb3  it gets routed to CouchDB as 
\f3\fs28 \cb6 /mydb/foo/bar
\f1\fs32 \cb3 , which is not what we want.\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 We can configure this mad behaviour away (by {\field{\*\fldinst{HYPERLINK "http://stackoverflow.com/questions/20496963/avoid-nginx-decoding-query-parameters-on-proxy-pass-equivalent-to-allowencodeds"}}{\fldrslt \cf4 not appending a slash to the 
\f3\fs28 \cb6 proxy_pass
\f1\fs32 \cb3  target}}). But there is no way to convince nginx not messing with the url when rewriting the proxy behind a subdirectory, e.g. 
\f3\fs28 \cb6 http://my.couch.behind.nginx.com/_couchdb/mydb/foo%2Fbar
\f1\fs32 \cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs48 \cf4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Misc\cb1 \
\pard\pardeftab720\partightenfactor0

\fs40 \cf4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Debugging PouchDB\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf2 \cb3 I often assign the database instance to window and then I run queries on it. Or you can replicate to a local CouchDB and debug your views there.\cb1 \
\cb3 If you like PouchDB to be more verbose, {\field{\*\fldinst{HYPERLINK "http://pouchdb.com/api.html#debug_mode"}}{\fldrslt \cf4 enable debug output}}:\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf12 \cb7 PouchDB\cf2 .\cf9 debug\cf2 .\cf10 enable\cf2 (\cf8 '*'\cf2 )\
\pard\pardeftab720\partightenfactor0

\f0\b\fs40 \cf4 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 PouchDB and AngularJS\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf2 \cb3 To use PouchDB with AngularJS you should use {\field{\*\fldinst{HYPERLINK "https://github.com/angular-pouchdb/angular-pouchdb"}}{\fldrslt \cf4 angular-pouchdb}}, which wraps PouchDBs promises with Angulars 
\f3\fs28 \cb6 $q
\f1\fs32 \cb3 s.\cb1 \
\cb3 Debugging angular-pouchdb in a console can be done by first retrieving the injector and calling the 
\f3\fs28 \cb6 pouchDB
\f1\fs32 \cb3  service as normal, e.g.:\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf11 \cb7 var\cf2  pouchDB \cf9 =\cf2  angular.\cf10 element\cf2 (document.\cf9 body\cf2 ).\cf10 injector\cf2 ().\cf10 get\cf2 (\cf8 'pouchDB'\cf2 )\
\cf11 var\cf2  db \cf9 =\cf2  pouchDB(\cf8 'mydb'\cf2 )\
db.\cf10 get\cf2 (\cf8 'id'\cf2 ).\cf10 then\cf2 ()\
\pard\pardeftab720\partightenfactor0

\f0\b\fs40 \cf4 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Full Text Search\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf2 \cb3 While basic full text search is possible just by using views, its not convenient and you should make use of a dedicated FTI.\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b \cf4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Client Side\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf2 \cb3 For PouchDB the situation is clear: Use {\field{\*\fldinst{HYPERLINK "https://github.com/nolanlawson/pouchdb-quick-search"}}{\fldrslt \cf4 PouchDB Quick Search}}. Its a PouchDB plugin based on {\field{\*\fldinst{HYPERLINK "http://lunrjs.com/"}}{\fldrslt \cf4 lunr.js}}.\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b \cf4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Server Side\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf2 \cb3 On a CouchDB server you have options: Lucene (via {\field{\*\fldinst{HYPERLINK "http://github.com/rnewson/couchdb-lucene"}}{\fldrslt \cf4 couchdb-lucene}}) or ElasticSearch via {\field{\*\fldinst{HYPERLINK "https://www.elastic.co/blog/the-river/"}}{\fldrslt \cf4 The River}}. At eHealth Africa we use the latter.\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs40 \cf4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Two Ways of Deleting Documents\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf2 \cb3 There are two ways to delete a document: via DELETE or by updating the document with a 
\f3\fs28 \cb6 _deleted
\f1\fs32 \cb3  property set to true:\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf2 \cb7 \{\
  \cf8 "_id"\cf2 : \cf8 "mydoc"\cf2 ,\
  \cf8 "_rev"\cf2 : \cf8 "1-asd"\cf2 ,\
  \cf8 "type"\cf2 : \cf8 "person"\cf2 ,\
  \cf8 "name"\cf2 : \cf8 "David Foster Wallace"\cf2 ,\
  \cf8 "_deleted"\cf2 : \cf9 true\cf2 \
\}\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 In either way the deleted document will stay in the database, even after compaction. (That way the deletion can be propagated to all replicas.) Using the manual variant allows you to keep data, which might be useful for filtered replication or other purposes. Otherwise all properties will get removed except the plain stub:\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf2 \cb7 \{\
  \cf8 "_id"\cf2 : \cf8 "mydoc"\cf2 ,\
  \cf8 "_rev"\cf2 : \cf8 "2-def"\cf2 ,\
  \cf8 "_deleted"\cf2 : \cf9 true\cf2 \
\}\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb15 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \'a9 2015 {\field{\*\fldinst{HYPERLINK "http://ehealthafrica.org/"}}{\fldrslt \cf4 eHealth Africa}}. Written by {\field{\*\fldinst{HYPERLINK "https://www.die-tf.de/"}}{\fldrslt \cf4 TF}} and {\field{\*\fldinst{HYPERLINK "https://github.com/jo/couchdb-best-practices/graphs/contributors"}}{\fldrslt \cf4 contributors}}. Released under the {\field{\*\fldinst{HYPERLINK "https://www.apache.org/licenses/LICENSE-2.0.html"}}{\fldrslt \cf4 Apache 2.0 License}}.}