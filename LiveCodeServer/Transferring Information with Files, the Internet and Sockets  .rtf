{\rtf1\ansi\ansicpg1252\cocoartf2509
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 Monaco;
\f3\fswiss\fcharset0 Helvetica-Oblique;}
{\colortbl;\red255\green255\blue255;\red44\green44\blue44;\red59\green59\blue59;\red249\green249\blue249;
\red0\green0\blue0;\red127\green127\blue4;\red127\green1\blue127;\red0\green0\blue127;\red242\green242\blue242;
\red184\green14\blue61;\red41\green101\blue168;\red25\green129\blue24;\red16\green127\blue127;}
{\*\expandedcolortbl;;\cssrgb\c22745\c22745\c22745;\cssrgb\c29804\c29804\c29804;\cssrgb\c98039\c98039\c98039;
\cssrgb\c0\c0\c0;\cssrgb\c56863\c56078\c0;\cssrgb\c57647\c12941\c57255;\cssrgb\c392\c9412\c57255;\cssrgb\c96078\c96078\c96078;
\cssrgb\c78039\c14510\c30588;\cssrgb\c20000\c47843\c71765;\cssrgb\c8235\c56471\c12157;\cssrgb\c0\c56471\c57255;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}}
\margl1440\margr1440\vieww17700\viewh26740\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\b\fs72 \cf2 \expnd0\expndtw0\kerning0
Transferring Information with Files, the Internet and Sockets\
\
\pard\pardeftab720\partightenfactor0

\fs48 \cf2 Introduction\
\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf3 Reading and writing data to files or transferring data over the Internet are important functions in most applications. LiveCode provides a rich feature set for performing these operations.\
\
Accessing data from a file typically takes just a single line of code. LiveCode's file path syntax uses the same format on each platform so you typically don't have to rewrite your file handling routines to deploy cross platform. A set of functions provides for copying, deleting or renaming files, as well as accessing appropriate system and user folders.\
\
LiveCode includes functions for downloading and uploading data to the Internet. Simple downloads and uploads can be performed with just a single line of code. Support for the http, ftp and post protocols is included. Syntax is included that allows downloading in both the foreground and background. Additional library commands allow you to construct multipart form data, send ftp commands and more.\
\
LiveCode includes built-in support for https, SSL & encryption.\
If the built-in protocol support doesn't do what you need, LiveCode also allows you to implement your own Internet protocols using its straightforward socket support. A very basic client server application can be written in a few lines of code.\
\
\pard\pardeftab720\partightenfactor0

\f0\b\fs48 \cf2 File Name Specifications and File Paths\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf3 A file path is a way of describing the location of a file or folder so that it can be found by a handler. File paths are used throughout LiveCode: when you read to and write from text files, when you reference an external video file to display in a player, and in many other situations. If your application refers to external files in any way, an understanding of file path is essential.\
\
This topic discusses the syntax for creating and reading a file reference, and how to relate file paths to the location of your application so that they'll be accessible when your application is installed on another system with a different folder structure.\
\
\pard\pardeftab720\partightenfactor0

\f0\b\fs36 \cf2 What is a File Path?\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf3 A file path is a description of the exact location of a file or folder. The file path is created by starting at the top of the computer's file system, naming the disk or volume that the file is on, then naming every folder that encloses the file, in descending order, until the file is reached.\
\
\pard\pardeftab720\partightenfactor0

\f0\b \cf3 Locating a file\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf3 For example, suppose you want to describe the location of a file called "My File", which is located inside a folder called "My Folder". That folder is in turn located inside a folder called "Top Folder", which is on a drive called "Hard Disk". You need all this information to completely describe where the file is: - Hard Disk - Top Folder - My Folder - My File\
If someone tells you which disk the file is on, then which folder to open, and so on, you can find the file by opening each successive icon on your computer's desktop. By starting with the disk, then opening each enclosing folder in succession until you arrive at the file, you can find exactly the file that's being described.\
\
\pard\pardeftab720\partightenfactor0

\f0\b \cf3 The structure of a file path\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf3 A file path specifies each level of the hierarchy that encloses the file. LiveCode presents the information in a file path that might look like this:\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf3 \cb4 /Hard Disk/Top Folder/My Folder/My File\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf3 \cb1 You can see that to write a file path, you start by naming the disk the file is on, then add each enclosing folder in order until you arrive at the file.\
To see the path to a file, enter the following in the message box:\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf6 \cb4 answer\cf3  \cf7 file\cf3  \cf8 "Choose a file:"\cf3 ; \cf6 put\cf3  \cf7 it\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf3 \cb1 This displays the file path for the file you choose.\
\
\pard\pardeftab720\partightenfactor0

\f0\b\fs28 \cf3 \cb9 Important:
\f1\b0  Each platform has its own way for programmers to specify file paths. The file path shown above is in the usual style for file paths on Linux systems. For cross-platform compatibility, LiveCode uses this same forward slash / character in its file path regardless of the current platform. This way, you can generally specify file and work with paths in your scripts without having to convert them when you switch platforms.\
\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs32 \cf3 File paths on Windows systems\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf3 On Windows systems, disks are named with a drive letter followed by a colon character (:). A typical LiveCode file path on a Windows system looks like this:\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf3 \cb4 C:/folder/\cf7 file\cf3 .txt\cf0 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs32 \cf3 \cb1 \
File paths on OS X systems\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf3 On OS X systems, the startup disk, rather than the desktop, is used as the top level of the folder structure. This means that the startup disk's name does not appear in file paths. Instead, the first part of the file path is the top-level folder that the file is in.\
\
If the disk "Hard Disk" is the startup disk, a typical path on OS X systems might look like this:\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf3 \cb4 /Top Folder/My Folder/My File\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf3 \cb1 Notice that the disk name isn't part of this path.\
\pard\pardeftab720\partightenfactor0

\f0\b\fs28 \cf3 \cb9 \
Note:
\f1\b0  If you need to find out the startup disk's name, check the first disk name returned by the 
\f0\b volumes
\f1\b0  function.\cb1 \
\pard\pardeftab720\partightenfactor0

\fs32 \cf3 For files on a disk that isn't the startup disk, the file path starts with "/Volumes" instead of "/". A typical file path to a file that's on a non-startup disk on an OS X system looks like this:\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf3 \cb4 /Volumes/Swap Disk/Folder/\cf7 file\cf3 .txt\cf0 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs32 \cf3 \cb1 \
Folder paths\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf3 You construct the path of a folder the same way as the path to a file. A folder path always ends with a slash character (/). This final slash indicates that the path is to a folder rather than a file.\
For example, this pathname describes a folder called "Project" inside a folder called "Forbin" on a disk named "Doomsday":\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf3 \cb4 /Doomsday/Forbin/Project/\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf3 \cb1 If "Project" is a file, its pathname looks like this, without the final slash:\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf3 \cb4 /Doomsday/Forbin/Project\cf0 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs32 \cf3 \cb1 \
File paths for OS X bundles\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf3 A bundle is a special type of folder, used on OS X, that is presented to the user as a single file but that is maintained internally by the operating system as a folder. Many OS X applications \'96 including LiveCode and the applications it creates \'96 are stored and distributed as bundles that contain several files. When the user double-clicks the bundle the application starts up instead of a folder window opening to show the bundle's contents.\
You can take advantage of the bundle concept to include any needed support files with your application. If you place the files in the application's bundle, users ordinarily never see them, and the entire application--support files and all--behaves as a single icon.\
\
\pard\pardeftab720\partightenfactor0

\f0\b\fs28 \cf3 \cb9 Tip:
\f1\b0  To see the contents of a bundle, right-click (or control click) the bundle and choose "Show Package Contents" from the contextual menu.\cb1 \
\pard\pardeftab720\partightenfactor0

\fs32 \cf3 Most of the time, the distinction between bundles and files doesn't matter. However we recommend that you treat them as files when working from the perspective of a user but otherwise refer to them as folders when coding. This will help to keep your code readable. Thus if you are selecting a bundle in a file dialog use the answer file form. When moving or renaming a bundle, refer to them as a folder.\
\
\pard\pardeftab720\partightenfactor0

\f0\b \cf3 Moving, renaming, or deleting a bundle\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf3 When using the 
\f0\b rename
\f1\b0  command, to rename a bundle, use the rename folder form of the command:\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf6 \cb4 rename\cf3  folder \cf8 "/Volumes/Disk/Applications/MyApp/"\cf3  \cf7 to\cf3  \
    \cf8 "/Volumes/Disk/Applications/OtherApp/"\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf3 \cb1 Similarly, when dealing with a bundle, use the 
\f0\b delete folder
\f1\b0  command instead of 
\f0\b delete file
\f1\b0 , and the 
\f0\b revCopyFolder
\f1\b0  command instead of 
\f0\b revCopyFile
\f1\b0 .\
\
\pard\pardeftab720\partightenfactor0

\f0\b \cf3 Referring to files inside a bundle\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf3 When referring to a file that's inside a bundle, you can treat the bundle just as if it were a folder. For example, if you have placed a file called "My Support.txt" inside your application's bundle, the absolute path to the file might look like this:\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf3 \cb4 /Volumes/Disk/Applications/MyApp/My Support.txt\cf0 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs32 \cf3 \cb1 \
The / character in a file or folder name\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf3 The slash (/) is not a legal character in Unix or Windows file or folder names, but it is legal for Mac OS X file or folder names to contain a slash. Since a slash in a file or folder name would cause ambiguity \'96 is the slash part of a name, or does it separate one level of the hierarchy from the next? \'96 LiveCode substitutes a colon (:) for any slashes in folder or file names on Mac OS X systems.\
\
For example, if a file on a Mac OS X system is named "Notes from 12/21/93", you refer to it in a script as "Notes from 12:21:93". Since the colon is not a legal character in Mac OS X folder or file names, this removes the ambiguity.\
\
\pard\pardeftab720\partightenfactor0

\f0\b\fs36 \cf2 Absolute and Relative File Paths\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf3 When describing how to get to a file, you have two options. You can start from the top level, the name of the disk, and name each of the enclosing folders until you get to the file. This is called an absolute path, because it's independent of where you start from. Or you can start from the current folder and describe how to get to the file from there. This is called a relative path, because it depends on where you start.\
\
All the file paths shown so far in this topic are absolute paths.\
\
\pard\pardeftab720\partightenfactor0

\f0\b \cf3 Absolute file paths\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf3 Absolute file paths do not depend on which folder your stack file is in or on where the current folder is. An absolute path to a particular folder or file is always written the same way.\
\
For example, suppose your application is in a folder called "Application Folder", and you want to specify a file called "Westwind" which is in a folder called "Stories" inside "Application Folder". - Hard Disk - Top Folder - My Folder - My File - Application Folder - My Application - Stories - Westwind\
The absolute file path of your application looks like this:\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf3 \cb4 /Hard Disk/Application Folder/My Application\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf3 \cb1 and the absolute path of the "Westwind" file looks like this:\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf3 \cb4 /Hard Disk/Application Folder/Stories/Westwind\cf0 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs28 \cf3 \cb9 Note:
\f1\b0  On Mac OS X, and Linux systems, absolute file paths always start with a slash character. On Windows systems, absolute file paths always start with a drive letter followed by a colon (:).\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs32 \cf3 \
Relative file paths\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf3 Now suppose you want to tell someone how to get to the "Westwind" file, starting from the folder containing the application.\
Since the application is in "Application Folder", we don't need to include the steps to get to "Application Folder". Instead, we can describe the location of the "Westwind" file with this relative pathname:\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf3 \cb4 Stories/Westwind\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf3 \cb1 This relative pathname starts at "Application Folder"--the folder that holds the application--and describes how to get to the "Westwind" file from there: you open the folder "Stories", then find "Westwind" inside it.\
A relative file path starts at a particular folder, rather than at the top of the file system like an absolute file path. The relative file path builds a file path from the starting folder to the file or folder whose location is being specified.\
\pard\pardeftab720\partightenfactor0

\f0\b \cf3 \
Finding the current folder\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf3 By default, the current folder is set to the folder containing the application (either the LiveCode development environment or your application, depending on whether your application is a standalone). So in the example above, the current folder is "Application Folder", because that's where the running application is located.\
\pard\pardeftab720\partightenfactor0

\f0\b\fs28 \cf3 \cb9 Note:
\f1\b0  To change the current folder, set the 
\f0\b defaultFolder
\f1\b0  property.\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs32 \cf3 \
Going up to the parent folder\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf3 The relative path ".." indicates the current folder's parent folder. If the current folder is "Stories", the relative path\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf3 \cb4 ..\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf3 \cb1 means the same thing as the absolute path\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf3 \cb4 /Hard Disk/Application Folder/\cf0 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs32 \cf3 \cb1 \
Going up multiple levels\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf3 To go up more than one level, use more than one "../". To go up two levels, use "../../"; to go up three levels, use "../../../", and so forth.\
For example, suppose the current folder is "Stories", and its absolute path looks like this:\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf3 \cb4 /Hard Disk/Application Folder/Stories/\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf3 \cb1 To get to "My Application" in "Application Folder", you go up one level to "Application Folder", then down one level to "My Application". The relative path looks like this:\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf3 \cb4 ../My Application\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf3 \cb1 To get to "Top Folder" on "Hard Disk", you go up two levels--to "Application Folder", then to "Hard Disk"--and then down one level to "Top Folder". The relative path looks like this:\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf3 \cb4 ../../Top Folder/\cf0 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs32 \cf3 \cb1 \
Starting at the home directory\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf3 On OS X and Unix systems, the "~" character designates a user's home directory.\
A path that starts with "~/" is a relative path starting with the current user's home directory. A path that starts with "~", followed by the user ID of a user on that system, is a relative path starting with that user's home directory.\
\pard\pardeftab720\partightenfactor0

\f0\b\fs36 \cf2 \
When to use relative and absolute file paths\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf3 Absolute file paths and relative file paths are interchangeable. Which one to use depends on a couple of factors.\
Absolute file paths are easy to understand and they don't change depending on the current folder. This can be an advantage if you are changing the defaultFolder regularly.\
However absolute file paths always include the full name of the hard disk and folders leading up to the current working folder. Therefore, if you plan to distribute your application you will want to work with relative paths, so that media shipped in subfolders with your application is still easy to locate.\
\
\pard\pardeftab720\partightenfactor0

\f0\b\fs28 \cf3 \cb9 Tip:
\f1\b0  By default, when linking to an image or resource using the Inspector, LiveCode inserts an absolute file path. If you plan to distribute your application, locate your media in a subfolder next to the stack you are working on and convert these file paths to relative file paths by deleting the directories up to the one you are working in. This will mean you don't need to make any changes when it comes time to distribute your application.\
\cb1 \
\pard\pardeftab720\partightenfactor0

\fs32 \cf3 It's OK to use absolute paths to specify files or folders that the user selects after installation. For example, if you ask the user to select a file (using the 
\f0\b answer file
\f1\b0  command) and read data from the file, there's no need to convert the absolute path that the 
\f0\b answer file
\f1\b0  command provides to a relative path. Because you're using the path right after you get it from the 
\f0\b answer
\f1\b0  command, you know that the disk name and folder structure aren't going to change between getting the path and using it.\
\pard\pardeftab720\partightenfactor0

\f0\b\fs48 \cf2 \
Special Folders\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf3 Modern operating systems each have a set of special-purpose folders designated for a variety of purposes. If you are writing an application it is recommended that you make use of these folders where appropriate so that you provide the best possible user experience. For example, the contents of the desktop reside in a special folder; there is a folder set aside for fonts; there is a folder for application preferences; and so on.\
\
These special folders don't always have the same name and location, so you can't rely on a stored file path to locate them. For example, if your application is installed onto an OS localized into a different language, the names of the file path will be different, on some Windows special folders are named or placed differently depending on what version of Windows is running, etc.\
\
To find out the name and location of a special folder, regardless of any of these factors, you use the 
\f0\b specialFolderPath
\f1\b0  function. The function supports a number of forms for each operating system, describing the special folders for each one. Some of the forms are the same cross-platform. The following example will get the location of the Desktop folder on Windows, Mac OS X or Linux:\
\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf6 \cb4 put\cf3  \cf7 specialFolderPath\cf3 (\cf8 "Desktop"\cf3 ) \cf7 into\cf3  myPath\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf3 \cb1 To get the path to the Start menu's folder on a Windows system:\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf6 \cb4 put\cf3  \cf7 specialFolderPath\cf3 (\cf8 "Start"\cf3 ) \cf7 into\cf3  myPath\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf3 \cb1 For a complete list of possible folders see the, 
\f0\b specialFolderPath
\f1\b0  in the 
\f3\i LiveCode Dictionary
\f1\i0 .\
\pard\pardeftab720\partightenfactor0

\f0\b\fs48 \cf2 \
File Types, Application Signatures & File Ownership\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf3 When you double-click a document file, it automatically opens in the application it's associated with. Each operating system has a different method for associating files with an application. In order to create files that belong to your standalone application, you need to set up the association appropriately for each platform you distribute on.\
This topic describes how to correctly associate your application with the files it creates.\
\pard\pardeftab720\partightenfactor0

\f0\b\fs36 \cf2 \
Windows File Extensions and Ownership\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf3 When a file is saved on a Windows system, a three-character extension is usually added to the file's name. The extension specifies the format of the file.\
\
To determine which application to launch when the user double-clicks a file, Windows checks the Windows registry to find out what application has registered itself as owning the file's extension. Each application can add keys to the registry to identify certain file extensions as belonging to it.\
\
\pard\pardeftab720\partightenfactor0

\f0\b \cf3 Applications that don't own files\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf3 If your application does not create files that you want the application to own, you don't need to make any modifications to the registry or specify any extensions.\
\
\pard\pardeftab720\partightenfactor0

\f0\b \cf3 Applications that own their own files\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf3 If your application creates files with its own custom extension, when you install the application, you should make changes to the Windows registry to identify the extension as belonging to your application.\
\
Popular Windows installer programs will make these registry changes automatically for you. You can also perform these registry changes using the 
\f0\b setRegistry
\f1\b0  function.\
\
\pard\pardeftab720\partightenfactor0

\f0\b \cf3 Installing custom icons\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf3 Each Windows file can display its own icon. You can have separate icons for your application and for files it owns. Icon files must be stored in .ico format.\
\
\pard\pardeftab720\partightenfactor0

\f0\b \cf3 Custom application icons\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf3 If you want to include a custom icon for your application, use the "Application Icon" option on the Windows screen of the Standalone Application Settings window to specify the icon file. When you build the application, the icon will be included in the application. For more information, see the chapter on 
\f3\i Deploying Your Application
\f1\i0 .\
\
\pard\pardeftab720\partightenfactor0

\f0\b \cf3 Custom file icons\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf3 To include a custom icon for your documents, use the "Document Icon" option on the Windows screen of the Standalone Application Settings window to specify the icon file. When you build the application, the icon will be included in the application.\
\
\pard\pardeftab720\partightenfactor0

\f0\b\fs28 \cf3 \cb9 Important:
\f1\b0  For the correct icon to appear on files your application creates, the file's extension must be registered in the Windows registry.\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs32 \cf3 \
File extensions\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf3 You can add an extension to the name of any Windows file. The extension may contain letters A-Z, digits 0-9, ' (single quote), !, @, #, $, %, ^, &, (, ), -, _, \{, \}, `, or ~.\
The Windows registry associates applications with the extension for the files they own.\
\
\pard\pardeftab720\partightenfactor0

\f0\b\fs36 \cf2 OS X File Types and Creators\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf3 On OS X each file has a file extension which determines which application owns it. However OS X systems can also use the unique four-character creator signature and a four-character file type (see below for more information).\
OS X applications store file association information in a property list file, or plist. Each application's plist is stored as part of its application bundle.\
\
\pard\pardeftab720\partightenfactor0

\f0\b \cf3 Applications that don't own files\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf3 To assign your unique creator signature when building an application, enter the signature on the OS X screen of the Standalone Application Settings window. LiveCode automatically includes the creator signature in the application's plist.\
\pard\pardeftab720\partightenfactor0

\f0\b \cf3 \
Applications that own their own files\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf3 If your application creates files with your application's creator signature, you should include in your application's plist an entry for each file type you use. Once you have built your standalone application, follow these steps to open the plist file:\
\pard\pardeftab720\partightenfactor0

\f0\b \cf3 1.
\f1\b0  Right click on your application bundle, navigate to the contents folder and open the "Info.plist" file. If you have installed Apple's developer tools, you have an application called "Property List Editor", which you can use to make changes to the plist file. Otherwise, you can edit the file in a text editor.\
\

\f0\b 2.
\f1\b0  Locate the information for the document type. In Property List Editor, expand the "Root" node, then expand the "CFBundleDocumentTypes" node, then expand the "0" node. In a text editor, locate "CFBundleDocumentTypes". Below it, note the tags 
\f2\fs27\fsmilli13600 \cf10 \cb4 <array>
\f1\fs32 \cf3 \cb1  and 
\f2\fs27\fsmilli13600 \cf10 \cb4 <dict>
\f1\fs32 \cf3 \cb1 . The information for the first document type is between 
\f2\fs27\fsmilli13600 \cf10 \cb4 <dict>
\f1\fs32 \cf3 \cb1  and 
\f2\fs27\fsmilli13600 \cf10 \cb4 </dict>
\f1\fs32 \cf3 \cb1 .\
\

\f0\b 3
\f1\b0 . Enter the file description, which is a short phrase describing what kind of file this is. In Property List Editor, change the value of "CFBundleTypeName" to the description you want to use. In a text editor, locate "CFBundleTypeName" in the document information. Below it is the file description, enclosed between 
\f2\fs27\fsmilli13600 \cf10 \cb4 <string>
\f1\fs32 \cf3 \cb1  and 
\f2\fs27\fsmilli13600 \cf10 \cb4 </string>
\f1\fs32 \cf3 \cb1 :\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf3 \cb4 <\cf7 string\cf3 >LiveCode Stack</\cf7 string\cf3 >\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf3 \cb1 Change the description to the one you want to use.\
Do not change the tags (enclosed in "<" and ">"). Only change what's between them.\
\
\pard\pardeftab720\partightenfactor0

\f0\b \cf3 4.
\f1\b0  Enter the 
\f2\fs27\fsmilli13600 \cf10 \cb4 file
\f1\fs32 \cf3 \cb1  extension. In Property List Editor, expand "CFBundleTypeExtensions" and enter the 
\f2\fs27\fsmilli13600 \cf10 \cb4 file
\f1\fs32 \cf3 \cb1  extension in the "0" node. In a text editor, locate "CFBundleTypeExtensions" in the document information. Below it is the extension, enclosed in 
\f2\fs27\fsmilli13600 \cf10 \cb4 <array>
\f1\fs32 \cf3 \cb1  and 
\f2\fs27\fsmilli13600 \cf10 \cb4 <string>
\f1\fs32 \cf3 \cb1  tags. Change the extension to the one you want to use.\
\

\f0\b 5.
\f1\b0  Enter the four-character file type. In Property List Editor, expand "CFBundleTypeOSTypes" and enter the file type in the "0" node. In a text editor, locate "CFBundleTypeOSTypes" in the document information. Below it is the file type, enclosed in 
\f2\fs27\fsmilli13600 \cf10 \cb4 <array>
\f1\fs32 \cf3 \cb1  and 
\f2\fs27\fsmilli13600 \cf10 \cb4 <string>
\f1\fs32 \cf3 \cb1  tags. Change the file type to the one you want to use.\
\
If the format for this type of file is standard (such as plain text), use a standard type (such as "TEXT"). If the format belongs to your application, use a custom file type of your choice.\
\
\pard\pardeftab720\partightenfactor0

\f0\b\fs28 \cf3 \cb9 Important:
\f1\b0  Apple reserves all file types with no uppercase letters. If you use a custom file type for your application, make sure it contains at least one uppercase letter.\cb1 \
\pard\pardeftab720\partightenfactor0

\fs32 \cf3 \
If you want to assign more file types to your application, copy the portion of the plist file inside the "CFBundleTypes" array between 
\f2\fs27\fsmilli13600 \cf10 \cb4 <dict>
\f1\fs32 \cf3 \cb1  and 
\f2\fs27\fsmilli13600 \cf10 \cb4 <dict>
\f1\fs32 \cf3 \cb1 , including these tags. The "CFBundleTypes" node should now contain two 
\f2\fs27\fsmilli13600 \cf10 \cb4 <dict>
\f1\fs32 \cf3 \cb1  nodes and all their contents. Repeat the steps above for each different file type your application can create.\
\pard\pardeftab720\partightenfactor0

\f0\b \cf3 \
Creating Files\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf3 When your application creates files, set the 
\f0\b fileType
\f1\b0  property to the desired creator signature and file type for the new file. (For stack files created with the 
\f0\b save
\f1\b0  command, use the 
\f0\b stackFileType
\f1\b0  property instead.) When creating files, the application uses the current value of the 
\f0\b fileType
\f1\b0  or 
\f0\b stackFileType
\f1\b0  property to determine what creator and file type the new file should have.\
\
It's important to understand that a file's creator signature determines which application is launched automatically when you double-click the file, but doesn't prevent other applications from being able to open that file. For example, if your application creates files of type "TEXT", any text editor can open the files. If your application creates stack files, and uses the file type "RSTK", then LiveCode will be able to open the stack files, as well as your application.\
\pard\pardeftab720\partightenfactor0

\f0\b \cf3 \
File extensions\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf3 You can add an extension to the name of any OS X file. When the user double-clicks a file with no creator signature, the operating system uses the extension to determine which application to use to open the file.\
An application bundle's name should end with the extension ".app".\
\
\pard\pardeftab720\partightenfactor0

\f0\b\fs28 \cf3 \cb9 Note:
\f1\b0  Apple's recommendations for determining file type and creator on OS X systems are currently in flux. The recommended method for the present is to set a file type and creator signature, and also attach an extension to the end of each file's name when it is created. Valid extensions on OS X systems are up to twelve characters in length, and may include the letters a-z, the digits 0-9, $, %, _, or ~. For up-to-date information on Apple's recommendations for OS X, see Apple's {\field{\*\fldinst{HYPERLINK "http://www.apple.com/developer/"}}{\fldrslt \cf11 developer documentation}}.\
\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs36 \cf2 Mac OS X Classic File Types and Creators\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf3 When a file is saved on a Mac OS X system, a four-character creator signature is saved with it. The creator signature specifies which application owns the file. Every Mac OS X application should have a unique creator signature. (Apple maintains a registry of creator signatures on its {\field{\*\fldinst{HYPERLINK "http://developer.apple.com/dev/cftype/"}}{\fldrslt \cf11 web site}}).\
\
\pard\pardeftab720\partightenfactor0

\f0\b \cf3 Applications that don't own files\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf3 To assign your unique creator signature when building an application, enter the signature on the Mac OS X screen of the Standalone Application Settings window. LiveCode automatically includes the resources needed for Mac OS X to recognize the creator signature.\
\
\pard\pardeftab720\partightenfactor0

\f0\b \cf3 Applications that own their own files\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf3 If your application creates files with your application's creator signature, you should include in your application a set of resources for each file type you use. Once you have saved your standalone application, open the application file in ResEdit and follow these steps:\
\
\pard\pardeftab720\partightenfactor0

\f0\b \cf3 1.
\f1\b0  Open the BNDL resource window, then open the BNDL 128 resource. The BNDL 128 resource contains a single entry ("APPL").\
\

\f0\b 2.
\f1\b0  Choose "Create New File Type" from the Resources menu. A new entry appears below the "APPL" entry.\

\f0\b \
3.
\f1\b0  In the Type field, enter the four-character file type. If the format for this type of file is standard (such as plain text), use a standard type (such as "TEXT"). If the format belongs to your application, use a custom file type of your choice.\
Repeat steps 2-3 for each different file type your application can create.\
\
When your application creates files, set the 
\f0\b fileType
\f1\b0  property to the desired creator signature and file type for the new file. For stack files created with the save command, use the 
\f0\b stackFileType
\f1\b0  property instead. When creating files, the application uses the current value of the 
\f0\b fileType
\f1\b0  or 
\f0\b stackFileType
\f1\b0  property to determine what creator and file type the new file should have.\
\

\f0\b Installing custom icons\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf3 Each Mac OS 
\f2\fs27\fsmilli13600 \cf10 \cb4 file
\f1\fs32 \cf3 \cb1 may display any of six different icons, depending on context and on the number of colors the screen can display: large (32x32 pixel) icons and small (16x16 pixel) icons, each in black-and-white, 16 colors, and 256 colors.\
Mac OS provides default icons that are used for applications and documents that don't have their own. If you want your application or the documents it owns to display a custom icon, you must create the icons and then attach them to the application.\
\
\pard\pardeftab720\partightenfactor0

\f0\b \cf3 Custom application icons\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf3 If you want to include a custom icon for your application, use ResEdit or a similar tool to create a set of icon resources. There are six standard icon resource types: ICN# (black-and-white), icl4 (four-bit color), icl8 (8-bit color), ics# (black-and-white small), ics4 (4-bit small), and ics8 (8-bit small). Each of these application icons should have the resource ID 128.\
Save the icons in a single file, and use the "Include resources from file" option on the Mac OS X screen of the Standalone Application Settings window to specify the file. When you build the application, the icons will be included in the application's file.\
\
\pard\pardeftab720\partightenfactor0

\f0\b\fs36 \cf2 Linux File Extensions\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf3 Linux systems do not have an overall required method for specifying a file's type, but most files on a Linux system are created with extensions in the file name, similar to the extensions used on Windows systems. These extensions may be of any length and may include any characters (other than /).\
\
\pard\pardeftab720\partightenfactor0

\f0\b\fs48 \cf2 Working with URLs\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf3 A URL is a container for a file (or other resource), which may either be on the same system the application is running on, or on another system that's accessible via the Internet.\
\
This topic discusses the various URL schemes that LiveCode implements, how to create and manipulate files using URLs, and how to transfer data between your system and an FTP or HTTP server.\
\
To fully understand this topic, you should know how to create objects and write short scripts, and understand how to use variables to hold data. You should also have a basic understanding of how the Internet works.\
\
\pard\pardeftab720\partightenfactor0

\f0\b\fs36 \cf2 An Overview of URLs\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf3 In the LiveCode language, a URL is a container for a 
\f2\fs27\fsmilli13600 \cf10 \cb4 file
\f1\fs32 \cf3 \cb1  or other document, such as the output of a CGI on a web server. The data in a URL may be on the same system the application is running on, or may be on another system.\
\
URLs in LiveCode are written like the URLs you see in a browser. You use the 
\f0\b URL
\f1\b0  keyword to designate a URL, enclosing the URL's name in double quotes:\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf6 \cb4 put\cf3  \cf7 field\cf3  \cf8 "Info"\cf3  \cf7 into\cf3  \cf7 URL\cf3  \cf8 "file:myfile.txt"\cf3  \
\cf6 get\cf3  \cf7 URL\cf3  \cf8 "http://www.example.org/stuff/nonsense.html"\cf3  \
\cf6 put\cf3  \cf7 URL\cf3  \cf8 "ftp://ftp.example.net/myfile"\cf3  \cf7 into\cf3  \cf7 field\cf3  \cf8 "Data"\cf0 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs36 \cf2 \cb1 \
URL Schemes\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf3 A URL scheme is a type of URL. LiveCode supports five URL schemes with the 
\f0\b URL
\f1\b0  keyword: 
\f0\b http
\f1\b0 , 
\f0\b ftp
\f1\b0 , 
\f0\b file
\f1\b0 , 
\f0\b binfile
\f1\b0 , and (for backwards compatibility on Mac OS X) 
\f0\b resfile
\f1\b0 .\
\
The 
\f0\b http
\f1\b0  and 
\f0\b ftp
\f1\b0  schemes designate documents or directories that are located on another system that's accessible via the Internet. The 
\f0\b file
\f1\b0 , 
\f0\b binfile
\f1\b0 , and 
\f0\b resfile
\f1\b0  schemes designate local files.\
\pard\pardeftab720\partightenfactor0

\f0\b\fs36 \cf2 \
The http scheme\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf3 An 
\f0\b http
\f1\b0  URL designates a document from a web server:\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf6 \cb4 put\cf3  \cf7 URL\cf3  \cf8 "http://www.example.org/home.htm"\cf3  \cf7 into\cf3  \cf7 field\cf3  \cf8 "Page"\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf3 \cb1 When you use an 
\f2\fs27\fsmilli13600 \cf10 \cb4 http
\f1\fs32 \cf3 \cb1  URL in an expression, LiveCode downloads the URL from the server and substitutes the downloaded data for the URL.\
\
When you put something into an 
\f2\fs27\fsmilli13600 \cf10 \cb4 http
\f1\fs32 \cf3 \cb1  URL, LiveCode uploads the data to the web server:\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf6 \cb4 put\cf3  \cf7 field\cf3  \cf8 "Info"\cf3  \cf7 into\cf3  \cf7 URL\cf3  \cf8 "http://www.example.net/info.htm"\cf0 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs28 \cf3 \cb9 Note:
\f1\b0  Because most web servers do not allow 
\f2\fs24 \cf10 \cb4 http
\f1\fs28 \cf3 \cb9  uploads, putting something into an 
\f2\fs24 \cf10 \cb4 http
\f1\fs28 \cf3 \cb9  URL usually will not be successful. Check with the server's administrator to find out whether you can use the 
\f2\fs24 \cf10 \cb4 http
\f1\fs28 \cf3 \cb9  protocol to upload files.\cb1 \
\pard\pardeftab720\partightenfactor0

\fs32 \cf3 For more details about 
\f2\fs27\fsmilli13600 \cf10 \cb4 http
\f1\fs32 \cf3 \cb1  URLs, see the entry for the 
\f2\fs27\fsmilli13600 \cf10 \cb4 http
\f1\fs32 \cf3 \cb1  keyword in the LiveCode Dictionary.\
\pard\pardeftab720\partightenfactor0

\f0\b\fs36 \cf2 \
The ftp scheme\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf3 An 
\f0\b ftp
\f1\b0  URL designates a file or directory on an FTP server:\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf6 \cb4 get\cf3  \cf7 URL\cf3  \cf8 "ftp://user:passwd@ftp.example.net/picture.jpg"\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf3 \cb1 When you use an 
\f2\fs27\fsmilli13600 \cf10 \cb4 ftp
\f1\fs32 \cf3 \cb1  URL in an expression, LiveCode downloads the URL from the server and substitutes the downloaded data for the URL. When you put something into an ftp URL, LiveCode uploads the data to the ftp server:\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf6 \cb4 put\cf3  \cf7 image\cf3  \cf8 10\cf3  \cf7 into\cf3  \cf7 URL\cf3  \
    \cf8 "ftp://user:passwd@ftp.example.net/picture.jpg"\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf3 \cb1 FTP servers require a user name and password, which you can specify in the URL. If you don't specify a user name and password, LiveCode adds the "anonymous" user name and a dummy password automatically, in accordance with the convention for public FTP servers.\
\
\pard\pardeftab720\partightenfactor0

\f0\b\fs28 \cf3 \cb9 Note:
\f1\b0  Uploading to an FTP server usually requires a registered user name and password.\
\cb1 \
\pard\pardeftab720\partightenfactor0

\fs32 \cf3 For more details about 
\f2\fs27\fsmilli13600 \cf10 \cb4 ftp
\f1\fs32 \cf3 \cb1  URLs, see the entry for the 
\f2\fs27\fsmilli13600 \cf10 \cb4 ftp
\f1\fs32 \cf3 \cb1  keyword in the LiveCode Dictionary.\
\
\pard\pardeftab720\partightenfactor0

\f0\b \cf3 Directories on an FTP server\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf3 A URL that ends with a slash (/) designates a directory (rather than a file). An 
\f2\fs27\fsmilli13600 \cf10 \cb4 ftp
\f1\fs32 \cf3 \cb1  URL to a directory evaluates to a listing of the directory's contents.\
\
\pard\pardeftab720\partightenfactor0

\f0\b\fs36 \cf2 The file scheme\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf3 A 
\f0\b file
\f1\b0  URL designates a file on your system:\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf6 \cb4 put\cf3  \cf7 field\cf3  \cf8 "Stuff"\cf3  \cf7 into\cf3  \cf7 URL\cf3  \cf8 "file:/Disk/Folder/testfile"\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf3 \cb1 When you use a 
\f2\fs27\fsmilli13600 \cf10 \cb4 file
\f1\fs32 \cf3 \cb1  URL in an expression, LiveCode gets the contents of the 
\f2\fs27\fsmilli13600 \cf10 \cb4 file
\f1\fs32 \cf3 \cb1  you designate and substitutes it for the URL. The following example puts the contents of a 
\f2\fs27\fsmilli13600 \cf10 \cb4 file
\f1\fs32 \cf3 \cb1  into a variable:\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf6 \cb4 put\cf3  \cf7 URL\cf3  \cf8 "file:myfile.txt"\cf3  \cf7 into\cf3  myVariable\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf3 \cb1 When you put data into a 
\f2\fs27\fsmilli13600 \cf10 \cb4 file
\f1\fs32 \cf3 \cb1  URL, LiveCode puts the data into the file:\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf6 \cb4 put\cf3  myVariable \cf7 into\cf3  \cf7 URL\cf3  \cf8 "file:/Volumes/Backup/data"\cf0 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs28 \cf3 \cb9 Note:
\f1\b0  As with local variables, if the file doesn't exist, putting data into it creates the file.\cb1 \
\pard\pardeftab720\partightenfactor0

\fs32 \cf3 To create a URL from a file path that LiveCode provides, use the 
\f0\b &
\f1\b0  operator:\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf6 \cb4 answer\cf3  \cf7 file\cf3  \cf8 "Please choose a file to get:"\cf3  \
\cf6 get\cf3  \cf7 URL\cf3  (\cf8 "file:"\cf3  & \cf7 it\cf3 )\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs32 \cf3 \cb1 File path syntax and the file scheme:\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf3 The 
\f2\fs27\fsmilli13600 \cf10 \cb4 file
\f1\fs32 \cf3 \cb1  URL scheme uses the same 
\f2\fs27\fsmilli13600 \cf10 \cb4 file
\f1\fs32 \cf3 \cb1  path syntax used elsewhere in LiveCode statements. You can use both absolute paths and relative paths in a 
\f2\fs27\fsmilli13600 \cf10 \cb4 file
\f1\fs32 \cf3 \cb1  URL.\
\
\pard\pardeftab720\partightenfactor0

\f0\b \cf3 Conversion of end-of-line markers\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf3 Different operating systems use different characters to mark the end of a line. Mac OS X uses a return character (ASCII 13), Linux systems use a linefeed character (ASCII 10), and Windows systems use a return followed by a linefeed. To avoid problems when transporting a stack between platforms, LiveCode always uses linefeeds internally when you use a 
\f2\fs27\fsmilli13600 \cf10 \cb4 file
\f1\fs32 \cf3 \cb1  URL as a container. LiveCode translates as needed between the your system's end-of-line marker and LiveCode's linefeed character. To avoid this translation, use the 
\f2\fs27\fsmilli13600 \cf10 \cb4 binfile
\f1\fs32 \cf3 \cb1  scheme (see below).\
\
\pard\pardeftab720\partightenfactor0

\f0\b\fs36 \cf2 The binfile scheme\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf3 A 
\f0\b binfile
\f1\b0  URL designates a file on your system that contains binary data:\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf6 \cb4 put\cf3  \cf7 URL\cf3  \cf8 "binfile:beachball.gif"\cf3  \cf7 into\cf3  \cf7 image\cf3  \cf8 "Beachball"\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf3 \cb1 When you use a 
\f0\b binfile
\f1\b0  URL in an expression, LiveCode gets the contents of the file you designate and substitutes it for the URL. The following example puts the contents of a file into a variable:\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf6 \cb4 put\cf3  \cf7 URL\cf3  \cf8 "binfile:picture.png"\cf3  \cf7 into\cf3  pictVar\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf3 \cb1 When you put data into a 
\f0\b binfile
\f1\b0  URL, LiveCode puts the data into the file:\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf6 \cb4 put\cf3  pictVar \cf7 into\cf3  \cf7 URL\cf3  \cf8 "binfile:/Volumes/Backup/pict.png"\cf3  \
\cf6 put\cf3  \cf7 image\cf3  \cf8 1\cf3  \cf7 into\cf3  \cf8 "binfile:/image.png"\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf3 \cb1 \
As with local variables, if the file doesn't exist, putting data into it creates the file.\
The 
\f0\b binfile
\f1\b0  scheme works like the file scheme, except that LiveCode does not attempt to convert end-of-line markers. This is because return and linefeed characters can be present in a binary file but not be intended to mark the end of the line. Changing these characters can corrupt a binary file, so the 
\f0\b binfile
\f1\b0  scheme leaves them alone.\
\pard\pardeftab720\partightenfactor0

\f0\b\fs36 \cf2 \
The resfile scheme\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf3 On Mac OS Classic (and sometimes on OS X systems), files can consist of either a data fork or a resource fork or both.\
\pard\pardeftab720\partightenfactor0

\f0\b\fs28 \cf3 \cb9 Important:
\f1\b0  While LiveCode supports reading and writing resource fork files on Mac OS X, this feature is only intended to help you access and work with legacy files. We do not generally recommend the use of resource forks when designing any new application.\cb1 \
\pard\pardeftab720\partightenfactor0

\fs32 \cf3 The resource fork contains defined resources such as icons, menu definitions, dialog boxes, fonts, and so forth. A 
\f0\b resfile
\f1\b0  URL designates the resource fork of a Mac OS X file:\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf6 \cb4 put\cf3  myBinaryData \cf7 into\cf3  \cf7 URL\cf3  \cf8 "resfile:/Disk/Resources"\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf3 \cb1 When you use a 
\f0\b resfile
\f1\b0  URL in an expression, LiveCode gets the resource fork of the file you designate and substitutes it for the URL.\
\
When you put data into a 
\f0\b resfile
\f1\b0  URL, LiveCode puts the data into the file's resource fork.\
\pard\pardeftab720\partightenfactor0

\f0\b\fs28 \cf3 \cb9 Note:
\f1\b0  A 
\f0\b resfile
\f1\b0  URL specifies the entire resource fork, not just one resource. To work with individual resources, use the 
\f0\b getResource
\f1\b0 , 
\f0\b setResource
\f1\b0 , 
\f0\b deleteResource
\f1\b0  and 
\f0\b copyResource
\f1\b0  functions.\
\cb1 \
\pard\pardeftab720\partightenfactor0

\fs32 \cf3 The most common use for this URL scheme is to copy an entire resource fork from one file to another. To modify the data from a 
\f0\b resfile
\f1\b0  URL, you need to understand the details of Apple's resource fork format.\
\
\pard\pardeftab720\partightenfactor0

\f0\b \cf3 Creating a resource fork\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf3 Unlike the 
\f0\b file
\f1\b0  and 
\f0\b binfile
\f1\b0  URL schemes, the 
\f0\b resfile
\f1\b0  keyword cannot be used to create a file. If the file doesn't yet exist, you cannot use the 
\f0\b resfile
\f1\b0  keyword to create it. To create a new resource file, first use a 
\f0\b file
\f1\b0  URL to create the file with an empty data fork, then write the needed data to its resource fork:\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf6 \cb4 put\cf3  \cf7 empty\cf3  \cf7 into\cf3  \cf7 URL\cf3  \cf8 "file:myFile"\cf3  \cf12 -- creates an empty file \cf3 \
\cf6 put\cf3  myStoredResources \cf7 into\cf3  \cf7 URL\cf3  \cf8 "resfile:myFile"\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs36 \cf2 \cb1 Manipulating URL contents\
\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf3 You use a URL like any other container. You can get the content of a URL or use its content in any expression. You can also put any data into a URL.\
\pard\pardeftab720\partightenfactor0

\f0\b \cf3 http
\f1\b0 , 
\f0\b ftp
\f1\b0 , 
\f0\b binfile
\f1\b0 , and 
\f0\b resfile
\f1\b0  URLs can hold binary data.\

\f0\b http
\f1\b0 , 
\f0\b ftp
\f1\b0 , and 
\f0\b file
\f1\b0  URLs can hold text.\

\f0\b \
The URL keyword\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf3 To specify a URL container, you use the 
\f0\b URL
\f1\b0  keyword before the URL, which can use any of the five schemes described above:\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf3 \cb4 if \cf7 URL\cf3  \cf8 "http://www.example.net/index.html"\cf3  \cf7 is\cf3  \cf7 not\cf3  \cf7 empty\cf3  then ...\
\
\pard\pardeftab720\partightenfactor0
\cf6 get\cf3  \cf7 URL\cf3  \cf8 "binfile:/Applications/Hover.app/data"\cf3  \
\
\cf6 put\cf3  \cf8 1\cf3 +\cf8 1\cf3  \cf7 into\cf3  \cf7 URL\cf3  \cf8 "file:output.txt"\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf3 \cb1 The 
\f2\fs27\fsmilli13600 \cf10 \cb4 URL
\f1\fs32 \cf3 \cb1  keyword tells LiveCode that you are using the 
\f2\fs27\fsmilli13600 \cf10 \cb4 URL
\f1\fs32 \cf3 \cb1  as a container.\
\
Some properties (such as the 
\f0\b filename
\f1\b0  of a player or image) let you specify a URL as the property's value. Be careful not to include the 
\f0\b URL
\f1\b0  keyword when specifying such properties, because using the URLkeyword indicates that you're treating the URL as a container. If you use the URL keyword when specifying such a property, the property is set to the contents of the URL, not the URL itself, and this is usually not what's wanted.\
\pard\pardeftab720\partightenfactor0

\f0\b \cf3 \
Using the content of a URL\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf3 As with other containers, you use the content of a URL by using a reference to the URL in an expression. LiveCode substitutes the URL's content for the reference.\
If the URL scheme refers to a local file (
\f0\b file
\f1\b0 , 
\f0\b binfile
\f1\b0 , or 
\f0\b resfile
\f1\b0  URLs), LiveCode reads the content of the file and substitutes it for the URL reference in the expression:\
\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf6 \cb4 answer\cf3  \cf7 URL\cf3  \cf8 "file:../My File"\cf3  \
\pard\pardeftab720\partightenfactor0
\cf12 -- displays the file's content \cf3 \
\pard\pardeftab720\partightenfactor0
\cf6 put\cf3  \cf7 URL\cf3  \cf8 "binfile:flowers.jpg"\cf3  \cf7 into\cf3  myVariable \
\cf6 put\cf3  \cf7 URL\cf3  \cf8 "resfile:Icons"\cf3  \cf7 into\cf3  \cf7 URL\cf3  \cf8 "resfile:New Icons"\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf3 \cb1 If the URL scheme refers to a document on another system (
\f0\b http
\f1\b0  or 
\f0\b ftp
\f1\b0  URLs), LiveCode downloads the URL automatically, substituting the downloaded data for the URL reference:\
\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf6 \cb4 answer\cf3  \cf7 URL\cf3  \cf8 "http://www.example.net/files/greeting.txt"\cf0 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs28 \cf3 \cb9 Note:
\f1\b0  If the server sends back an error message--for example, if the file you specify in an 
\f0\b http
\f1\b0  URL doesn't exist--then the error message replaces the URL reference in the expression.\cb1 \

\f0\b \cb9 Important:
\f1\b0  When you use an 
\f0\b ftp
\f1\b0  or 
\f0\b http
\f1\b0  URL in an expression, the handler pauses until LiveCode is finished downloading the URL. If you do not want to block LiveCode when accessing these resources, use the 
\f0\b load URL
\f1\b0  form of the command (see below).\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs32 \cf3 \
Putting data into a URL\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf3 As with other containers, you can put data into a URL. The result of doing so depends on whether the URL scheme specifies a file on your system (
\f0\b file
\f1\b0 , 
\f0\b binfile
\f1\b0 , or 
\f0\b resfile
\f1\b0 ) or on another system (
\f0\b http
\f1\b0  or 
\f0\b ftp
\f1\b0 ).\
If the URL scheme refers to a local file (
\f0\b file
\f1\b0 , 
\f0\b binfile
\f1\b0 , or 
\f0\b resfile
\f1\b0  URLs), LiveCode puts the data into the specified file:\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf6 \cb4 put\cf3  \cf7 field\cf3  \cf8 "My Text"\cf3  \cf7 into\cf3  \cf7 URL\cf3  \cf8 "file:storedtext.txt"\cf3  \
\cf6 put\cf3  \cf7 image\cf3  \cf8 1\cf3  \cf7 into\cf3  \cf7 URL\cf3  \cf8 "binfile:picture.png"\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf3 \cb1 If the URL scheme refers to a document on the Internet (
\f0\b http
\f1\b0  or 
\f0\b ftp
\f1\b0  URLs), LiveCode uploads the data to the URL:\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf6 \cb4 put\cf3  myVar \cf7 into\cf3  \cf7 URL\cf3  \cf8 "ftp://me:pass@ftp.example.net/file.dat"\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf3 \cb1 \
Because most web servers do not allow HTTP uploads, this usually will not be successful with the 
\f0\b http
\f1\b0  scheme.\
\pard\pardeftab720\partightenfactor0

\f0\b \cf3 \
Chunk expressions and URLs\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf3 Like other containers, URLs can be used with chunk expressions to specify a portion of what's in a URL--a line, an item, a word, or a character. In this way, any chunk of a URL is like a container itself. For more information about Chunk Expressions, see the guide on 
\f3\i Processing Text and Data
\f1\i0 .\
You can use any chunk of a URL in an expression, in the same way you use a whole URL:\
\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf6 \cb4 get\cf3  \cf7 line\cf3  \cf8 2\cf3  \cf7 of\cf3  \cf7 URL\cf3  \cf8 "http://www.example.net/index.html"\cf3  \
\cf6 put\cf3  \cf7 word\cf3  \cf8 8\cf3  \cf7 of\cf3  \cf7 URL\cf3  \cf8 "file:/Disk/Folder/myfile"\cf3  \cf7 into\cf3  \cf7 field\cf3  \cf8 4\cf3  \
if char \cf8 1\cf3  \cf7 of\cf3  \cf7 URL\cf3  \cf8 "ftp://ftp.example.org/test.jpg"\cf3  \cf7 is\cf3  \cf8 "0"\cf3  then ...\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf3 \cb1 You can also specify ranges, and even one chunk inside another:\
\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf6 \cb4 put\cf3  char \cf8 1\cf3  \cf7 to\cf3  \cf8 30\cf3  \cf7 of\cf3  \cf7 URL\cf3  \cf8 "binfile:/marks.dat"\cf3  \cf7 into\cf3  myVar \
\cf6 answer\cf3  \cf7 line\cf3  \cf8 1\cf3  \cf7 to\cf3  \cf8 3\cf3  \cf7 of\cf3  \cf7 URL\cf3  \cf8 "http://www.example.com/file"\cf0 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs32 \cf3 \cb1 \
Putting data into a chunk\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf3 If the URL is local (that is, if it is a 
\f0\b file
\f1\b0 , 
\f0\b binfile
\f1\b0 , or 
\f0\b resfile
\f1\b0  URL), you can put a value into a chunk of the URL:\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf6 \cb4 put\cf3  \cf7 it\cf3  \cf7 into\cf3  char \cf8 7\cf3  \cf7 of\cf3  \cf7 URL\cf3  \cf8 "binfile:/picture.gif"\cf3  \cf6 put\cf3  return \cf7 after\cf3  \
    \cf7 word\cf3  \cf8 25\cf3  \cf7 of\cf3  \cf7 URL\cf3  \cf8 "file:../datafile"\cf3  \
\cf6 put\cf3  \cf7 field\cf3  \cf8 3\cf3  \cf7 into\cf3  \cf7 line\cf3  \cf8 20\cf3  \cf7 of\cf3  \cf7 URL\cf3  \cf8 "file:myfile.txt"\cf3  \
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf3 \cb1 You can also put a value into a chunk of an 
\f0\b ftp
\f1\b0  or 
\f0\b http
\f1\b0  URL. Because it's impossible to upload part of a file, LiveCode downloads the file, makes the change, then uploads the file back to the server.\
\
\pard\pardeftab720\partightenfactor0

\f0\b\fs28 \cf3 \cb9 Tip:
\f1\b0  This method is inefficient if you need to make several changes. In this case, it's faster to first put the URL in a variable, replace the chunk you want to change, then put the variable into the URL:\
\cb1 \
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf6 \cb4 put\cf3  \cf7 URL\cf3  \cf8 "ftp://me:secret@ftp.example.net/file.txt"\cf3  \cf7 into\cf3  myVar \
\cf6 put\cf3  \cf7 field\cf3  \cf8 "New Info"\cf3  \cf7 after\cf3  \cf7 line\cf3  \cf8 7\cf3  \cf7 of\cf3  myVar \
\cf6 put\cf3  \cf7 field\cf3  \cf8 "More"\cf3  \cf7 into\cf3  \cf7 word\cf3  \cf8 22\cf3  \cf7 of\cf3  \cf7 line\cf3  \cf8 3\cf3  \cf7 of\cf3  myVar\
\cf6 put\cf3  myVar \cf7 into\cf3  \cf7 URL\cf3  \cf8 "ftp://me:secret@ftp.example.net/file.txt"\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf3 \cb1 \
This ensures that the file only needs to be downloaded once and re-uploaded once, no matter how many changes you need to make.\
\pard\pardeftab720\partightenfactor0

\f0\b\fs36 \cf2 \
**URLs and memory**\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf3 URLs, unlike other containers, are only read into memory when you use the URL in a statement. Other containers \'96 like variables, fields, buttons, and images \'96 are normally kept in memory, so accessing them doesn't increase memory usage.\
This means that in order to read a URL or place a value in a chunk of a URL, LiveCode reads the entire file into memory. Because of this, you should be cautious when using a URL to refer to any very large file.\
\
Even when referring to a single chunk in a URL, LiveCode must place the entire URL in memory. An expression such as line 347882 of URL "file:bigfile.txt" may be evaluated very slowly or even not work at all, if insufficient memory is available. If you refer to a chunk of an 
\f2\fs27\fsmilli13600 \cf10 \cb4 ftp
\f1\fs32 \cf3 \cb1  or http URL, LiveCode must download the entire file to find the chunk you specify.\
\
If you need to read and write large quantities of data to a file, or seek through the contents of a large file without loading the entire contents into memory, use the 
\f0\b open file
\f1\b0 , 
\f0\b read from file
\f1\b0 , 
\f0\b seek
\f1\b0  and 
\f0\b close file
\f1\b0  commands instead of the URL commands. For more information on these commands see the 
\f3\i LiveCode Dictionary
\f1\i0 .\
\
\pard\pardeftab720\partightenfactor0

\f0\b\fs36 \cf2 **Deleting URLs**\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf3 You remove a URL with the 
\f0\b delete URL
\f1\b0  command.\
To delete a local file, you use a 
\f0\b file
\f1\b0  or 
\f0\b binfile
\f1\b0  URL:\
\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf6 \cb4 delete\cf3  \cf7 URL\cf3  \cf8 "file:C:/My Programs/test.exe"\cf3  \
\cf6 delete\cf3  \cf7 URL\cf8 "binfile:../mytext.txt"\cf3  \cf0 \
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf3 \cb1 It doesn't matter whether the file contains binary data or text; for deletion, these URL schemes are equivalent.\
\pard\pardeftab720\partightenfactor0

\f0\b\fs28 \cf3 \cb9 Tip:
\f1\b0  You can also use the 
\f0\b delete file
\f1\b0  command to remove a file. To delete the resource fork of a file, you use a 
\f0\b resfile
\f1\b0  URL. The following example removes the resource fork along with all resources, but leaves the file in place:\
\cb1 \
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf6 \cb4 delete\cf3  \cf7 URL\cf3  \cf8 "resfile:/Volumes/Backup/proj.rev"\cf3  \cf0 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs28 \cf3 \cb9 Tip:
\f1\b0  To delete a single resource instead of the entire resource fork, use the 
\f0\b deleteResource
\f1\b0  function.\
\cb1 \
\pard\pardeftab720\partightenfactor0

\fs32 \cf3 To remove a file or directory from an FTP server, you use an 
\f0\b ftp
\f1\b0  URL:\
\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf6 \cb4 delete\cf3  \cf7 URL\cf3  \cf8 "ftp://root:secret@ftp.example.org/deleteme.txt"\cf3  \
\cf6 delete\cf3  \cf7 URL\cf3  \cf8 "ftp://me:mine@ftp.example.net/trash/"\cf3  \cf0 \
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf3 \cb1 As with creating files, you can use an 
\f0\b http
\f1\b0  URL to delete a file, but most HTTP servers are not configured to allow this.\
\pard\pardeftab720\partightenfactor0

\f0\b\fs48 \cf2 \
Uploading and Downloading Files\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf3 The simplest way to transfer data to an FTP or HTTP server is to use the 
\f0\b put
\f1\b0  command to upload, or use the URL in an expression to download.\
\
The Internet library includes additional commands to upload and download files to and from an FTP server. These commands offer more versatile options for monitoring and controlling the progress of the file transfer.\
\pard\pardeftab720\partightenfactor0

\f0\b \cf3 Uploading using the put command\
\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf3 As mentioned above, putting something into an 
\f0\b ftp
\f1\b0  or 
\f0\b http
\f1\b0  URL uploads the data to the server:\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf6 \cb4 put\cf3  myVariable \cf7 into\cf3  \cf7 URL\cf3 \
\cf8 "ftp://user:pass@ftp.example.org/newfile.txt"\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf3 \cb1 \
If you use the 
\f0\b put
\f1\b0  command with a 
\f0\b file
\f1\b0  or 
\f0\b binfile
\f1\b0  URL as the source, the file is uploaded:\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf6 \cb4 put\cf3  \cf7 URL\cf3  \cf8 "file:newfile.txt"\cf3  \cf7 into\cf3  \cf7 URL\cf3 \
\cf8 "ftp://user:pass@ftp.example.org/newfile.txt"\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf3 \cb1 \
When you upload data in this way, the operation is blocking: that is, the handler pauses until the upload is finished. (See below for details on how to create a file transfer that is not blocking.) If there is an error, the error is placed in the 
\f0\b result
\f1\b0  function:\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf6 \cb4 put\cf3  \cf7 field\cf3  \cf8 "Data"\cf3  \cf7 into\cf3  \cf7 URL\cf3  myFTPDestination \
if \cf7 the\cf3  \cf7 result\cf3  \cf7 is\cf3  \cf7 not\cf3  \cf7 empty\cf3  then \cf6 beep\cf3  \cf8 2\cf0 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs28 \cf3 \cb9 Important:
\f1\b0  Uploading or downloading a URL does not prevent other messages from being sent during the file transfer: the current handler is blocked, but other handlers are not. For example, the user might click a button that uploads or downloads another URL while the first URL is still being uploaded. In this case, the second file transfer is not performed and the 
\f0\b result
\f1\b0  is set to "Error Previous request has not completed." To avoid this problem, you can set a flag while a URL is being uploaded, and check that flag when trying to upload or download URLs to make sure that there is not already a file transfer in progress.\
\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs32 \cf3 Downloading using a URL\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf3 Referring to an 
\f0\b ftp
\f1\b0  or 
\f0\b http
\f1\b0  URL in an expression downloads the document.\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf6 \cb4 put\cf3  \cf7 URL\cf3  \cf8 "ftp://ftp.example.net/myfile.jpg"\cf3  \cf7 into\cf3  \cf7 image\cf3  \cf8 1\cf3  \
\cf6 get\cf3  \cf7 URL\cf3  \cf8 "http://www.example.com/newstuff/newfile.html"\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf3 \cb1 If you use the 
\f0\b put
\f1\b0  command with a 
\f0\b file
\f1\b0  or 
\f0\b binfile
\f1\b0  URL as the destination, the document is downloaded to the file:\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf6 \cb4 put\cf3  \cf7 URL\cf3  \cf8 "ftp://ftp.example.net/myfile.jpg"\cf3  \cf7 into\cf3  \cf7 URL\cf3  \
    \cf8 "binfile:/Disk/Folder/myfile.jpg"\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs36 \cf2 \cb1 Non-blocking transfers\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf3 When you transfer a file using URL containers, the file transfer stops the current handler until the transfer is done. This kind of operation is called a blocking operation, since it blocks the current handler as long as it's going on.\
\
If you want to transfer data using 
\f3\i http
\f1\i0  without blocking, use the 
\f0\b load
\f1\b0  command. if you want to transfer large files using 
\f3\i ftp
\f1\i0 , use the 
\f0\b libURLftpUpload
\f1\b0 , 
\f0\b libURLftpUploadFile
\f1\b0 , or 
\f0\b libURLDownloadToFile
\f1\b0  commands.\
\
Non-blocking file transfers have several advantages:\
Since contacting a server may take some time due to network lag, the pause involved in a blocking operation may be long enough to be noticeable to the user.\
\
If a blocking operation involving a URL is going on, no other blocking operation can start until the previous one is finished. If a non-blocking file transfer is going on, however, you can start other non-blocking file transfers. This means that if you use the library commands, the user can begin multiple file transfers without errors.\
\
During a non-blocking file transfer, you can check and display the status of the transfer. This lets you display the transfer's progress and allow the user to cancel the file transfer.\
\
\pard\pardeftab720\partightenfactor0

\f0\b \cf3 Using the load command\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf3 The 
\f0\b load
\f1\b0  command downloads the specified document in the background and places it in a cache. Once a document has been cached, it can be accessed nearly instantaneously when you use its URL, because LiveCode uses the cached copy in memory instead of downloading the URL again.\
\
To use a file that has been downloaded by the load command, refer to it using the URL keyword as usual. When you request the original URL, LiveCode uses the cached file automatically.\
\
For best performance, use the 
\f2\fs27\fsmilli13600 \cf10 \cb4 load
\f1\fs32 \cf3 \cb1  command at a time when response speed isn't critical (such as when your application is starting up), and only use it for documents that must be displayed quickly, such as images from the web that will be shown when you go to the next card.\
\
\pard\pardeftab720\partightenfactor0

\f0\b \cf3 Checking status when using the load command\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf3 While a file is being transferred using the load commands, you can check the status of the transfer using the 
\f0\b URLStatus
\f1\b0  function. This function returns the current status of a URL that's being downloaded or uploaded:\
\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf6 \cb4 local\cf3  tUrl\
\cf6 put\cf3  \cf8 "ftp://ftp.example.com/myfile.txt"\cf3  \cf7 into\cf3  tUrl\
\cf6 put\cf3  \cf7 the\cf3  \cf7 URLStatus\cf3  \cf7 of\cf3  tUrl \cf7 into\cf3  \cf7 field\cf3  \cf8 "Current Status"\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf3 \cb1 \
The 
\f0\b URLStatus
\f1\b0  function returns one of the following values:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0
\f3\i \cf3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
queued
\f1\i0  : on hold until a previous request to the same site is completed\
\ls1\ilvl0
\f3\i \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
contacted
\f1\i0  : the site has been contacted but no data has been sent or received yet\
\ls1\ilvl0
\f3\i \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
requested
\f1\i0  : the URL has been requested\
\ls1\ilvl0
\f3\i \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
loading
\f1\i0  
\f3\i bytesTotal
\f1\i0 , 
\f3\i bytesReceived
\f1\i0  : the URL data is being received\
\ls1\ilvl0
\f3\i \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
uploading
\f1\i0  
\f3\i bytesTotal, bytesReceived
\f1\i0  : the file is being uploaded to the URL\
\ls1\ilvl0
\f3\i \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
cached
\f1\i0  : the URL is in the cache and the download is complete\
\ls1\ilvl0
\f3\i \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
uploaded
\f1\i0  : the application has finished uploading the file to the URL\
\ls1\ilvl0
\f3\i \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
error
\f1\i0  : an error occurred and the URL was not transferred\
\ls1\ilvl0
\f3\i \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
timeout
\f1\i0  : the application timed out when attempting to transfer the URL\
\pard\pardeftab720\partightenfactor0
\cf3 \
To monitor the progress of a file transfer or display a progress bar, you check the 
\f0\b URLStatus
\f1\b0  function repeatedly during the transfer. The easiest way to do this is with timer based messaging \'96 see the section of the same name in the 
\f3\i LiveCode Script
\f1\i0  guide, for more information.\
\pard\pardeftab720\partightenfactor0

\f0\b \cf3 \
Canceling a file transfer & emptying the cache\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf3 To cancel a transfer initiated with the load command and empty the cache, use the 
\f0\b unload
\f1\b0  command.\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf6 \cb4 unload\cf3  \cf7 URL\cf3  \cf8 "http://example.org/new_beta"\cf0 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs32 \cf3 \cb1 \
Uploading and downloading large files using FTP\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf3 The Internet library provides a number of commands for transferring larger files via FTP without blocking.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0
\f0\b \cf3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
libURLftpUpload
\f1\b0  uploads data to an FTP server\
\ls2\ilvl0
\f0\b \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
libURLftpUploadFile
\f1\b0  uploads a file to an FTP server\
\ls2\ilvl0
\f0\b \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
libURLDownloadToFile
\f1\b0  downloads a file from an FTP server to a local file\
\pard\pardeftab720\partightenfactor0
\cf3 \
The basic effect of these commands is the same as the effect of using URLs: that is, the data is transferred to or from the server. However, there are several differences in how the actual file transfer is handled. Because of these differences, the library commands are more suitable for uploads and downloads, particularly if the file being transferred is large.\
\
The following sets of statements each show one of the Internet library commands, with the equivalent use of a URL:\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf3 \cb4 libURLftpUpload myVar,"ftp://me:pass@example.net/file.txt" \
put myVar into URL "ftp://me:pass@example.net/file.txt"\
\
libURLftpUploadFile "test.data","ftp://ftp.example.org/test"\
put URL "binfile:test.data" into URL "ftp://ftp.example.org/test\
\
libURLDownloadToFile "ftp://example.org/new_beta","/HD/File" \
put URL "ftp://example.org/new_beta" into URL "binfile:/HD/File"\cf0 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs32 \cf3 \cb1 \
Using callback messages\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf3 When you start a file transfer using the 
\f0\b libURLftpUpload
\f1\b0 , 
\f0\b libURLftpUploadFile
\f1\b0 , or 
\f0\b libURLDownloadToFile
\f1\b0  command, you can optionally specify a callback message, which is usually a custom message that you write a handler for. This message is sent whenever the file transfer's 
\f0\b URLStatus
\f1\b0  changes, so you can handle the callback message to handle errors or to display the file transfer's status to the user.\
\
The following simple example demonstrates how to display a status message to the user. The following handlers might be found in a button's script:\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf3 \cb4 on mouseUp \
    \cf6 local\cf3  tUrl\
    \cf6 put\cf3  \cf8 "ftp://example.org/new_beta"\cf3  \cf7 into\cf3  tUrl\
    \cf6 libURLDownloadToFile\cf3  tUrl,\cf8 "/HD/Latest Beta"\cf3 ,\cf8 "showStatus"\cf3  \
end mouseUp\
\
on showStatus theURL \
    \cf6 put\cf3  \cf7 the\cf3  \cf7 URLStatus\cf3  \cf7 of\cf3  theURL \cf7 into\cf3  \cf7 field\cf3  \cf8 "Status"\cf3  \
end showStatus\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf3 \cb1 When you click the button, the 
\f0\b mouseUp
\f1\b0  handler is executed. The 
\f0\b libURLDownloadToFile
\f1\b0  command begins the file transfer, and its last parameter specifies that a 
\f3\i showStatus
\f1\i0  message will be sent to the button whenever the 
\f0\b URLStatus
\f1\b0  changes.\
\
As the 
\f0\b URLStatus
\f1\b0  changes periodically throughout the download process, the button's 
\f3\i showStatus
\f1\i0  handler is executed repeatedly. Each time a 
\f3\i showStatus
\f1\i0  message is sent, the handler places the new status in a field. The user can check this field at any time during the file transfer to see whether the download has started, how much of the file has been transferred, and whether there has been an error.\
\
If a file transfer was started using the 
\f0\b libURLftpUpload
\f1\b0 , 
\f0\b libURLftpUploadFile
\f1\b0 , or 
\f0\b libURLDownloadToFile
\f1\b0  command, you can cancel the transfer using the 
\f0\b unload
\f1\b0  command.\
\
\pard\pardeftab720\partightenfactor0

\f0\b \cf3 Uploading, downloading, and memory\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf3 When you use a URL as a container, LiveCode places the entire URL in memory. For example, if you download a file from an FTP server using the 
\f0\b put
\f1\b0  command, LiveCode downloads the whole contents of the file into memory before putting it into the destination container. If the file is too large to fit into available memory, a file transfer using this method will fail (and may cause other unexpected results).\
\
The library commands 
\f0\b libURLftpUpload
\f1\b0 , 
\f0\b libURLftpUploadFile
\f1\b0 , and 
\f0\b libURLDownloadToFile
\f1\b0 , however, do not require the entire file to be loaded into memory. Instead, they transfer the file one piece at a time. If a file is (or might be) too large to comfortably fit into available memory, you should always use the library commands to transfer it.\
\
\pard\pardeftab720\partightenfactor0

\f0\b\fs36 \cf2 Using a stack on a server\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf3 Ordinarily, you use stack files that are located on a local disk. You can also open and use a stack that is located on an FTP or HTTP server. Using this capability, you can update an application by downloading new stacks, make new functionality available via the Internet, and even keep most of your application on a server instead of storing it locally.\
Going to a stack on a server:\
\
As with local stack files, you use the 
\f0\b go
\f1\b0  command to open a stack that's stored on a server:\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf6 \cb4 go\cf3  \cf7 stack\cf3  \cf7 URL\cf3  \cf8 "http://www.example.org/myapp/main.rev"\cf3  \
\cf6 go\cf3  \cf7 stack\cf3  \cf7 URL\cf3  \cf8 "ftp://user:pass@example.net/secret.rev"\cf0 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs28 \cf3 \cb9 Note:
\f1\b0  For such a statement to work, the stack file must have been uploaded as binary data, uncompressed, and not use encodings such as BinHex.\
\cb1 \

\f0\b \cb9 Tip:
\f1\b0  If you need to download a large stack, use the 
\f0\b load
\f1\b0  command to complete the download before using the 
\f0\b go
\f1\b0  command to display the stack. This allows you to display a progress bar during the download.\
\cb1 \
\pard\pardeftab720\partightenfactor0

\fs32 \cf3 LiveCode automatically downloads the stack file. The main stack of the stack file then opens in a window, just as though you had used the 
\f0\b go
\f1\b0  command to open a local stack file.\
\
You can go directly to a specific card in the stack:\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf6 \cb4 local\cf3  tStackUrl\
\cf6 put\cf3  \cf8 "http://www.example.org/myapp/main.rev"\cf3  \cf7 into\cf3  tStackUrl\
\cf6 go\cf3  \cf7 card\cf3  \cf8 "My Card"\cf3  \cf7 of\cf3  \cf7 stack\cf3  \cf7 URL\cf3  tStackUrl\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf3 \cb1 To open a substack instead, use the substack's name:\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf6 \cb4 local\cf3  tStackUrl\
\cf6 put\cf3  \cf8 "http://www.example.org/myapp/main.rev"\cf3  \cf7 into\cf3  tStackUrl\
\cf6 go\cf3  \cf7 stack\cf3  \cf8 "My Substack"\cf3  \cf7 of\cf3  \cf7 stack\cf3  \cf7 URL\cf3  tStackUrl\cf0 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs32 \cf3 \cb1 \
Using a compressed stack\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf3 You cannot directly open a stack that's compressed. However, since the stack URL is a container, you can use the URL as the parameter for the 
\f0\b decompress
\f1\b0  function. The function takes the stack file data and decompresses it, producing the data of the original stack file. You can open the output of the function directly as a stack.\
The following statement opens a compressed stack file on a server:\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf6 \cb4 go\cf3  \cf7 decompress\cf3 (\cf7 stack\cf3  \cf7 URL\cf3  \cf8 "http://www.example.net/comp.gz"\cf3 )\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf3 \cb1 \
The statement automatically downloads the file "comp.gz", uncompresses it, and opens the main stack of the file.\
\pard\pardeftab720\partightenfactor0

\f0\b \cf3 \
Saving stacks from a server\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf3 When a stack is downloaded using the 
\f0\b go
\f1\b0  command, it's loaded into memory, but not saved on a local disk. Such a stack behaves like a new (unsaved) stack until you use the 
\f0\b save
\f1\b0  command to save it as a stack file.\
\pard\pardeftab720\partightenfactor0

\f0\b\fs28 \cf3 \cb9 Note:
\f1\b0  Saving a stack that has been downloaded with the 
\f0\b go
\f1\b0  command does not re-upload it to its server. To upload a changed stack, you must save it to a local file, then use one of the methods described in this topic to upload the file to the server.\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs48 \cf2 \
Other Internet Commands\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf3 The Internet library has a number of additional commands for working with web forms, ftp commands, custom settings and troubleshooting. These commands are documented in more detail the LiveCode Dictionary.\
\pard\pardeftab720\partightenfactor0

\f0\b \cf3 Launching the User's Browser with a URL\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf3 To launch the default browser with a URL, use the 
\f0\b launch URL
\f1\b0  command.\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf6 \cb4 launch\cf3  \cf7 URL\cf3  \cf8 "http://www.livecode.com/"\cf0 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs28 \cf3 \cb9 Note:
\f1\b0  To render web pages within LiveCode, instead of launching an external browser, use the revBrowser. See the section on revBrowser for more information.\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs36 \cf2 \
Working with Web Forms\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf3 To post data to a web form, use the 
\f0\b post
\f1\b0  command. To encode data to make it suitable for posting, use the 
\f0\b libUrlFormData
\f1\b0  function. To create multi-part form data (as described in RFC 1867) use the 
\f0\b libUrlMultipartFormData
\f1\b0  function. To add data to a multipart form one part at a time, use the 
\f0\b libUrlMultipartFormAddPart
\f1\b0  function. This can be useful if you need to specify the mime type or transfer encoding for each part.\
\pard\pardeftab720\partightenfactor0

\f0\b\fs36 \cf2 \
Working with FTP\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf3 For details on basic uploading and downloading using FTP, see the section above.\
The following commands provide additional capabilities when working with the ftp protocol:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0
\f0\b \cf3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
libURLSetFTPStopTime
\f1\b0  : Sets the timeout value for FTP transfers.\
\ls3\ilvl0
\f0\b \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
libURLSetFTPMode
\f1\b0  : Switches between active and passive mode for FTP transfers.\
\ls3\ilvl0
\f0\b \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
libURLSetFTPListCommand
\f1\b0  : Switches between sending LIST or NLST formats when listing the contents of an FTP directory.\
\ls3\ilvl0
\f0\b \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
libURLftpCommand
\f1\b0  : sends an ftp command to an ftp server.\
\ls3\ilvl0
\f0\b \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
libURLftpUpload
\f1\b0  : uploads data. See the section above for more details.\
\ls3\ilvl0
\f0\b \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
libURLftpUploadFile
\f1\b0  : uploads a file, without loading the entire file into memory. See the section above for more details.\
\ls3\ilvl0
\f0\b \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
libURLDownloadToFile
\f1\b0  \'96 downloads data to a file, without loading the entire data into memory. See the section above for more details.\
\pard\pardeftab720\partightenfactor0

\f0\b\fs36 \cf2 \
HTTP methods and http URLs\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf3 The basic operations used by the HTTP protocol are called methods. For 
\f0\b http
\f1\b0  URLs, the following HTTP methods are used under the following circumstances:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0\cf3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
GET: when an 
\f0\b http
\f1\b0  URL in an expression is evaluated\
\ls4\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
PUT: when you put a value into an 
\f0\b http
\f1\b0  URL\
\ls4\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
POST: when you use the 
\f0\b post
\f1\b0  command\
\ls4\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
DELETE: when you use the 
\f0\b delete URL
\f1\b0  command with an 
\f0\b http
\f1\b0  URL\
\pard\pardeftab720\partightenfactor0

\f0\b\fs28 \cf3 \cb9 \
Note:
\f1\b0  Many HTTP servers do not implement the PUT and DELETE methods, which means that you can't put values into an 
\f0\b http
\f1\b0  URL or delete an 
\f0\b http
\f1\b0  URL on such servers. It's common to use the FTP protocol instead to upload and delete files; check with your server's administrator to find out what methods are supported.\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs32 \cf3 \
HTTP headers\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf3 When LiveCode issues a GET or POST request, it constructs a minimal set of HTTP headers. For example, when issued on a Mac OS system, the statement:\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf6 \cb4 put\cf3  \cf7 URL\cf3  \cf8 "http://www.example.org/myfile"\cf3  \cf7 into\cf3  myVariable\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf3 \cb1 results in sending a GET request to the server:\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf3 \cb4 GET /myfile HTTP/1.1 Host: 127.0.0.0 User-Agent: LiveCode (MacOS)\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf3 \cb1 \
You can add headers, or replace the Host or User-Agent header, by setting the 
\f0\b HTTPHeaders
\f1\b0  property before using the URL:\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf6 \cb4 set\cf3  \cf7 the\cf3  HTTPHeaders \cf7 to\cf3  \cf8 "User-Agent: MyApp"\cf3  & return \
    & \cf8 "Connection: close"\cf3  \
\cf6 put\cf3  \cf7 URL\cf3  \cf8 "http://www.example.org/myfile"\cf3  \cf7 into\cf3  myVariable\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf3 \cb1 \
Now the request sent to the server looks like this:\
GET /myfile HTTP/1.1 Host: 127.0.0.0 User-Agent: MyApp Connection: close\
The 
\f0\b ftp
\f1\b0  URL scheme can be used to create a new file to an FTP server. As with the 
\f0\b file
\f1\b0  and 
\f0\b binfile
\f1\b0  schemes, putting something into the URL creates the file:\
\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf6 \cb4 put\cf3  dataToUpload \cf7 into\cf3  \cf7 URL\cf3 \
\cf8 "ftp://jane:pass@ftp.example.com/newfile.dat"\cf0 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs28 \cf3 \cb9 Tip:
\f1\b0  You can create an FTP directory by uploading a file to the new (nonexistent) directory. The directory is automatically created. You can then delete the file, if you wish, leaving a new, empty directory on the server:\cb1 \
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf12 \cb4 -- Create an empty file in the nonexistent directory: \cf3 \
\pard\pardeftab720\partightenfactor0
\cf6 put\cf3  \cf7 empty\cf3  \cf7 into\cf3  \cf7 URL\cf3  \cf8 "ftp://jane:pass@example.com/newdir/dummy"\cf3  \
\
\pard\pardeftab720\partightenfactor0
\cf12 -- Delete unwanted empty file to leave new directory: \cf3 \
\pard\pardeftab720\partightenfactor0
\cf6 delete\cf3  \cf7 URL\cf3  \cf8 "ftp://jane:pass@example.com/newdir/dummy"\cf0 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs36 \cf2 \cb1 \
Additional Transmission Settings\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf3 The following commands provide additional customization options for the Internet library:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls5\ilvl0
\f0\b \cf3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
libUrlSetExpect100
\f1\b0  : Allows you to set a limit to the size of data being posted before requesting a continue response from the server.\
\ls5\ilvl0
\f0\b \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
libURLSetCustomHTTPHeaders
\f1\b0  : Sets 
\f2\fs27\fsmilli13600 \cf10 \cb4 the header\uc0\u8232 
\f1\fs32 \cf3 \cb1 s to be sent with each request to an HTTP server. See also the section on HTTPHeaders above.\
\ls5\ilvl0
\f0\b \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
libURLFollowHttpRedirects
\f1\b0  : Specify that GET requests should follow HTTP redirects and GET the page redirected to.\
\ls5\ilvl0
\f0\b \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
libUrlSetAuthCallback
\f1\b0  : Sets a callback for handling authentication with http servers and proxies.\
\pard\pardeftab720\partightenfactor0

\f0\b\fs36 \cf2 \
Troubleshooting\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf3 The following commands and functions can be useful when debugging an application that uses the Internet library.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0
\f0\b \cf3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
resetAll
\f1\b0  : Closes all open sockets and halts all pending Internet operations.\
\pard\pardeftab720\partightenfactor0

\f0\b\fs28 \cf3 \cb9 \
Caution:
\f1\b0  The 
\f0\b resetAll
\f1\b0  command closes all open sockets, which includes any other sockets opened by your application and any sockets in use for other uploads and downloads. Because of this, you should avoid routine use of the 
\f0\b resetAll
\f1\b0  command. Consider using it only during development, to clear up connection problems during debugging.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls7\ilvl0
\f0\b\fs32 \cf3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
libURLErrorData
\f1\b0  : Returns any error that was caused during a download that was started with the load command.\
\ls7\ilvl0
\f0\b \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
libURLVersion
\f1\b0  : Returns the version of the Internet library.\
\ls7\ilvl0
\f0\b \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
libURLSetLogField
\f1\b0  : Specifies a field for logging information about uploads and downloads on screen.\
\ls7\ilvl0
\f0\b \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
libURLLastRHHeaders
\f1\b0  : Returns the headers sent by the remote host in the most recent HTTP transaction.\
\ls7\ilvl0
\f0\b \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
libURLLastHTTPHeaders
\f1\b0  : Returns the value of the httpHeadersproperty used for the previous HTTP request.\
\pard\pardeftab720\partightenfactor0

\f0\b\fs48 \cf2 \
revBrowser \'96 Rendering a Web Page within a Stack\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf3 Use the revBrowser commands to render a web page within a stack. RevBrowser uses WebKit (Safari) on Mac OS X and Internet Explorer on Windows. Currently RevBrowser is not supported under Linux.\
To create a browser object in a stack, use the 
\f0\b revBrowserOpen
\f1\b0  function. This function takes the 
\f0\b windowID
\f1\b0  for the stack you want to open the browser in and a URL. Please note that the 
\f2\fs27\fsmilli13600 \cf10 \cb4 windowID
\f1\fs32 \cf3 \cb1 is not the same as the stack's ID property.\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf6 \cb4 put\cf3  \cf7 the\cf3  windowid \cf7 of\cf3  \cf7 this\cf3  \cf7 stack\cf3  \cf7 into\cf3  tWinID \
\cf6 put\cf3  \cf7 revBrowserOpen\cf3 (tWinID,\cf8 "http://www.google.com"\cf3 ) \cf7 into\cf3  sBrowserId\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf3 \cb1 To set properties on the browser, use the 
\f0\b revBrowserSet
\f1\b0  command. The following commands makes the border visible then sets the rectangle to be the same as an image named "browserimage":\
\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf6 \cb4 revBrowserSet\cf3  sBrowserId, \cf8 "showborder"\cf3 ,\cf8 "true"\cf3  \
\cf6 revBrowserSet\cf3  sBrowserId, \cf8 "rect"\cf3 ,rect \cf7 of\cf3  img \cf8 "browserimage"\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf3 \cb1 To close a browser when you finished with it, use the 
\f0\b revBrowserClose
\f1\b0  command. This command takes the 
\f2\fs27\fsmilli13600 \cf10 \cb4 windowID
\f1\fs32 \cf3 \cb1 for the stack containing the browser:\
\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf6 \cb4 revBrowserClose\cf3  sBrowserId\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf3 \cb1 RevBrowser supports a number of settings and messages. You can intercept a message whenever the user navigates to a link, prevent navigation, intercept clicks in the browser, requests to download files or to open a new window.\
For a complete list of commands that operate on RevBrowser, open the 
\f3\i LiveCode Dictionary
\f1\i0  and type "browser" into the filter box.\
\
\pard\pardeftab720\partightenfactor0

\f0\b\fs48 \cf2 SSL and Encryption\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf3 LiveCode includes support for using Secure Sockets Layer and the https protocol. It also includes an industrial strength encryption library you can use to encrypt files or data transmissions.\
\
\pard\pardeftab720\partightenfactor0

\f0\b\fs36 \cf2 Encrypting and Decrypting Data\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf3 To encrypt data, use the 
\f0\b encrypt
\f1\b0  command. The 
\f0\b encrypt
\f1\b0  command supports a wide variety of industry standard methods of encryption. The list of installed methods can be retrieved by using the 
\f0\b cipherNames
\f1\b0  function. To decrypt data, use the 
\f0\b decrypt
\f1\b0  command. For more information on these features, see the 
\f3\i LiveCode Dictionary
\f1\i0 .\
\
\pard\pardeftab720\partightenfactor0

\f0\b\fs28 \cf3 \cb9 Tip:
\f1\b0  If you are using the encryption library on a Windows system, it is possible that another application will have installed DLLs that use the same name as the ones included with LiveCode to support encryption. You can force your application to load LiveCode's SSL DLLs by setting the $PATH environment variable before loading the library.\
\cb1 \
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf6 \cb4 put\cf3  $PATH \cf7 into\cf3  tOldPath \
\cf6 put\cf3  <path \cf7 to\cf3  SSL DLLs> \cf7 into\cf3  $PATH \
\cf6 get\cf3  \cf7 the\cf3  \cf7 cipherNames\cf3  \cf12 -- Force loading of the SSL DLLs \cf3 \
\cf6 put\cf3  tOldPath \cf7 into\cf3  $PATH\cf0 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs36 \cf2 \cb1 \
Connecting using HTTPS\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf3 You may connect and download data from a URL using 
\f0\b https
\f1\b0  in the same way that you access an http URL.\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf6 \cb4 put\cf3  \cf7 URL\cf3  \cf8 "https://www.example.com/store.php"\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf3 \cb1 If there is an error, it will be placed into 
\f2\fs27\fsmilli13600 \cf10 \cb4 the result
\f1\fs32 \cf3 \cb1 . If you need to include a user name and password you can do so in the following form:\
\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf7 \cb4 https\cf3 ://user:\cf13 password\cf3 @www.example.com/\cf0 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs36 \cf2 \cb1 \
Implementing your own secure protocols\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf3 To implement your own secure protocol, use the 
\f0\b open secure socket
\f1\b0  variant of the 
\f0\b open socket
\f1\b0  command. You can specify whether or not to include certification, a certificate and a key. For more information on the 
\f0\b open socket
\f1\b0  command, see the 
\f3\i LiveCode Dictionary
\f1\i0 .\
\
\pard\pardeftab720\partightenfactor0

\f0\b\fs48 \cf2 Writing your own protocol with sockets\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf3 If you need to implement your own protocol, you can do so using LiveCode's socket support. To understand this chapter it is assumed you understand the basics of how the Internet works, including the concepts of sockets, IP addresses and ports. More information on these concepts can be found in Wikipedia.\
\
\pard\pardeftab720\partightenfactor0

\f0\b\fs28 \cf3 \cb9 Tip:
\f1\b0  The standard protocols that LiveCode support such as http and ftp, discussed earlier in this chapter, have all been implemented as a scripted library with LiveCode's socket support. You can examine this library by running 
\f2\fs24 \cf10 \cb4 edit script of stack "revlibURL"
\f1\fs28 \cf3 \cb9  in the Message Box. Beware, this library is not for the faint of heart. If you change anything, LiveCode's Internet commands may cease to operate.\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs32 \cf3 \
Opening a connection\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf3 To open a connection use the 
\f0\b open socket
\f1\b0  command. The following command opens a connection to the IP address specified in the 
\f2\fs27\fsmilli13600 \cf10 \cb4 tIPAddress
\f1\fs32 \cf3 \cb1 variable and the port specified in the 
\f2\fs27\fsmilli13600 \cf10 \cb4 tPort
\f1\fs32 \cf3 \cb1 variable. It specifies that LiveCode should send the message "
\f2\fs27\fsmilli13600 \cf10 \cb4 chatConnected
\f1\fs32 \cf3 \cb1 " when a connection has been established.\
\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf6 \cb4 open\cf3  socket (tIPAddress & \cf8 ":"\cf3  & tPort) \cf7 with\cf3  \cf7 message\cf3  \cf8 "chatConnected"\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf3 \cb1 To open a secure socket, use the 
\f0\b open secure socket
\f1\b0  variant of the command. To open a UDP datagram socket, use the 
\f0\b open datagram socket
\f1\b0  variant of the command. For more information on these variants, see the 
\f3\i LiveCode Dictionary
\f1\i0 .\
\pard\pardeftab720\partightenfactor0

\f0\b \cf3 \
Looking up a host name or IP address\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf3 You may look up an IP address from a host name with the 
\f0\b hostNameToAddress
\f1\b0  function. For example, to get the IP address for the livecode.com server:\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf6 \cb4 put\cf3  \cf7 hostNameToAddress\cf3 (\cf8 "www.livecode.com"\cf3 ) \cf7 into\cf3  tIPAddress\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf3 \cb1 \
To get the host name of the local machine, use the 
\f0\b hostName
\f1\b0  function. To look up the name from an IP address, use the 
\f0\b hostAddressToName
\f1\b0  function.\
\pard\pardeftab720\partightenfactor0

\f0\b \cf3 \
Reading and writing data\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf3 Once LiveCode opens a connection, it will send a 
\f2\fs27\fsmilli13600 \cf10 \cb4 chatConnected
\f1\fs32 \cf3 \cb1 message. To receive data, use the 
\f0\b read from socket
\f1\b0  command. The following message reads data from the socket and sends a 
\f2\fs27\fsmilli13600 \cf10 \cb4 chatReceived
\f1\fs32 \cf3 \cb1 message when reading is completed.\
\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf3 \cb4 on chatConnected pSocket    \
    \cf6 read\cf3  \cf7 from\cf3  socket pSocket \cf7 with\cf3  \cf7 message\cf3  chatReceived \
end chatConnected\
\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf3 \cb1 Once reading from the socket is completed the 
\f2\fs27\fsmilli13600 \cf10 \cb4 chatReceived
\f1\fs32 \cf3 \cb1  message can be used to process or display the data. It can then specify that it should continue to read from the socket until more data is received, sending another 
\f2\fs27\fsmilli13600 \cf10 \cb4 chatReceived
\f1\fs32 \cf3 \cb1  message when done.\
\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf3 \cb4 on chatReceived pSocket, pData \
    \cf6 put\cf3  pData \cf7 after\cf3  \cf7 field\cf3  \cf8 "chat output"\cf3 \
    \cf6 read\cf3  \cf7 from\cf3  socket pSocket \cf7 with\cf3  \cf7 message\cf3  \cf8 "chatReceived"\cf3  \
end chatReceived\
\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf3 \cb1 To write data to the socket, use the 
\f0\b write
\f1\b0  command:\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf6 \cb4 write\cf3  \cf7 field\cf3  \cf8 "chat text"\cf3  \cf7 to\cf3  socket tSocket\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs32 \cf3 \cb1 Disconnecting\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf3 To disconnect, use the 
\f0\b close socket
\f1\b0  command. You should store a variable with details of any open sockets and close them when you have finished using them or when your stack closes.\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf6 \cb4 close\cf3  socket (tIDAddress & \cf8 ":"\cf3  & tPort)\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs32 \cf3 \cb1 Listening for and accepting incoming connections\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf3 To accept incoming connections on a given port, use the 
\f0\b accept connections
\f1\b0  command. The following example tells LiveCode to listen for connections on port 1987 and send the message 
\f2\fs27\fsmilli13600 \cf10 \cb4 chatConnected
\f1\fs32 \cf3 \cb1 if a connection is established. You can then start to read data from the socket in the 
\f2\fs27\fsmilli13600 \cf10 \cb4 chatConnected
\f1\fs32 \cf3 \cb1 handler.\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf6 \cb4 accept\cf3  connections on port \cf8 1987\cf3  \cf7 with\cf3  \cf7 message\cf3  chatConnected\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs32 \cf3 \cb1 Handling errors\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf3 If there is an error, LiveCode will send a 
\f0\b socketError
\f1\b0  message with the address of the socket and the error message. If a socket is closed a 
\f0\b socketClosed
\f1\b0  message will be sent. If a socket times out waiting for data a 
\f0\b socketTimeout
\f1\b0  message will be sent. To get a list of sockets that are open, use the 
\f0\b openSockets
\f1\b0  function. You can set the default timeout interval by setting the 
\f0\b socketTimeOutInterval
\f1\b0  property. For more details on all of these features, see the 
\f3\i LiveCode Dictionary
\f1\i0 .\
\
\pard\pardeftab720\partightenfactor0

\f0\b\fs28 \cf3 \cb9 Tip:
\f1\b0  You can see a complete implementation of a basic client server "chat" application by navigating to Documentation -> Getting Started -> Sample Projects -> Internet Chat \'96 creating a custom protocol using sockets -> Launch. Most of the scripts for the "server" stack are in the "start server" button. Most of the scripts for the client are in the stack script for the "chat client" stack.}