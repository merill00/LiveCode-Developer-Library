<?lc
# THE variablenames FUNCTION OUTSIDE HANDLERS RETURNS NOTHING, YIELDS A SERVER ERROR IN revIgniter.

-- if "gRigA" is not among the items of line 4 of the variablenames then

# NOTE: THIS HAS CHANGED IN SERVER VERSION 7!
# HOWEVER IN THIS CONTEXT (OUTSIDE HANDLERS) THE "global" gRigA IS TREATED AS A LOCAL VARIABLE
# CREATED IN THE CURRENT HANDLER (CONFUSED?), SO THE LINE NUMBER OF the variablenames INCLUDING gRigA IS 2.

if gRigA is not an array then
	put "No direct script access allowed."
	exit to top
end if

##
# revIgniter
#
# An application development framework for LiveCode
# modeled on CodeIgniter.
#
# @package		revIgniter
# @author		  rabit@revigniter.com
# @copyright	Copyright (c) 2009 - 2020, dimensionB Bitter u. Bitter GmbH
# @license		http://revigniter.com/userGuide/license.html
# @link		    http://revigniter.com
##

## ------------------------------------------------------------------------

##
# System Front Controller
#
# Loads the base libraries and executes the request.
#
# @package		revIgniter
# @subpackage	revigniter
# @category	  Front-controller
# @author		  rabit@revigniter.com
# @link		    http://revigniter.com/userGuide/
##

## ------------------------------------------------------------------------


# RI VERSION
	constant RIVERSION = "2.1.6"
	constant RISTATE = "final"

# VERSION GETTER
  function rigVersion pWhat
    switch pWhat
      case "state"
        return RISTATE
      default
        return RIVERSION
    end switch
  end rigVersion


##
#------------------------------------------------------
#  DECLARE ADDITIONAL GLOBAL VARIABLES
	 global gControllerHandlers, gData, gModuleHandlers, gModulesHandlersA, gConfig, gHooksA, gRoute, gLang
#------------------------------------------------------
##


##
#------------------------------------------------------
#  Load the global handlers, loads the main configuration file too
#------------------------------------------------------
##

	start using stack (gRigA["BASEPATH"] & "revigniter/Common.livecodescript")


##
#------------------------------------------------------
# Load the framework constants
#------------------------------------------------------
##

	require gRigA["APPPATH"] & "config/constants" & gRigA["EXT"]


##
#------------------------------------------------------
# Start the timer... tick tock tick tock...
#------------------------------------------------------
##

	rigLoadLibrary "Benchmark"
	rigTimeMark "totalExecutionTime_start"
	rigTimeMark "loadingTimeBaseLibs_start"


##
#------------------------------------------------------
#  Load the Hooks library, loads the Config library too.
#------------------------------------------------------
##

	rigLoadLibrary "Hooks"


##
#------------------------------------------------------
#  Is there a "preSystem" hook?
#------------------------------------------------------
##

	get _rigCallHook("preSystem")


##
#------------------------------------------------------
#  Load the base libraries
#------------------------------------------------------
##

	rigLoadLibrary "Config"
	rigLoadLibrary "URI"
	rigLoadLibrary "Router"
	rigLoadLibrary "Output"


##
#------------------------------------------------------
#	Is there a valid cache file?  If so, we're done...
# ------------------------------------------------------
##

	get _rigCallHook("cacheOverride")
	if it is FALSE then
		if  _rigOutDisplayCache() is TRUE then
			exit to top
		end if
	end if

##
#------------------------------------------------------
#  Load the remaining base libraries
#------------------------------------------------------
##

	rigLoadLibrary "Input"
	rigLoadLibrary "Language"
	rigLoadLibrary "Loader"


##
#------------------------------------------------------
#  Load the base controller library
#------------------------------------------------------
##

	rigLoadLibrary "Controller"


##
#------------------------------------------------------
#  Load the local application controller or a module controller used as app controller
#------------------------------------------------------
#
# Note: The Router library automatically validates the controller path.  If this include fails it
# means that the default controller in the routes.lc file is not resolving to something valid.
#
##

	put empty into tRig404Override
  put TRUE into tUnableToLaodPage
  put rigFetchDirectory() into tRigControllerDir

  put tRigControllerDir & gRigA["controller"] & gRigA["EXT"] into tControllerPath

  if tRigControllerDir is empty then
	# CONTROLLER DIRECTORY WAS NOT FOUND, COMPOSE PATH TO 404 ERROR FILE
    _rigPrepare404Error
  end if

	if there is a file (gRigA["APPPATH"] & tControllerPath) then
		put FALSE into tUnableToLaodPage

		# CHECK IF WE ARE DEALING WITH A MODULE
		if gRigA["module"] <> empty then

			# LOAD CONFIG FILE ASSOCIATED WITH MODULE IF AVAILABLE
			get rigLoadConfigFile(, TRUE, TRUE, gRigA["module"])

			# LOAD AUTOLOAD FILE ASSOCIATED WITH MODULE IF AVAILABLE
			rigLoadAutoLoad gRigA["module"], TRUE
		end if

		include gRigA["APPPATH"] & tControllerPath

		if gRigA["module"] <> empty then
			put gModuleHandlers into gControllerHandlers
		end if
	end if

  if tUnableToLaodPage is TRUE then
    rigShowError "Unable to load your default controller. Please make sure the controller specified in your routes" & gRigA["EXT"] & " file is valid."
  end if



##
#------------------------------------------------------
#  Set a mark point for benchmarking
#------------------------------------------------------
##

	rigTimeMark "loadingTimeBaseLibs_end"



##
#------------------------------------------------------
#  Security check
#------------------------------------------------------
#
#  None of the handlers in the app controller or the
#  loader library can be called via the URI, nor can
#  controller handlers that begin with an underscore
##

	if (gRigA["controller"] is empty) or (gRigA["handler"] Is "controller") or (gRigA["handler"] begins with "_") or (toLower(gRigA["handler"]) is among the items of toLower(rigFetchControllerLibHandlers())) then

		# BEFORE SENDING THE DEFAULT 404 ERROR PAGE CHECK IF THERE IS A ROUTING RULE FOR 404 ERRORS
		_rigPrepare404Error
		if tRig404Override <> empty then

			put tRig404Override into t404ErrorSegments

			split t404ErrorSegments by "/"
       put t404ErrorSegments[1] into gRigA["controller"]
       put t404ErrorSegments[2] into gRigA["handler"]

       include gRigA["APPPATH"] & tRigControllerDir & gRigA["controller"] & gRigA["EXT"]

		else

      put gRigA["controller"] & "/" & gRigA["handler"] into gRigA["errorData"]["page"]
      rigShow404 gRigA["errorData"]

		end if
	end if


##
#------------------------------------------------------
# Is there a "preController" hook?
#------------------------------------------------------
##

	get _rigCallHook("preController")



##
#------------------------------------------------------
#  Call the controller and the requested handler
#------------------------------------------------------
##

	#MARK A START POINT SO WE CAN BENCHMARK THE CONTROLLER
	rigTimeMark "controllerExecutionTime_" & gRigA["controller"] &  "/" & gRigA["handler"] & "_start"

	##

	# REMOVE WHITESPACE FROM gControllerHandlers (A COMMA DELIMITED LIST)
	put replacetext(gControllerHandlers,"[ ]+","") into gControllerHandlers

	# RUN THE CONTROLLER HANDLER IF HANDLER NAME IS IN GLOBAL gControllerHandlers
		_rigDo gRigA["controller"]

	# OTHERWISE SOLELY RUN THE DEFAULT index HANDLER PROVIDED
	# THAT ITS NAME IS IN GLOBAL gControllerHandlers
	if (the result is not empty) and (gRigA["handler"] is not among the items of gControllerHandlers) then

		# BEFORE SENDING THE DEFAULT 404 ERROR PAGE CHECK IF THERE IS A ROUTING RULE FOR 404 ERRORS
		_rigPrepare404Error
		if tRig404Override <> empty then

			put tRig404Override into t404ErrorSegments

			split t404ErrorSegments by "/"
       put t404ErrorSegments[1] into gRigA["controller"]
       put t404ErrorSegments[2] into gRigA["handler"]

       include gRigA["APPPATH"] & tRigControllerDir & gRigA["controller"] & gRigA["EXT"]

			# REMOVE WHITESPACE FROM gControllerHandlers (A COMMA DELIMITED LIST)
			put replacetext(gControllerHandlers,"[ ]+","") into gControllerHandlers

		else

       put gRigA["controller"] & "/" & gRigA["handler"] into gRigA["errorData"]["page"]
       rigShow404 gRigA["errorData"]
		end if
	end if
	##

	# IS THIS A SCAFFOLDING REQUEST
	get rigScaffoldingRequest()
	if it is TRUE then
		get _rigCallHook("scaffoldingOverride")
		if it is FALSE then
			_rigScaffolding
		end if
	else


		##
		#------------------------------------------------------
		#  Is there a "postControllerConstructor" hook?
		#------------------------------------------------------
		##
		get _rigCallHook("postControllerConstructor")

		# IS THERE A "REMAP" HANDLER?
		if "_remap" is among the items of gControllerHandlers then
			_remap gRigA["handler"]
		else

			# CHECK IF HANDLER gRigA["handler"] IS IN CONTROLLER
			if (gRigA["handler"] <> empty) and ((gRigA["handler"] is not among the items of gControllerHandlers) or (gRigA["handler"] is gRigA["controller"])) then
				# HANDLER gRigA["handler"] IS NOT DEFINED IN THE CONTROLLER
				# BEFORE SENDING THE DEFAULT 404 ERROR PAGE CHECK IF A ROUTING RULE IS DEFINED FOR 404 ERRORS
				_rigPrepare404Error
				if tRig404Override <> empty then

					put tRig404Override into t404ErrorSegments

					split t404ErrorSegments by "/"
					put t404ErrorSegments[1] into gRigA["controller"]
					put t404ErrorSegments[2] into gRigA["handler"]

					include gRigA["APPPATH"] & tRigControllerDir & gRigA["controller"] & gRigA["EXT"]

					# REMOVE WHITESPACE FROM gControllerHandlers (A COMMA DELIMITED LIST)
					put replacetext(gControllerHandlers,"[ ]+","") into gControllerHandlers

					_rigDo gRigA["controller"]
					if (the result is not empty) and (gRigA["handler"] is not among the items of gControllerHandlers) then
              put gRigA["controller"] & "/" & gRigA["handler"] into gRigA["errorData"]["page"]
              rigShow404 gRigA["errorData"]
					end if

				else

            put gRigA["controller"] & "/" & gRigA["handler"] into gRigA["errorData"]["page"]
            rigShow404 gRigA["errorData"]
				end if
			end if

			# CALL THE REQUESTED HANDLER.
			# ANY URI SEGMENTS PRESENT (BESIDES THE CONTROLLER/HANDLER) WILL BE PASSED TO THE HANDLER FOR CONVENIENCE
			if (the number of lines in the keys of gRigA["rSegments"]) > 2 then
				put 1 into sIncr
				repeat for each line sRSegKey in the keys of gRigA["rSegments"]
					if sIncr > 2 then
						put quote & gRigA["rSegments"][sRSegKey] & quote & comma after sHandlerParams
					end if
					add 1 to sIncr
				end repeat
				delete last char of sHandlerParams
				put gRigA["handler"] into sHandler
				put sHandler && sHandlerParams into sHandler
				_rigDo sHandler
			else
				_rigDo gRigA["handler"]
			end if -- if (the number of lines in the keys of gRigA["rSegments"]) > 2 then
		end if -- if "_remap" is among the items of gControllerHandlers then

	end if -- if it is TRUE then


	# MARK A BENCHMARK END POINT
	rigTimeMark "controllerExecutionTime_" & gRigA["controller"] &  "/" & gRigA["handler"] & "_end"



##
#------------------------------------------------------
#  Get path to the 404 error file
#------------------------------------------------------
##

  command _rigPrepare404Error
    if gRigA["module"] is empty then
      put "controllers/" & gRigA["controller"] & gRigA["EXT"] into tControllerPath
      put "controllers/" into tRigControllerDir
      put gRoute[1]["404Override"] into tRig404Override
    else
      put "modules/" & gRigA["module"] & "/controllers/" & gRigA["controller"] & gRigA["EXT"] into tControllerPath
      put "modules/" & gRigA["module"] & "/controllers/" into tRigControllerDir
      put gRoute[gRigA["module"]][1]["404Override"] into tRig404Override
    end if
  end _rigPrepare404Error



##
#------------------------------------------------------
#  Workaround for a modification (bug?) in LiveCode server version 7.
#  The do command doesn't work outside of handler context.
#------------------------------------------------------
##

  command _rigDo pHandler pModule pParamsA
    if pModule <> empty then
      if word 1 of pHandler is among the items of gModulesHandlersA[pModule] then
        if pParamsA is an array then
          do pHandler && "pParamsA"
        else
          do pHandler
        end if
      else
        return "Error: handler not found!"
      end if

    else
      if word 1 of pHandler is among the items of gControllerHandlers then
        do pHandler
        return empty
      else
        return "Error: handler not found!"
      end if
    end if
	end _rigDo


# HELPER
	command _rigRequire pPath
	  require pPath
	end _rigRequire


##
#------------------------------------------------------
# Is there a "postController" hook?
#------------------------------------------------------
##

	get _rigCallHook("postController")



##
#------------------------------------------------------
#  Send the final rendered output to the browser
#------------------------------------------------------
##

	if _rigCallHook("displayOverride") is not TRUE then
		_rigDisplay
	end if


##
#------------------------------------------------------
#  Is there a "postSystem" hook?
#------------------------------------------------------
##

	get _rigCallHook("postSystem")


##
#------------------------------------------------------
#  Close the DB connection if one exists
#------------------------------------------------------
##

	if gRigA["databaseID"] is an integer then
		get _rigCloseDB()
	end if


--| END OF RevIgniter.lc
--| Location: ./system/revigniter/RevIgniter.lc
----------------------------------------------------------------------
